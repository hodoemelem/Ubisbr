
ubiSBR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba44  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a0  0800bbd8  0800bbd8  0001bbd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c278  0800c278  000203bc  2**0
                  CONTENTS
  4 .ARM          00000000  0800c278  0800c278  000203bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c278  0800c278  000203bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c278  0800c278  0001c278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c27c  0800c27c  0001c27c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003bc  20000000  0800c280  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001158  200003c0  0800c63c  000203c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001518  0800c63c  00021518  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d2f4  00000000  00000000  000203ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a4f  00000000  00000000  0003d6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001878  00000000  00000000  00042130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001630  00000000  00000000  000439a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c6a9  00000000  00000000  00044fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001eb42  00000000  00000000  00071681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc63d  00000000  00000000  000901c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018c800  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007504  00000000  00000000  0018c850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200003c0 	.word	0x200003c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bbbc 	.word	0x0800bbbc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200003c4 	.word	0x200003c4
 80001cc:	0800bbbc 	.word	0x0800bbbc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <controller_create>:
static uint8_t tick_time = 3;
static controller_t *self = NULL;

// constructor and destructor ============================================
controller_t *const controller_create()
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
    if (create_once)
 8000c4c:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <controller_create+0x24>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d006      	beq.n	8000c62 <controller_create+0x1a>
    {
        self = (controller_t *)malloc(sizeof(controller_t));
 8000c54:	2048      	movs	r0, #72	; 0x48
 8000c56:	f007 fe13 	bl	8008880 <malloc>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <controller_create+0x28>)
 8000c60:	601a      	str	r2, [r3, #0]
    }
    return self;
 8000c62:	4b03      	ldr	r3, [pc, #12]	; (8000c70 <controller_create+0x28>)
 8000c64:	681b      	ldr	r3, [r3, #0]
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000001 	.word	0x20000001
 8000c70:	200003e8 	.word	0x200003e8

08000c74 <controller_lunch_thread>:
    free(self);
}

// Public members ========================================================
BaseType_t controller_lunch_thread(controller_t *const self)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af02      	add	r7, sp, #8
 8000c7a:	6078      	str	r0, [r7, #4]
    if (lunch_once)
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <controller_lunch_thread+0x50>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d018      	beq.n	8000cb6 <controller_lunch_thread+0x42>
    {
        controller_telemetry_q = xQueueCreate(QUEUE_LENGTH, sizeof(controller_t));
 8000c84:	2200      	movs	r2, #0
 8000c86:	2148      	movs	r1, #72	; 0x48
 8000c88:	2005      	movs	r0, #5
 8000c8a:	f005 fa06 	bl	800609a <xQueueGenericCreate>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	4a0d      	ldr	r2, [pc, #52]	; (8000cc8 <controller_lunch_thread+0x54>)
 8000c92:	6013      	str	r3, [r2, #0]
        controller_run_return_Handle = xTaskCreate(controller_run, "Controller Activity Task",
 8000c94:	4b0d      	ldr	r3, [pc, #52]	; (8000ccc <controller_lunch_thread+0x58>)
 8000c96:	9301      	str	r3, [sp, #4]
 8000c98:	2303      	movs	r3, #3
 8000c9a:	9300      	str	r3, [sp, #0]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ca2:	490b      	ldr	r1, [pc, #44]	; (8000cd0 <controller_lunch_thread+0x5c>)
 8000ca4:	480b      	ldr	r0, [pc, #44]	; (8000cd4 <controller_lunch_thread+0x60>)
 8000ca6:	f005 fe99 	bl	80069dc <xTaskCreate>
 8000caa:	4603      	mov	r3, r0
 8000cac:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <controller_lunch_thread+0x64>)
 8000cae:	6013      	str	r3, [r2, #0]
                                                   STACK_SIZE,
                                                   (void *)self, CONTROLLER_PRIORITY, &controller_run_Handle);
        lunch_once = false;
 8000cb0:	4b04      	ldr	r3, [pc, #16]	; (8000cc4 <controller_lunch_thread+0x50>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	701a      	strb	r2, [r3, #0]
    }
    return controller_run_return_Handle;
 8000cb6:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <controller_lunch_thread+0x64>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000002 	.word	0x20000002
 8000cc8:	200003dc 	.word	0x200003dc
 8000ccc:	200003e0 	.word	0x200003e0
 8000cd0:	0800bbd8 	.word	0x0800bbd8
 8000cd4:	08000cdd 	.word	0x08000cdd
 8000cd8:	200003e4 	.word	0x200003e4

08000cdc <controller_run>:

// Private members =======================================================

static void controller_run(void *const self_)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
    TickType_t xLastWakeTime;
    // Initialize the xLastWakeTime variable with the current time.
    xLastWakeTime = xTaskGetTickCount();
 8000ce4:	f006 fa78 	bl	80071d8 <xTaskGetTickCount>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	60fb      	str	r3, [r7, #12]

    while (true)
    {
        controller_process_data();
 8000cec:	f000 f818 	bl	8000d20 <controller_process_data>
        vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(tick_time));
 8000cf0:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <controller_run+0x38>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cfa:	fb02 f303 	mul.w	r3, r2, r3
 8000cfe:	4a06      	ldr	r2, [pc, #24]	; (8000d18 <controller_run+0x3c>)
 8000d00:	fba2 2303 	umull	r2, r3, r2, r3
 8000d04:	099a      	lsrs	r2, r3, #6
 8000d06:	f107 030c 	add.w	r3, r7, #12
 8000d0a:	4611      	mov	r1, r2
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f005 ffb9 	bl	8006c84 <vTaskDelayUntil>
        controller_process_data();
 8000d12:	e7eb      	b.n	8000cec <controller_run+0x10>
 8000d14:	20000003 	.word	0x20000003
 8000d18:	10624dd3 	.word	0x10624dd3
 8000d1c:	00000000 	.word	0x00000000

08000d20 <controller_process_data>:
    }
}

static void controller_process_data()
{
 8000d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d22:	b09d      	sub	sp, #116	; 0x74
 8000d24:	af0a      	add	r7, sp, #40	; 0x28
    uint16_t CH_MID = 1500;
 8000d26:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8000d2a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    update_channels();
 8000d2e:	f001 fb00 	bl	8002332 <update_channels>
    self->setpoint_data = update_setpoints();
 8000d32:	4b75      	ldr	r3, [pc, #468]	; (8000f08 <controller_process_data+0x1e8>)
 8000d34:	681c      	ldr	r4, [r3, #0]
 8000d36:	f000 fcbb 	bl	80016b0 <update_setpoints>
 8000d3a:	ed84 0a04 	vstr	s0, [r4, #16]
    self->filter_data = filter_process_data_ex();
 8000d3e:	4b72      	ldr	r3, [pc, #456]	; (8000f08 <controller_process_data+0x1e8>)
 8000d40:	681c      	ldr	r4, [r3, #0]
 8000d42:	f107 0308 	add.w	r3, r7, #8
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 fed4 	bl	8001af4 <filter_process_data_ex>
 8000d4c:	3414      	adds	r4, #20
 8000d4e:	f107 0508 	add.w	r5, r7, #8
 8000d52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d5e:	682b      	ldr	r3, [r5, #0]
 8000d60:	6023      	str	r3, [r4, #0]


    switch (ctrl_state)
 8000d62:	4b6a      	ldr	r3, [pc, #424]	; (8000f0c <controller_process_data+0x1ec>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2b03      	cmp	r3, #3
 8000d68:	f000 8089 	beq.w	8000e7e <controller_process_data+0x15e>
 8000d6c:	2b03      	cmp	r3, #3
 8000d6e:	f300 80b3 	bgt.w	8000ed8 <controller_process_data+0x1b8>
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d002      	beq.n	8000d7c <controller_process_data+0x5c>
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d034      	beq.n	8000de4 <controller_process_data+0xc4>
        self->pwm_data = turn_motors_off();
        pid_controller_init(tick_time * 0.001);
        ctrl_state = first_start_stage;
        break;
    default:
        break;
 8000d7a:	e0ad      	b.n	8000ed8 <controller_process_data+0x1b8>
        if (channels[CH_SWA] > CH_MID) // radio SWD  to activate  system
 8000d7c:	4b64      	ldr	r3, [pc, #400]	; (8000f10 <controller_process_data+0x1f0>)
 8000d7e:	891b      	ldrh	r3, [r3, #8]
 8000d80:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8000d84:	429a      	cmp	r2, r3
 8000d86:	f080 80a9 	bcs.w	8000edc <controller_process_data+0x1bc>
            pid_controller_init(tick_time * 0.001);
 8000d8a:	4b62      	ldr	r3, [pc, #392]	; (8000f14 <controller_process_data+0x1f4>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fbc8 	bl	8000524 <__aeabi_i2d>
 8000d94:	a35a      	add	r3, pc, #360	; (adr r3, 8000f00 <controller_process_data+0x1e0>)
 8000d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d9a:	f7ff fc2d 	bl	80005f8 <__aeabi_dmul>
 8000d9e:	4602      	mov	r2, r0
 8000da0:	460b      	mov	r3, r1
 8000da2:	4610      	mov	r0, r2
 8000da4:	4619      	mov	r1, r3
 8000da6:	f7ff feff 	bl	8000ba8 <__aeabi_d2f>
 8000daa:	4603      	mov	r3, r0
 8000dac:	ee00 3a10 	vmov	s0, r3
 8000db0:	f000 f93a 	bl	8001028 <pid_controller_init>
            self->pwm_data = turn_motors_off();
 8000db4:	4b54      	ldr	r3, [pc, #336]	; (8000f08 <controller_process_data+0x1e8>)
 8000db6:	681c      	ldr	r4, [r3, #0]
 8000db8:	f001 fe9a 	bl	8002af0 <turn_motors_off>
 8000dbc:	eeb0 6a40 	vmov.f32	s12, s0
 8000dc0:	eef0 6a60 	vmov.f32	s13, s1
 8000dc4:	eeb0 7a41 	vmov.f32	s14, s2
 8000dc8:	eef0 7a61 	vmov.f32	s15, s3
 8000dcc:	ed84 6a00 	vstr	s12, [r4]
 8000dd0:	edc4 6a01 	vstr	s13, [r4, #4]
 8000dd4:	ed84 7a02 	vstr	s14, [r4, #8]
 8000dd8:	edc4 7a03 	vstr	s15, [r4, #12]
            ctrl_state = controller_enabled;
 8000ddc:	4b4b      	ldr	r3, [pc, #300]	; (8000f0c <controller_process_data+0x1ec>)
 8000dde:	2202      	movs	r2, #2
 8000de0:	701a      	strb	r2, [r3, #0]
        break;
 8000de2:	e07b      	b.n	8000edc <controller_process_data+0x1bc>
        if ((channels[CH_SWA] < CH_MID))
 8000de4:	4b4a      	ldr	r3, [pc, #296]	; (8000f10 <controller_process_data+0x1f0>)
 8000de6:	891b      	ldrh	r3, [r3, #8]
 8000de8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d903      	bls.n	8000df8 <controller_process_data+0xd8>
            ctrl_state = controller_disabled;
 8000df0:	4b46      	ldr	r3, [pc, #280]	; (8000f0c <controller_process_data+0x1ec>)
 8000df2:	2203      	movs	r2, #3
 8000df4:	701a      	strb	r2, [r3, #0]
            break;
 8000df6:	e072      	b.n	8000ede <controller_process_data+0x1be>
        self->pwm_data = pid_controller(self->setpoint_data, self->filter_data, motion());
 8000df8:	4b43      	ldr	r3, [pc, #268]	; (8000f08 <controller_process_data+0x1e8>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	607b      	str	r3, [r7, #4]
 8000dfe:	4b42      	ldr	r3, [pc, #264]	; (8000f08 <controller_process_data+0x1e8>)
 8000e00:	681c      	ldr	r4, [r3, #0]
 8000e02:	f000 f889 	bl	8000f18 <motion>
 8000e06:	4603      	mov	r3, r0
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	4a3f      	ldr	r2, [pc, #252]	; (8000f08 <controller_process_data+0x1e8>)
 8000e0c:	6816      	ldr	r6, [r2, #0]
 8000e0e:	9309      	str	r3, [sp, #36]	; 0x24
 8000e10:	466d      	mov	r5, sp
 8000e12:	603c      	str	r4, [r7, #0]
 8000e14:	3424      	adds	r4, #36	; 0x24
 8000e16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e1e:	6823      	ldr	r3, [r4, #0]
 8000e20:	602b      	str	r3, [r5, #0]
 8000e22:	683c      	ldr	r4, [r7, #0]
 8000e24:	f104 0314 	add.w	r3, r4, #20
 8000e28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e2a:	687c      	ldr	r4, [r7, #4]
 8000e2c:	ed94 0a04 	vldr	s0, [r4, #16]
 8000e30:	f000 f92e 	bl	8001090 <pid_controller>
 8000e34:	eeb0 6a40 	vmov.f32	s12, s0
 8000e38:	eef0 6a60 	vmov.f32	s13, s1
 8000e3c:	eeb0 7a41 	vmov.f32	s14, s2
 8000e40:	eef0 7a61 	vmov.f32	s15, s3
 8000e44:	ed86 6a00 	vstr	s12, [r6]
 8000e48:	edc6 6a01 	vstr	s13, [r6, #4]
 8000e4c:	ed86 7a02 	vstr	s14, [r6, #8]
 8000e50:	edc6 7a03 	vstr	s15, [r6, #12]
        set_motors_pwm(self->pwm_data);
 8000e54:	4b2c      	ldr	r3, [pc, #176]	; (8000f08 <controller_process_data+0x1e8>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	ed93 6a00 	vldr	s12, [r3]
 8000e5c:	edd3 6a01 	vldr	s13, [r3, #4]
 8000e60:	ed93 7a02 	vldr	s14, [r3, #8]
 8000e64:	edd3 7a03 	vldr	s15, [r3, #12]
 8000e68:	eeb0 0a46 	vmov.f32	s0, s12
 8000e6c:	eef0 0a66 	vmov.f32	s1, s13
 8000e70:	eeb0 1a47 	vmov.f32	s2, s14
 8000e74:	eef0 1a67 	vmov.f32	s3, s15
 8000e78:	f001 fe79 	bl	8002b6e <set_motors_pwm>
        break;
 8000e7c:	e02f      	b.n	8000ede <controller_process_data+0x1be>
        self->pwm_data = turn_motors_off();
 8000e7e:	4b22      	ldr	r3, [pc, #136]	; (8000f08 <controller_process_data+0x1e8>)
 8000e80:	681c      	ldr	r4, [r3, #0]
 8000e82:	f001 fe35 	bl	8002af0 <turn_motors_off>
 8000e86:	eeb0 6a40 	vmov.f32	s12, s0
 8000e8a:	eef0 6a60 	vmov.f32	s13, s1
 8000e8e:	eeb0 7a41 	vmov.f32	s14, s2
 8000e92:	eef0 7a61 	vmov.f32	s15, s3
 8000e96:	ed84 6a00 	vstr	s12, [r4]
 8000e9a:	edc4 6a01 	vstr	s13, [r4, #4]
 8000e9e:	ed84 7a02 	vstr	s14, [r4, #8]
 8000ea2:	edc4 7a03 	vstr	s15, [r4, #12]
        pid_controller_init(tick_time * 0.001);
 8000ea6:	4b1b      	ldr	r3, [pc, #108]	; (8000f14 <controller_process_data+0x1f4>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff fb3a 	bl	8000524 <__aeabi_i2d>
 8000eb0:	a313      	add	r3, pc, #76	; (adr r3, 8000f00 <controller_process_data+0x1e0>)
 8000eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb6:	f7ff fb9f 	bl	80005f8 <__aeabi_dmul>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	4610      	mov	r0, r2
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f7ff fe71 	bl	8000ba8 <__aeabi_d2f>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	ee00 3a10 	vmov	s0, r3
 8000ecc:	f000 f8ac 	bl	8001028 <pid_controller_init>
        ctrl_state = first_start_stage;
 8000ed0:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <controller_process_data+0x1ec>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	701a      	strb	r2, [r3, #0]
        break;
 8000ed6:	e002      	b.n	8000ede <controller_process_data+0x1be>
        break;
 8000ed8:	bf00      	nop
 8000eda:	e000      	b.n	8000ede <controller_process_data+0x1be>
        break;
 8000edc:	bf00      	nop
    }

    controller_update_output_data(self);
 8000ede:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <controller_process_data+0x1e8>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 f88e 	bl	8001004 <controller_update_output_data>
    monitor_status(ctrl_state);
 8000ee8:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <controller_process_data+0x1ec>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f001 faa1 	bl	8002434 <monitor_status>
}
 8000ef2:	bf00      	nop
 8000ef4:	374c      	adds	r7, #76	; 0x4c
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000efa:	bf00      	nop
 8000efc:	f3af 8000 	nop.w
 8000f00:	d2f1a9fc 	.word	0xd2f1a9fc
 8000f04:	3f50624d 	.word	0x3f50624d
 8000f08:	200003e8 	.word	0x200003e8
 8000f0c:	20000000 	.word	0x20000000
 8000f10:	2000050c 	.word	0x2000050c
 8000f14:	20000003 	.word	0x20000003

08000f18 <motion>:

static int8_t motion()
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
    int16_t pitch_ch = channels[CH_PIT];
 8000f1e:	4b38      	ldr	r3, [pc, #224]	; (8001000 <motion+0xe8>)
 8000f20:	885b      	ldrh	r3, [r3, #2]
 8000f22:	80fb      	strh	r3, [r7, #6]
    int16_t yaw_ch = channels[CH_YAW];
 8000f24:	4b36      	ldr	r3, [pc, #216]	; (8001000 <motion+0xe8>)
 8000f26:	88db      	ldrh	r3, [r3, #6]
 8000f28:	80bb      	strh	r3, [r7, #4]

    if (yaw_ch >= 1600)
 8000f2a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f2e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8000f32:	db01      	blt.n	8000f38 <motion+0x20>
    {
        return turn_left;
 8000f34:	2307      	movs	r3, #7
 8000f36:	e05d      	b.n	8000ff4 <motion+0xdc>
    }
    else if (yaw_ch <= 1400)
 8000f38:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f3c:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8000f40:	dc01      	bgt.n	8000f46 <motion+0x2e>
    {
        return turn_right;
 8000f42:	2308      	movs	r3, #8
 8000f44:	e056      	b.n	8000ff4 <motion+0xdc>
    }

    if ((pitch_ch >= 1550) && (pitch_ch <= 1650))
 8000f46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f4a:	f240 620d 	movw	r2, #1549	; 0x60d
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	dd07      	ble.n	8000f62 <motion+0x4a>
 8000f52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f56:	f240 6272 	movw	r2, #1650	; 0x672
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	dc01      	bgt.n	8000f62 <motion+0x4a>
    {
        return forward_mode1;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	e048      	b.n	8000ff4 <motion+0xdc>
    }
    else if ((pitch_ch > 1650) && (pitch_ch <= 1850))
 8000f62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f66:	f240 6272 	movw	r2, #1650	; 0x672
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	dd07      	ble.n	8000f7e <motion+0x66>
 8000f6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f72:	f240 723a 	movw	r2, #1850	; 0x73a
 8000f76:	4293      	cmp	r3, r2
 8000f78:	dc01      	bgt.n	8000f7e <motion+0x66>
    {
        return forward_mode2;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e03a      	b.n	8000ff4 <motion+0xdc>
    }
    else if (pitch_ch > 1850)
 8000f7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f82:	f240 723a 	movw	r2, #1850	; 0x73a
 8000f86:	4293      	cmp	r3, r2
 8000f88:	dd01      	ble.n	8000f8e <motion+0x76>
    {
        return forward_mode3;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	e032      	b.n	8000ff4 <motion+0xdc>
    }
    else if ((pitch_ch >= 1350) && (pitch_ch <= 1450))
 8000f8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f92:	f240 5245 	movw	r2, #1349	; 0x545
 8000f96:	4293      	cmp	r3, r2
 8000f98:	dd07      	ble.n	8000faa <motion+0x92>
 8000f9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f9e:	f240 52aa 	movw	r2, #1450	; 0x5aa
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	dc01      	bgt.n	8000faa <motion+0x92>
    {
        return backward_mode1;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e024      	b.n	8000ff4 <motion+0xdc>
    }
    else if ((pitch_ch >= 1150) && (pitch_ch < 1350))
 8000faa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fae:	f240 427d 	movw	r2, #1149	; 0x47d
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	dd07      	ble.n	8000fc6 <motion+0xae>
 8000fb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fba:	f240 5245 	movw	r2, #1349	; 0x545
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	dc01      	bgt.n	8000fc6 <motion+0xae>
    {
        return backward_mode2;
 8000fc2:	2304      	movs	r3, #4
 8000fc4:	e016      	b.n	8000ff4 <motion+0xdc>
    }
    else if (pitch_ch < 1150)
 8000fc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fca:	f240 427d 	movw	r2, #1149	; 0x47d
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	dc01      	bgt.n	8000fd6 <motion+0xbe>
    {
        return backward_mode3;
 8000fd2:	2305      	movs	r3, #5
 8000fd4:	e00e      	b.n	8000ff4 <motion+0xdc>
    }
    else if ((pitch_ch > 1450) && (pitch_ch < 1550))
 8000fd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fda:	f240 52aa 	movw	r2, #1450	; 0x5aa
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	dd07      	ble.n	8000ff2 <motion+0xda>
 8000fe2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fe6:	f240 620d 	movw	r2, #1549	; 0x60d
 8000fea:	4293      	cmp	r3, r2
 8000fec:	dc01      	bgt.n	8000ff2 <motion+0xda>
    {
        return stand_still;
 8000fee:	2306      	movs	r3, #6
 8000ff0:	e000      	b.n	8000ff4 <motion+0xdc>
    }

    return stand_still;
 8000ff2:	2306      	movs	r3, #6
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	2000050c 	.word	0x2000050c

08001004 <controller_update_output_data>:
{
    return (*self);
}

static void controller_update_output_data(controller_t *const self)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
    xQueueSend(controller_telemetry_q, (void *)self, (TickType_t)0);
 800100c:	4b05      	ldr	r3, [pc, #20]	; (8001024 <controller_update_output_data+0x20>)
 800100e:	6818      	ldr	r0, [r3, #0]
 8001010:	2300      	movs	r3, #0
 8001012:	2200      	movs	r2, #0
 8001014:	6879      	ldr	r1, [r7, #4]
 8001016:	f005 f8a1 	bl	800615c <xQueueGenericSend>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	200003dc 	.word	0x200003dc

08001028 <pid_controller_init>:
static float limit_correction_angle(float correction, float limit);
static float pid_controller_angle(const filter_t filter_data);
void motion_direction(enum motion_states motion_state);

void pid_controller_init(const float dt)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	ed87 0a01 	vstr	s0, [r7, #4]

    //////////////////////////Angle
    pid_angle_param.integral = 0.0f;
 8001032:	4b12      	ldr	r3, [pc, #72]	; (800107c <pid_controller_init+0x54>)
 8001034:	f04f 0200 	mov.w	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
    pid_angle_param.is_saturated = false;
 800103a:	4b10      	ldr	r3, [pc, #64]	; (800107c <pid_controller_init+0x54>)
 800103c:	2200      	movs	r2, #0
 800103e:	711a      	strb	r2, [r3, #4]
    pid_angle_param.is_same_sign = false;
 8001040:	4b0e      	ldr	r3, [pc, #56]	; (800107c <pid_controller_init+0x54>)
 8001042:	2200      	movs	r2, #0
 8001044:	715a      	strb	r2, [r3, #5]
    pid_angle_param.correction_limit = max_correction_angle;
 8001046:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <pid_controller_init+0x58>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a0c      	ldr	r2, [pc, #48]	; (800107c <pid_controller_init+0x54>)
 800104c:	6093      	str	r3, [r2, #8]
    pid_angle_param.dt = dt;
 800104e:	4a0b      	ldr	r2, [pc, #44]	; (800107c <pid_controller_init+0x54>)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6253      	str	r3, [r2, #36]	; 0x24

    // pid_angle_param.p_gain = 250.0;
    // pid_angle_param.i_gain = 3500;
    // pid_angle_param.d_gain = 20;

    pid_angle_param.p_gain = 750.0;
 8001054:	4b09      	ldr	r3, [pc, #36]	; (800107c <pid_controller_init+0x54>)
 8001056:	4a0b      	ldr	r2, [pc, #44]	; (8001084 <pid_controller_init+0x5c>)
 8001058:	619a      	str	r2, [r3, #24]
    pid_angle_param.i_gain = 9000.0;
 800105a:	4b08      	ldr	r3, [pc, #32]	; (800107c <pid_controller_init+0x54>)
 800105c:	4a0a      	ldr	r2, [pc, #40]	; (8001088 <pid_controller_init+0x60>)
 800105e:	61da      	str	r2, [r3, #28]
    pid_angle_param.d_gain = 40.0;
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <pid_controller_init+0x54>)
 8001062:	4a0a      	ldr	r2, [pc, #40]	; (800108c <pid_controller_init+0x64>)
 8001064:	621a      	str	r2, [r3, #32]

    pid_angle_param.angle_setpoint = 0;
 8001066:	4b05      	ldr	r3, [pc, #20]	; (800107c <pid_controller_init+0x54>)
 8001068:	f04f 0200 	mov.w	r2, #0
 800106c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800106e:	bf00      	nop
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	200003ec 	.word	0x200003ec
 8001080:	20000004 	.word	0x20000004
 8001084:	443b8000 	.word	0x443b8000
 8001088:	460ca000 	.word	0x460ca000
 800108c:	42200000 	.word	0x42200000

08001090 <pid_controller>:

pwm_t pid_controller(const setpoint_t setpoint, const filter_t filter_data, enum motion_states motion_state)
{
 8001090:	b084      	sub	sp, #16
 8001092:	b5b0      	push	{r4, r5, r7, lr}
 8001094:	b096      	sub	sp, #88	; 0x58
 8001096:	af0a      	add	r7, sp, #40	; 0x28
 8001098:	ed87 0a05 	vstr	s0, [r7, #20]
 800109c:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80010a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    filter_data_a = filter_data;
 80010a4:	4b2d      	ldr	r3, [pc, #180]	; (800115c <pid_controller+0xcc>)
 80010a6:	461d      	mov	r5, r3
 80010a8:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80010ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010b8:	6823      	ldr	r3, [r4, #0]
 80010ba:	602b      	str	r3, [r5, #0]
    float speed_setpoint = pid_controller_angle(filter_data);
 80010bc:	466d      	mov	r5, sp
 80010be:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80010c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010ca:	6823      	ldr	r3, [r4, #0]
 80010cc:	602b      	str	r3, [r5, #0]
 80010ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010d4:	f000 f96c 	bl	80013b0 <pid_controller_angle>
 80010d8:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c

    pid_angle_param.pwm_output = pid_angle_param.correction_temp > 0 ? speed_setpoint : -1 * speed_setpoint;
 80010dc:	4b20      	ldr	r3, [pc, #128]	; (8001160 <pid_controller+0xd0>)
 80010de:	edd3 7a05 	vldr	s15, [r3, #20]
 80010e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ea:	dd02      	ble.n	80010f2 <pid_controller+0x62>
 80010ec:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80010f0:	e003      	b.n	80010fa <pid_controller+0x6a>
 80010f2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80010f6:	eef1 7a67 	vneg.f32	s15, s15
 80010fa:	4b19      	ldr	r3, [pc, #100]	; (8001160 <pid_controller+0xd0>)
 80010fc:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    pwm_data.pwm1 = pid_angle_param.pwm_output;
 8001100:	4b17      	ldr	r3, [pc, #92]	; (8001160 <pid_controller+0xd0>)
 8001102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001104:	4a17      	ldr	r2, [pc, #92]	; (8001164 <pid_controller+0xd4>)
 8001106:	6013      	str	r3, [r2, #0]
    pwm_data.pwm2 = pid_angle_param.pwm_output;
 8001108:	4b15      	ldr	r3, [pc, #84]	; (8001160 <pid_controller+0xd0>)
 800110a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800110c:	4a15      	ldr	r2, [pc, #84]	; (8001164 <pid_controller+0xd4>)
 800110e:	6053      	str	r3, [r2, #4]

    motion_direction(motion_state);
 8001110:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8001114:	4618      	mov	r0, r3
 8001116:	f000 f827 	bl	8001168 <motion_direction>

    return pwm_data;
 800111a:	4b12      	ldr	r3, [pc, #72]	; (8001164 <pid_controller+0xd4>)
 800111c:	f107 041c 	add.w	r4, r7, #28
 8001120:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001122:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001126:	69f8      	ldr	r0, [r7, #28]
 8001128:	6a39      	ldr	r1, [r7, #32]
 800112a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800112c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800112e:	ee06 0a10 	vmov	s12, r0
 8001132:	ee06 1a90 	vmov	s13, r1
 8001136:	ee07 2a10 	vmov	s14, r2
 800113a:	ee07 3a90 	vmov	s15, r3
}
 800113e:	eeb0 0a46 	vmov.f32	s0, s12
 8001142:	eef0 0a66 	vmov.f32	s1, s13
 8001146:	eeb0 1a47 	vmov.f32	s2, s14
 800114a:	eef0 1a67 	vmov.f32	s3, s15
 800114e:	3730      	adds	r7, #48	; 0x30
 8001150:	46bd      	mov	sp, r7
 8001152:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001156:	b004      	add	sp, #16
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	2000042c 	.word	0x2000042c
 8001160:	200003ec 	.word	0x200003ec
 8001164:	2000041c 	.word	0x2000041c

08001168 <motion_direction>:

void motion_direction(enum motion_states motion_state)
{
 8001168:	b5b0      	push	{r4, r5, r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	71fb      	strb	r3, [r7, #7]
    static float limit = 0.0f;
    switch (motion_state)
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	2b08      	cmp	r3, #8
 8001176:	f200 809c 	bhi.w	80012b2 <motion_direction+0x14a>
 800117a:	a201      	add	r2, pc, #4	; (adr r2, 8001180 <motion_direction+0x18>)
 800117c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001180:	080011a5 	.word	0x080011a5
 8001184:	080011b7 	.word	0x080011b7
 8001188:	080011c9 	.word	0x080011c9
 800118c:	080011ad 	.word	0x080011ad
 8001190:	080011bf 	.word	0x080011bf
 8001194:	080011d1 	.word	0x080011d1
 8001198:	08001245 	.word	0x08001245
 800119c:	080011d9 	.word	0x080011d9
 80011a0:	0800120f 	.word	0x0800120f
    {

    case forward_mode1:
        limit = -0.8f;
 80011a4:	4b76      	ldr	r3, [pc, #472]	; (8001380 <motion_direction+0x218>)
 80011a6:	4a77      	ldr	r2, [pc, #476]	; (8001384 <motion_direction+0x21c>)
 80011a8:	601a      	str	r2, [r3, #0]
        break;
 80011aa:	e083      	b.n	80012b4 <motion_direction+0x14c>
    case backward_mode1:
        limit = 1.5f;
 80011ac:	4b74      	ldr	r3, [pc, #464]	; (8001380 <motion_direction+0x218>)
 80011ae:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80011b2:	601a      	str	r2, [r3, #0]
        break;
 80011b4:	e07e      	b.n	80012b4 <motion_direction+0x14c>

    case forward_mode2:
        limit = -0.8f;
 80011b6:	4b72      	ldr	r3, [pc, #456]	; (8001380 <motion_direction+0x218>)
 80011b8:	4a72      	ldr	r2, [pc, #456]	; (8001384 <motion_direction+0x21c>)
 80011ba:	601a      	str	r2, [r3, #0]
        break;
 80011bc:	e07a      	b.n	80012b4 <motion_direction+0x14c>
    case backward_mode2:
        limit = 1.5f;
 80011be:	4b70      	ldr	r3, [pc, #448]	; (8001380 <motion_direction+0x218>)
 80011c0:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80011c4:	601a      	str	r2, [r3, #0]
        break;
 80011c6:	e075      	b.n	80012b4 <motion_direction+0x14c>

    case forward_mode3:
        limit = -2.5f;
 80011c8:	4b6d      	ldr	r3, [pc, #436]	; (8001380 <motion_direction+0x218>)
 80011ca:	4a6f      	ldr	r2, [pc, #444]	; (8001388 <motion_direction+0x220>)
 80011cc:	601a      	str	r2, [r3, #0]
        break;
 80011ce:	e071      	b.n	80012b4 <motion_direction+0x14c>
    case backward_mode3:
        limit = 2.5f;
 80011d0:	4b6b      	ldr	r3, [pc, #428]	; (8001380 <motion_direction+0x218>)
 80011d2:	4a6e      	ldr	r2, [pc, #440]	; (800138c <motion_direction+0x224>)
 80011d4:	601a      	str	r2, [r3, #0]
        break;
 80011d6:	e06d      	b.n	80012b4 <motion_direction+0x14c>

    case turn_left:
        pid_angle_param.angle_setpoint = 0;
 80011d8:	4b6d      	ldr	r3, [pc, #436]	; (8001390 <motion_direction+0x228>)
 80011da:	f04f 0200 	mov.w	r2, #0
 80011de:	62da      	str	r2, [r3, #44]	; 0x2c
        pwm_data.pwm1 -= turn_speed;
 80011e0:	4b6c      	ldr	r3, [pc, #432]	; (8001394 <motion_direction+0x22c>)
 80011e2:	ed93 7a00 	vldr	s14, [r3]
 80011e6:	4b6c      	ldr	r3, [pc, #432]	; (8001398 <motion_direction+0x230>)
 80011e8:	edd3 7a00 	vldr	s15, [r3]
 80011ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011f0:	4b68      	ldr	r3, [pc, #416]	; (8001394 <motion_direction+0x22c>)
 80011f2:	edc3 7a00 	vstr	s15, [r3]
        pwm_data.pwm2 += turn_speed;
 80011f6:	4b67      	ldr	r3, [pc, #412]	; (8001394 <motion_direction+0x22c>)
 80011f8:	ed93 7a01 	vldr	s14, [r3, #4]
 80011fc:	4b66      	ldr	r3, [pc, #408]	; (8001398 <motion_direction+0x230>)
 80011fe:	edd3 7a00 	vldr	s15, [r3]
 8001202:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001206:	4b63      	ldr	r3, [pc, #396]	; (8001394 <motion_direction+0x22c>)
 8001208:	edc3 7a01 	vstr	s15, [r3, #4]
        break;
 800120c:	e052      	b.n	80012b4 <motion_direction+0x14c>

    case turn_right:
        pid_angle_param.angle_setpoint = 0;
 800120e:	4b60      	ldr	r3, [pc, #384]	; (8001390 <motion_direction+0x228>)
 8001210:	f04f 0200 	mov.w	r2, #0
 8001214:	62da      	str	r2, [r3, #44]	; 0x2c
        pwm_data.pwm1 += turn_speed;
 8001216:	4b5f      	ldr	r3, [pc, #380]	; (8001394 <motion_direction+0x22c>)
 8001218:	ed93 7a00 	vldr	s14, [r3]
 800121c:	4b5e      	ldr	r3, [pc, #376]	; (8001398 <motion_direction+0x230>)
 800121e:	edd3 7a00 	vldr	s15, [r3]
 8001222:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001226:	4b5b      	ldr	r3, [pc, #364]	; (8001394 <motion_direction+0x22c>)
 8001228:	edc3 7a00 	vstr	s15, [r3]
        pwm_data.pwm2 -= turn_speed;
 800122c:	4b59      	ldr	r3, [pc, #356]	; (8001394 <motion_direction+0x22c>)
 800122e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001232:	4b59      	ldr	r3, [pc, #356]	; (8001398 <motion_direction+0x230>)
 8001234:	edd3 7a00 	vldr	s15, [r3]
 8001238:	ee77 7a67 	vsub.f32	s15, s14, s15
 800123c:	4b55      	ldr	r3, [pc, #340]	; (8001394 <motion_direction+0x22c>)
 800123e:	edc3 7a01 	vstr	s15, [r3, #4]
        break;
 8001242:	e037      	b.n	80012b4 <motion_direction+0x14c>

    case stand_still:
        if (fabs(pid_angle_param.angle_setpoint) <= 0.3)
 8001244:	4b52      	ldr	r3, [pc, #328]	; (8001390 <motion_direction+0x228>)
 8001246:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800124a:	eef0 7ae7 	vabs.f32	s15, s15
 800124e:	ee17 0a90 	vmov	r0, s15
 8001252:	f7ff f979 	bl	8000548 <__aeabi_f2d>
 8001256:	a348      	add	r3, pc, #288	; (adr r3, 8001378 <motion_direction+0x210>)
 8001258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125c:	f7ff fc48 	bl	8000af0 <__aeabi_dcmple>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d004      	beq.n	8001270 <motion_direction+0x108>
        {
            pid_angle_param.angle_setpoint = 0;
 8001266:	4b4a      	ldr	r3, [pc, #296]	; (8001390 <motion_direction+0x228>)
 8001268:	f04f 0200 	mov.w	r2, #0
 800126c:	62da      	str	r2, [r3, #44]	; 0x2c
        }
        else
        {
            pid_angle_param.angle_setpoint -= 0.25 * pid_angle_param.angle_setpoint;
        }
        break;
 800126e:	e021      	b.n	80012b4 <motion_direction+0x14c>
            pid_angle_param.angle_setpoint -= 0.25 * pid_angle_param.angle_setpoint;
 8001270:	4b47      	ldr	r3, [pc, #284]	; (8001390 <motion_direction+0x228>)
 8001272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff f967 	bl	8000548 <__aeabi_f2d>
 800127a:	4604      	mov	r4, r0
 800127c:	460d      	mov	r5, r1
 800127e:	4b44      	ldr	r3, [pc, #272]	; (8001390 <motion_direction+0x228>)
 8001280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff f960 	bl	8000548 <__aeabi_f2d>
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	4b43      	ldr	r3, [pc, #268]	; (800139c <motion_direction+0x234>)
 800128e:	f7ff f9b3 	bl	80005f8 <__aeabi_dmul>
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	4620      	mov	r0, r4
 8001298:	4629      	mov	r1, r5
 800129a:	f7fe fff5 	bl	8000288 <__aeabi_dsub>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	4610      	mov	r0, r2
 80012a4:	4619      	mov	r1, r3
 80012a6:	f7ff fc7f 	bl	8000ba8 <__aeabi_d2f>
 80012aa:	4603      	mov	r3, r0
 80012ac:	4a38      	ldr	r2, [pc, #224]	; (8001390 <motion_direction+0x228>)
 80012ae:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 80012b0:	e000      	b.n	80012b4 <motion_direction+0x14c>

    default:
        break;
 80012b2:	bf00      	nop
    }

    static enum motion_states last_state = stand_still;
    if (motion_state <= backward_mode3)
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	2b05      	cmp	r3, #5
 80012b8:	d83f      	bhi.n	800133a <motion_direction+0x1d2>
    {
        if (last_state != motion_state)
 80012ba:	4b39      	ldr	r3, [pc, #228]	; (80013a0 <motion_direction+0x238>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	79fa      	ldrb	r2, [r7, #7]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d003      	beq.n	80012cc <motion_direction+0x164>
        {
            pid_angle_param.angle_setpoint = 0;
 80012c4:	4b32      	ldr	r3, [pc, #200]	; (8001390 <motion_direction+0x228>)
 80012c6:	f04f 0200 	mov.w	r2, #0
 80012ca:	62da      	str	r2, [r3, #44]	; 0x2c
        }
        last_state = motion_state;
 80012cc:	4a34      	ldr	r2, [pc, #208]	; (80013a0 <motion_direction+0x238>)
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	7013      	strb	r3, [r2, #0]

        if (fabs(pid_angle_param.angle_setpoint) < fabs(limit))
 80012d2:	4b2f      	ldr	r3, [pc, #188]	; (8001390 <motion_direction+0x228>)
 80012d4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80012d8:	eeb0 7ae7 	vabs.f32	s14, s15
 80012dc:	4b28      	ldr	r3, [pc, #160]	; (8001380 <motion_direction+0x218>)
 80012de:	edd3 7a00 	vldr	s15, [r3]
 80012e2:	eef0 7ae7 	vabs.f32	s15, s15
 80012e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ee:	d520      	bpl.n	8001332 <motion_direction+0x1ca>
        {
            pid_angle_param.angle_setpoint += 0.25 * limit;
 80012f0:	4b27      	ldr	r3, [pc, #156]	; (8001390 <motion_direction+0x228>)
 80012f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff f927 	bl	8000548 <__aeabi_f2d>
 80012fa:	4604      	mov	r4, r0
 80012fc:	460d      	mov	r5, r1
 80012fe:	4b20      	ldr	r3, [pc, #128]	; (8001380 <motion_direction+0x218>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff f920 	bl	8000548 <__aeabi_f2d>
 8001308:	f04f 0200 	mov.w	r2, #0
 800130c:	4b23      	ldr	r3, [pc, #140]	; (800139c <motion_direction+0x234>)
 800130e:	f7ff f973 	bl	80005f8 <__aeabi_dmul>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4620      	mov	r0, r4
 8001318:	4629      	mov	r1, r5
 800131a:	f7fe ffb7 	bl	800028c <__adddf3>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4610      	mov	r0, r2
 8001324:	4619      	mov	r1, r3
 8001326:	f7ff fc3f 	bl	8000ba8 <__aeabi_d2f>
 800132a:	4603      	mov	r3, r0
 800132c:	4a18      	ldr	r2, [pc, #96]	; (8001390 <motion_direction+0x228>)
 800132e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001330:	e003      	b.n	800133a <motion_direction+0x1d2>
        }
        else
        {
            pid_angle_param.angle_setpoint = limit;
 8001332:	4b13      	ldr	r3, [pc, #76]	; (8001380 <motion_direction+0x218>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a16      	ldr	r2, [pc, #88]	; (8001390 <motion_direction+0x228>)
 8001338:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
    }

    if (fabs(filter_data_a.compf_data.pitch) >= pitch_off_limit)
 800133a:	4b1a      	ldr	r3, [pc, #104]	; (80013a4 <motion_direction+0x23c>)
 800133c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001340:	eeb0 7ae7 	vabs.f32	s14, s15
 8001344:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <motion_direction+0x240>)
 8001346:	edd3 7a00 	vldr	s15, [r3]
 800134a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800134e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001352:	da00      	bge.n	8001356 <motion_direction+0x1ee>
    { // restart controller
        pwm_data.pwm1 = 0;
        pwm_data.pwm2 = 0;
        pid_controller_init(0.003);
    }
}
 8001354:	e00b      	b.n	800136e <motion_direction+0x206>
        pwm_data.pwm1 = 0;
 8001356:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <motion_direction+0x22c>)
 8001358:	f04f 0200 	mov.w	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
        pwm_data.pwm2 = 0;
 800135e:	4b0d      	ldr	r3, [pc, #52]	; (8001394 <motion_direction+0x22c>)
 8001360:	f04f 0200 	mov.w	r2, #0
 8001364:	605a      	str	r2, [r3, #4]
        pid_controller_init(0.003);
 8001366:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80013ac <motion_direction+0x244>
 800136a:	f7ff fe5d 	bl	8001028 <pid_controller_init>
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bdb0      	pop	{r4, r5, r7, pc}
 8001376:	bf00      	nop
 8001378:	33333333 	.word	0x33333333
 800137c:	3fd33333 	.word	0x3fd33333
 8001380:	20000460 	.word	0x20000460
 8001384:	bf4ccccd 	.word	0xbf4ccccd
 8001388:	c0200000 	.word	0xc0200000
 800138c:	40200000 	.word	0x40200000
 8001390:	200003ec 	.word	0x200003ec
 8001394:	2000041c 	.word	0x2000041c
 8001398:	20000008 	.word	0x20000008
 800139c:	3fd00000 	.word	0x3fd00000
 80013a0:	20000010 	.word	0x20000010
 80013a4:	2000042c 	.word	0x2000042c
 80013a8:	2000000c 	.word	0x2000000c
 80013ac:	3b449ba6 	.word	0x3b449ba6

080013b0 <pid_controller_angle>:

static float pid_controller_angle(const filter_t filter_data)
{
 80013b0:	b084      	sub	sp, #16
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	f107 0c10 	add.w	ip, r7, #16
 80013bc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    static float angle;
    angle = (-1 * filter_data.compf_data.pitch);
 80013c0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80013c4:	eef1 7a67 	vneg.f32	s15, s15
 80013c8:	4b61      	ldr	r3, [pc, #388]	; (8001550 <pid_controller_angle+0x1a0>)
 80013ca:	edc3 7a00 	vstr	s15, [r3]

    static float last = 0;
    float now;
    now = HAL_GetTick();
 80013ce:	f003 fa5d 	bl	800488c <HAL_GetTick>
 80013d2:	ee07 0a90 	vmov	s15, r0
 80013d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013da:	edc7 7a01 	vstr	s15, [r7, #4]
    float dt = (now - last) * 0.001;
 80013de:	4b5d      	ldr	r3, [pc, #372]	; (8001554 <pid_controller_angle+0x1a4>)
 80013e0:	edd3 7a00 	vldr	s15, [r3]
 80013e4:	ed97 7a01 	vldr	s14, [r7, #4]
 80013e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ec:	ee17 0a90 	vmov	r0, s15
 80013f0:	f7ff f8aa 	bl	8000548 <__aeabi_f2d>
 80013f4:	a354      	add	r3, pc, #336	; (adr r3, 8001548 <pid_controller_angle+0x198>)
 80013f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fa:	f7ff f8fd 	bl	80005f8 <__aeabi_dmul>
 80013fe:	4602      	mov	r2, r0
 8001400:	460b      	mov	r3, r1
 8001402:	4610      	mov	r0, r2
 8001404:	4619      	mov	r1, r3
 8001406:	f7ff fbcf 	bl	8000ba8 <__aeabi_d2f>
 800140a:	4603      	mov	r3, r0
 800140c:	603b      	str	r3, [r7, #0]
    last = now;
 800140e:	4a51      	ldr	r2, [pc, #324]	; (8001554 <pid_controller_angle+0x1a4>)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6013      	str	r3, [r2, #0]
    static bool first_entry = true;
    if (!first_entry)
 8001414:	4b50      	ldr	r3, [pc, #320]	; (8001558 <pid_controller_angle+0x1a8>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	f083 0301 	eor.w	r3, r3, #1
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b00      	cmp	r3, #0
 8001420:	d002      	beq.n	8001428 <pid_controller_angle+0x78>
    {
        pid_angle_param.dt = dt;
 8001422:	4a4e      	ldr	r2, [pc, #312]	; (800155c <pid_controller_angle+0x1ac>)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	6253      	str	r3, [r2, #36]	; 0x24
    }

    first_entry = false;
 8001428:	4b4b      	ldr	r3, [pc, #300]	; (8001558 <pid_controller_angle+0x1a8>)
 800142a:	2200      	movs	r2, #0
 800142c:	701a      	strb	r2, [r3, #0]

    pid_angle_param.error = pid_angle_param.angle_setpoint - angle;
 800142e:	4b4b      	ldr	r3, [pc, #300]	; (800155c <pid_controller_angle+0x1ac>)
 8001430:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001434:	4b46      	ldr	r3, [pc, #280]	; (8001550 <pid_controller_angle+0x1a0>)
 8001436:	edd3 7a00 	vldr	s15, [r3]
 800143a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800143e:	4b47      	ldr	r3, [pc, #284]	; (800155c <pid_controller_angle+0x1ac>)
 8001440:	edc3 7a03 	vstr	s15, [r3, #12]

    pid_angle_param.integral = calc_integral(pid_angle_param.is_saturated, pid_angle_param.is_same_sign, pid_angle_param.error, pid_angle_param.integral, pid_angle_param.dt);
 8001444:	4b45      	ldr	r3, [pc, #276]	; (800155c <pid_controller_angle+0x1ac>)
 8001446:	791b      	ldrb	r3, [r3, #4]
 8001448:	4a44      	ldr	r2, [pc, #272]	; (800155c <pid_controller_angle+0x1ac>)
 800144a:	7952      	ldrb	r2, [r2, #5]
 800144c:	4943      	ldr	r1, [pc, #268]	; (800155c <pid_controller_angle+0x1ac>)
 800144e:	edd1 7a03 	vldr	s15, [r1, #12]
 8001452:	4942      	ldr	r1, [pc, #264]	; (800155c <pid_controller_angle+0x1ac>)
 8001454:	ed91 7a00 	vldr	s14, [r1]
 8001458:	4940      	ldr	r1, [pc, #256]	; (800155c <pid_controller_angle+0x1ac>)
 800145a:	edd1 6a09 	vldr	s13, [r1, #36]	; 0x24
 800145e:	eeb0 1a66 	vmov.f32	s2, s13
 8001462:	eef0 0a47 	vmov.f32	s1, s14
 8001466:	eeb0 0a67 	vmov.f32	s0, s15
 800146a:	4611      	mov	r1, r2
 800146c:	4618      	mov	r0, r3
 800146e:	f000 f893 	bl	8001598 <calc_integral>
 8001472:	eef0 7a40 	vmov.f32	s15, s0
 8001476:	4b39      	ldr	r3, [pc, #228]	; (800155c <pid_controller_angle+0x1ac>)
 8001478:	edc3 7a00 	vstr	s15, [r3]
    pid_angle_param.correction = pid_angle_param.p_gain * pid_angle_param.error + pid_angle_param.i_gain * pid_angle_param.integral + pid_angle_param.d_gain * (filter_data.imu_data.gyroXn);
 800147c:	4b37      	ldr	r3, [pc, #220]	; (800155c <pid_controller_angle+0x1ac>)
 800147e:	ed93 7a06 	vldr	s14, [r3, #24]
 8001482:	4b36      	ldr	r3, [pc, #216]	; (800155c <pid_controller_angle+0x1ac>)
 8001484:	edd3 7a03 	vldr	s15, [r3, #12]
 8001488:	ee27 7a27 	vmul.f32	s14, s14, s15
 800148c:	4b33      	ldr	r3, [pc, #204]	; (800155c <pid_controller_angle+0x1ac>)
 800148e:	edd3 6a07 	vldr	s13, [r3, #28]
 8001492:	4b32      	ldr	r3, [pc, #200]	; (800155c <pid_controller_angle+0x1ac>)
 8001494:	edd3 7a00 	vldr	s15, [r3]
 8001498:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800149c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014a0:	4b2e      	ldr	r3, [pc, #184]	; (800155c <pid_controller_angle+0x1ac>)
 80014a2:	edd3 6a08 	vldr	s13, [r3, #32]
 80014a6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80014aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014b2:	4b2a      	ldr	r3, [pc, #168]	; (800155c <pid_controller_angle+0x1ac>)
 80014b4:	edc3 7a04 	vstr	s15, [r3, #16]

    pid_angle_param.correction_temp = pid_angle_param.correction;
 80014b8:	4b28      	ldr	r3, [pc, #160]	; (800155c <pid_controller_angle+0x1ac>)
 80014ba:	691b      	ldr	r3, [r3, #16]
 80014bc:	4a27      	ldr	r2, [pc, #156]	; (800155c <pid_controller_angle+0x1ac>)
 80014be:	6153      	str	r3, [r2, #20]
    pid_angle_param.correction = limit_correction_angle(fabs(pid_angle_param.correction), pid_angle_param.correction_limit);
 80014c0:	4b26      	ldr	r3, [pc, #152]	; (800155c <pid_controller_angle+0x1ac>)
 80014c2:	edd3 7a04 	vldr	s15, [r3, #16]
 80014c6:	eef0 7ae7 	vabs.f32	s15, s15
 80014ca:	4b24      	ldr	r3, [pc, #144]	; (800155c <pid_controller_angle+0x1ac>)
 80014cc:	ed93 7a02 	vldr	s14, [r3, #8]
 80014d0:	eef0 0a47 	vmov.f32	s1, s14
 80014d4:	eeb0 0a67 	vmov.f32	s0, s15
 80014d8:	f000 f842 	bl	8001560 <limit_correction_angle>
 80014dc:	eef0 7a40 	vmov.f32	s15, s0
 80014e0:	4b1e      	ldr	r3, [pc, #120]	; (800155c <pid_controller_angle+0x1ac>)
 80014e2:	edc3 7a04 	vstr	s15, [r3, #16]

    pid_angle_param.is_saturated = check_saturation(fabs(pid_angle_param.correction), fabs(pid_angle_param.correction_temp));
 80014e6:	4b1d      	ldr	r3, [pc, #116]	; (800155c <pid_controller_angle+0x1ac>)
 80014e8:	edd3 7a04 	vldr	s15, [r3, #16]
 80014ec:	eeb0 7ae7 	vabs.f32	s14, s15
 80014f0:	4b1a      	ldr	r3, [pc, #104]	; (800155c <pid_controller_angle+0x1ac>)
 80014f2:	edd3 7a05 	vldr	s15, [r3, #20]
 80014f6:	eef0 7ae7 	vabs.f32	s15, s15
 80014fa:	eef0 0a67 	vmov.f32	s1, s15
 80014fe:	eeb0 0a47 	vmov.f32	s0, s14
 8001502:	f000 f871 	bl	80015e8 <check_saturation>
 8001506:	4603      	mov	r3, r0
 8001508:	461a      	mov	r2, r3
 800150a:	4b14      	ldr	r3, [pc, #80]	; (800155c <pid_controller_angle+0x1ac>)
 800150c:	711a      	strb	r2, [r3, #4]
    pid_angle_param.is_same_sign = check_sign(pid_angle_param.correction_temp, pid_angle_param.error);
 800150e:	4b13      	ldr	r3, [pc, #76]	; (800155c <pid_controller_angle+0x1ac>)
 8001510:	edd3 7a05 	vldr	s15, [r3, #20]
 8001514:	4b11      	ldr	r3, [pc, #68]	; (800155c <pid_controller_angle+0x1ac>)
 8001516:	ed93 7a03 	vldr	s14, [r3, #12]
 800151a:	eef0 0a47 	vmov.f32	s1, s14
 800151e:	eeb0 0a67 	vmov.f32	s0, s15
 8001522:	f000 f87a 	bl	800161a <check_sign>
 8001526:	4603      	mov	r3, r0
 8001528:	461a      	mov	r2, r3
 800152a:	4b0c      	ldr	r3, [pc, #48]	; (800155c <pid_controller_angle+0x1ac>)
 800152c:	715a      	strb	r2, [r3, #5]

    return pid_angle_param.correction;
 800152e:	4b0b      	ldr	r3, [pc, #44]	; (800155c <pid_controller_angle+0x1ac>)
 8001530:	691b      	ldr	r3, [r3, #16]
 8001532:	ee07 3a90 	vmov	s15, r3
}
 8001536:	eeb0 0a67 	vmov.f32	s0, s15
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001542:	b004      	add	sp, #16
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	d2f1a9fc 	.word	0xd2f1a9fc
 800154c:	3f50624d 	.word	0x3f50624d
 8001550:	20000464 	.word	0x20000464
 8001554:	20000468 	.word	0x20000468
 8001558:	20000011 	.word	0x20000011
 800155c:	200003ec 	.word	0x200003ec

08001560 <limit_correction_angle>:

static float limit_correction_angle(float correction, float correction_limit)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	ed87 0a01 	vstr	s0, [r7, #4]
 800156a:	edc7 0a00 	vstr	s1, [r7]
    if (correction > correction_limit)
 800156e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001572:	edd7 7a00 	vldr	s15, [r7]
 8001576:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800157a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800157e:	dd01      	ble.n	8001584 <limit_correction_angle+0x24>
    {
        correction = correction_limit;
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	607b      	str	r3, [r7, #4]
    }
    return correction;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	ee07 3a90 	vmov	s15, r3
}
 800158a:	eeb0 0a67 	vmov.f32	s0, s15
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <calc_integral>:

static float calc_integral(bool is_saturated, bool is_same_sign, float error, float integral, float dt)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	460a      	mov	r2, r1
 80015a2:	ed87 0a02 	vstr	s0, [r7, #8]
 80015a6:	edc7 0a01 	vstr	s1, [r7, #4]
 80015aa:	ed87 1a00 	vstr	s2, [r7]
 80015ae:	73fb      	strb	r3, [r7, #15]
 80015b0:	4613      	mov	r3, r2
 80015b2:	73bb      	strb	r3, [r7, #14]
    return (is_saturated && is_same_sign) ? integral : (integral + (error * dt));
 80015b4:	7bfb      	ldrb	r3, [r7, #15]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d002      	beq.n	80015c0 <calc_integral+0x28>
 80015ba:	7bbb      	ldrb	r3, [r7, #14]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d10a      	bne.n	80015d6 <calc_integral+0x3e>
 80015c0:	ed97 7a02 	vldr	s14, [r7, #8]
 80015c4:	edd7 7a00 	vldr	s15, [r7]
 80015c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80015d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d4:	e001      	b.n	80015da <calc_integral+0x42>
 80015d6:	edd7 7a01 	vldr	s15, [r7, #4]
}
 80015da:	eeb0 0a67 	vmov.f32	s0, s15
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <check_saturation>:

static bool check_saturation(float correction, float correction_temp)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	ed87 0a01 	vstr	s0, [r7, #4]
 80015f2:	edc7 0a00 	vstr	s1, [r7]
    return !(correction == correction_temp) ? true : false;
 80015f6:	ed97 7a01 	vldr	s14, [r7, #4]
 80015fa:	edd7 7a00 	vldr	s15, [r7]
 80015fe:	eeb4 7a67 	vcmp.f32	s14, s15
 8001602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001606:	bf14      	ite	ne
 8001608:	2301      	movne	r3, #1
 800160a:	2300      	moveq	r3, #0
 800160c:	b2db      	uxtb	r3, r3
}
 800160e:	4618      	mov	r0, r3
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <check_sign>:

static bool check_sign(float correction, float error)
{
 800161a:	b480      	push	{r7}
 800161c:	b083      	sub	sp, #12
 800161e:	af00      	add	r7, sp, #0
 8001620:	ed87 0a01 	vstr	s0, [r7, #4]
 8001624:	edc7 0a00 	vstr	s1, [r7]
    return (correction * error) > 0 ? true : false;
 8001628:	ed97 7a01 	vldr	s14, [r7, #4]
 800162c:	edd7 7a00 	vldr	s15, [r7]
 8001630:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001634:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800163c:	bfcc      	ite	gt
 800163e:	2301      	movgt	r3, #1
 8001640:	2300      	movle	r3, #0
 8001642:	b2db      	uxtb	r3, r3
}
 8001644:	4618      	mov	r0, r3
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <map_ch_ref>:
static setpoint_t setpoint_data;

static float map_ch_ref(float ref_max, float ref_min, uint16_t ch_max, uint16_t ch_min, uint16_t ch_val);

static float map_ch_ref(float ref_max, float ref_min, uint16_t ch_max, uint16_t ch_min, uint16_t ch_val)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	ed87 0a03 	vstr	s0, [r7, #12]
 800165a:	edc7 0a02 	vstr	s1, [r7, #8]
 800165e:	4603      	mov	r3, r0
 8001660:	80fb      	strh	r3, [r7, #6]
 8001662:	460b      	mov	r3, r1
 8001664:	80bb      	strh	r3, [r7, #4]
 8001666:	4613      	mov	r3, r2
 8001668:	807b      	strh	r3, [r7, #2]
    return (ref_min + ((ch_val - ch_min) * (ref_max - ref_min)) / (ch_max - ch_min));
 800166a:	887a      	ldrh	r2, [r7, #2]
 800166c:	88bb      	ldrh	r3, [r7, #4]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	ee07 3a90 	vmov	s15, r3
 8001674:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001678:	edd7 6a03 	vldr	s13, [r7, #12]
 800167c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001680:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001684:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001688:	88fa      	ldrh	r2, [r7, #6]
 800168a:	88bb      	ldrh	r3, [r7, #4]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	ee07 3a90 	vmov	s15, r3
 8001692:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800169a:	edd7 7a02 	vldr	s15, [r7, #8]
 800169e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80016a2:	eeb0 0a67 	vmov.f32	s0, s15
 80016a6:	3714      	adds	r7, #20
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <update_setpoints>:

setpoint_t update_setpoints()
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
    uint16_t setpoint = channels[CH_THR];
 80016b6:	4b19      	ldr	r3, [pc, #100]	; (800171c <update_setpoints+0x6c>)
 80016b8:	889b      	ldrh	r3, [r3, #4]
 80016ba:	80fb      	strh	r3, [r7, #6]
    if (setpoint > CH_MAX)
 80016bc:	88fb      	ldrh	r3, [r7, #6]
 80016be:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80016c2:	d903      	bls.n	80016cc <update_setpoints+0x1c>
    {
        setpoint = CH_MAX;
 80016c4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80016c8:	80fb      	strh	r3, [r7, #6]
 80016ca:	e006      	b.n	80016da <update_setpoints+0x2a>
    }
    else if (setpoint < CH_MIN)
 80016cc:	88fb      	ldrh	r3, [r7, #6]
 80016ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016d2:	d202      	bcs.n	80016da <update_setpoints+0x2a>
    {
        setpoint = CH_MIN;
 80016d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d8:	80fb      	strh	r3, [r7, #6]
    }

    setpoint_data.encoder_count = map_ch_ref(max_correction, min_correction, CH_MAX, CH_MIN, setpoint);
 80016da:	4b11      	ldr	r3, [pc, #68]	; (8001720 <update_setpoints+0x70>)
 80016dc:	edd3 7a00 	vldr	s15, [r3]
 80016e0:	4b10      	ldr	r3, [pc, #64]	; (8001724 <update_setpoints+0x74>)
 80016e2:	ed93 7a00 	vldr	s14, [r3]
 80016e6:	88fb      	ldrh	r3, [r7, #6]
 80016e8:	461a      	mov	r2, r3
 80016ea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016ee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80016f2:	eef0 0a47 	vmov.f32	s1, s14
 80016f6:	eeb0 0a67 	vmov.f32	s0, s15
 80016fa:	f7ff ffa9 	bl	8001650 <map_ch_ref>
 80016fe:	eef0 7a40 	vmov.f32	s15, s0
 8001702:	4b09      	ldr	r3, [pc, #36]	; (8001728 <update_setpoints+0x78>)
 8001704:	edc3 7a00 	vstr	s15, [r3]

    return setpoint_data;
 8001708:	4b07      	ldr	r3, [pc, #28]	; (8001728 <update_setpoints+0x78>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	ee07 3a90 	vmov	s15, r3
 8001710:	eeb0 0a67 	vmov.f32	s0, s15
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	2000050c 	.word	0x2000050c
 8001720:	20000018 	.word	0x20000018
 8001724:	20000014 	.word	0x20000014
 8001728:	2000046c 	.word	0x2000046c

0800172c <init_Kalman>:

uint8_t x_time = 0;
uint8_t y_time = 0;

void init_Kalman(float roll_init, float pitch_init, float yaw_init)
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	ed87 0a03 	vstr	s0, [r7, #12]
 8001736:	edc7 0a02 	vstr	s1, [r7, #8]
 800173a:	ed87 1a01 	vstr	s2, [r7, #4]

    // Q_angle[0] = 0.001;
    // Q_gyroBias[0] = 0.0;
    // R_measure[0] = 1;

       Q_angle[0] = 0.001;
 800173e:	4b33      	ldr	r3, [pc, #204]	; (800180c <init_Kalman+0xe0>)
 8001740:	4a33      	ldr	r2, [pc, #204]	; (8001810 <init_Kalman+0xe4>)
 8001742:	601a      	str	r2, [r3, #0]
       Q_gyroBias[0] = 0.003;
 8001744:	4b33      	ldr	r3, [pc, #204]	; (8001814 <init_Kalman+0xe8>)
 8001746:	4a34      	ldr	r2, [pc, #208]	; (8001818 <init_Kalman+0xec>)
 8001748:	601a      	str	r2, [r3, #0]
       R_measure[0] = 0.03;
 800174a:	4b34      	ldr	r3, [pc, #208]	; (800181c <init_Kalman+0xf0>)
 800174c:	4a34      	ldr	r2, [pc, #208]	; (8001820 <init_Kalman+0xf4>)
 800174e:	601a      	str	r2, [r3, #0]

    angle[0] = roll_init; // Reset the angle
 8001750:	4a34      	ldr	r2, [pc, #208]	; (8001824 <init_Kalman+0xf8>)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	6013      	str	r3, [r2, #0]
    bias[0] = 0;          // Reset bias
 8001756:	4b34      	ldr	r3, [pc, #208]	; (8001828 <init_Kalman+0xfc>)
 8001758:	f04f 0200 	mov.w	r2, #0
 800175c:	601a      	str	r2, [r3, #0]

    // Since we assume that the bias is 0 and we know the starting angle (use setAngle), the error covariance matrix is set like so
    P_R[0][0] = 0;
 800175e:	4b33      	ldr	r3, [pc, #204]	; (800182c <init_Kalman+0x100>)
 8001760:	f04f 0200 	mov.w	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
    P_R[0][1] = 0;
 8001766:	4b31      	ldr	r3, [pc, #196]	; (800182c <init_Kalman+0x100>)
 8001768:	f04f 0200 	mov.w	r2, #0
 800176c:	605a      	str	r2, [r3, #4]
    P_R[1][0] = 0;
 800176e:	4b2f      	ldr	r3, [pc, #188]	; (800182c <init_Kalman+0x100>)
 8001770:	f04f 0200 	mov.w	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
    P_R[1][1] = 0;
 8001776:	4b2d      	ldr	r3, [pc, #180]	; (800182c <init_Kalman+0x100>)
 8001778:	f04f 0200 	mov.w	r2, #0
 800177c:	60da      	str	r2, [r3, #12]

    // Q_angle[1] = 0.001;
    // Q_gyroBias[1] = 0.0;
    // R_measure[1] = 1;

       Q_angle[1] = 0.001;
 800177e:	4b23      	ldr	r3, [pc, #140]	; (800180c <init_Kalman+0xe0>)
 8001780:	4a23      	ldr	r2, [pc, #140]	; (8001810 <init_Kalman+0xe4>)
 8001782:	605a      	str	r2, [r3, #4]
       Q_gyroBias[1] = 0.003;
 8001784:	4b23      	ldr	r3, [pc, #140]	; (8001814 <init_Kalman+0xe8>)
 8001786:	4a24      	ldr	r2, [pc, #144]	; (8001818 <init_Kalman+0xec>)
 8001788:	605a      	str	r2, [r3, #4]
       R_measure[1] = 0.03;
 800178a:	4b24      	ldr	r3, [pc, #144]	; (800181c <init_Kalman+0xf0>)
 800178c:	4a24      	ldr	r2, [pc, #144]	; (8001820 <init_Kalman+0xf4>)
 800178e:	605a      	str	r2, [r3, #4]

    angle[1] = pitch_init; // Reset the angle
 8001790:	4a24      	ldr	r2, [pc, #144]	; (8001824 <init_Kalman+0xf8>)
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	6053      	str	r3, [r2, #4]
    bias[1] = 0;           // Reset bias
 8001796:	4b24      	ldr	r3, [pc, #144]	; (8001828 <init_Kalman+0xfc>)
 8001798:	f04f 0200 	mov.w	r2, #0
 800179c:	605a      	str	r2, [r3, #4]

    // Since we assume that the bias is 0 and we know the starting angle (use setAngle), the error covariance matrix is set like so
    P_P[0][0] = 0;
 800179e:	4b24      	ldr	r3, [pc, #144]	; (8001830 <init_Kalman+0x104>)
 80017a0:	f04f 0200 	mov.w	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
    P_P[0][1] = 0;
 80017a6:	4b22      	ldr	r3, [pc, #136]	; (8001830 <init_Kalman+0x104>)
 80017a8:	f04f 0200 	mov.w	r2, #0
 80017ac:	605a      	str	r2, [r3, #4]
    P_P[1][0] = 0;
 80017ae:	4b20      	ldr	r3, [pc, #128]	; (8001830 <init_Kalman+0x104>)
 80017b0:	f04f 0200 	mov.w	r2, #0
 80017b4:	609a      	str	r2, [r3, #8]
    P_P[1][1] = 0;
 80017b6:	4b1e      	ldr	r3, [pc, #120]	; (8001830 <init_Kalman+0x104>)
 80017b8:	f04f 0200 	mov.w	r2, #0
 80017bc:	60da      	str	r2, [r3, #12]
    // Q_angle[2] = 0.001;
    // Q_gyroBias[2] = 0.003;
    // //    R_measure[2] = 0.1;
    // R_measure[2] = 100;

       Q_angle[2] = 0.001;
 80017be:	4b13      	ldr	r3, [pc, #76]	; (800180c <init_Kalman+0xe0>)
 80017c0:	4a13      	ldr	r2, [pc, #76]	; (8001810 <init_Kalman+0xe4>)
 80017c2:	609a      	str	r2, [r3, #8]
       Q_gyroBias[2] = 0.003;
 80017c4:	4b13      	ldr	r3, [pc, #76]	; (8001814 <init_Kalman+0xe8>)
 80017c6:	4a14      	ldr	r2, [pc, #80]	; (8001818 <init_Kalman+0xec>)
 80017c8:	609a      	str	r2, [r3, #8]
       R_measure[2] = 0.03;
 80017ca:	4b14      	ldr	r3, [pc, #80]	; (800181c <init_Kalman+0xf0>)
 80017cc:	4a14      	ldr	r2, [pc, #80]	; (8001820 <init_Kalman+0xf4>)
 80017ce:	609a      	str	r2, [r3, #8]

    angle[2] = yaw_init; // Reset the angle
 80017d0:	4a14      	ldr	r2, [pc, #80]	; (8001824 <init_Kalman+0xf8>)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6093      	str	r3, [r2, #8]
    bias[2] = 0;         // Reset bias
 80017d6:	4b14      	ldr	r3, [pc, #80]	; (8001828 <init_Kalman+0xfc>)
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]

    P_Y[0][0] = 0; // Since we assume that the bias is 0 and we know the starting angle (use setAngle), the error covariance matrix is set like so
 80017de:	4b15      	ldr	r3, [pc, #84]	; (8001834 <init_Kalman+0x108>)
 80017e0:	f04f 0200 	mov.w	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
    P_Y[0][1] = 0;
 80017e6:	4b13      	ldr	r3, [pc, #76]	; (8001834 <init_Kalman+0x108>)
 80017e8:	f04f 0200 	mov.w	r2, #0
 80017ec:	605a      	str	r2, [r3, #4]
    P_Y[1][0] = 0;
 80017ee:	4b11      	ldr	r3, [pc, #68]	; (8001834 <init_Kalman+0x108>)
 80017f0:	f04f 0200 	mov.w	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]
    P_Y[1][1] = 0;
 80017f6:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <init_Kalman+0x108>)
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	60da      	str	r2, [r3, #12]
}
 80017fe:	bf00      	nop
 8001800:	3714      	adds	r7, #20
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	20000470 	.word	0x20000470
 8001810:	3a83126f 	.word	0x3a83126f
 8001814:	2000047c 	.word	0x2000047c
 8001818:	3b449ba6 	.word	0x3b449ba6
 800181c:	200004d0 	.word	0x200004d0
 8001820:	3cf5c28f 	.word	0x3cf5c28f
 8001824:	200004c4 	.word	0x200004c4
 8001828:	20000488 	.word	0x20000488
 800182c:	20000494 	.word	0x20000494
 8001830:	200004a4 	.word	0x200004a4
 8001834:	200004b4 	.word	0x200004b4

08001838 <setAngle>:

    *rpy_new_Y = angle[2];
}

void setAngle(float newAngle_R, float newAngle_P, float newAngle_Y)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001842:	edc7 0a02 	vstr	s1, [r7, #8]
 8001846:	ed87 1a01 	vstr	s2, [r7, #4]
    angle[0] = newAngle_R;
 800184a:	4a07      	ldr	r2, [pc, #28]	; (8001868 <setAngle+0x30>)
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	6013      	str	r3, [r2, #0]
    angle[1] = newAngle_P;
 8001850:	4a05      	ldr	r2, [pc, #20]	; (8001868 <setAngle+0x30>)
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	6053      	str	r3, [r2, #4]
    angle[2] = newAngle_Y;
 8001856:	4a04      	ldr	r2, [pc, #16]	; (8001868 <setAngle+0x30>)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6093      	str	r3, [r2, #8]
} // Used to set angle, this should be set as the starting angle
 800185c:	bf00      	nop
 800185e:	3714      	adds	r7, #20
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	200004c4 	.word	0x200004c4
 800186c:	00000000 	.word	0x00000000

08001870 <comp_filter_angle>:
#include "Kalman.h"

#define M_PI 3.14159265358979323846 /* pi */

void comp_filter_angle(imu_t imu_data, float *new_angle, uint8_t len)
{
 8001870:	b084      	sub	sp, #16
 8001872:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800187e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    static float angle_pitch_acc = 0;
    static float angle_pitch = 0;
    static float alpha = 0.95;
    static bool first_entry = true;
    static double to_deg = ((double)180.0 / M_PI);
    double resultant = 0;
 8001882:	f04f 0200 	mov.w	r2, #0
 8001886:	f04f 0300 	mov.w	r3, #0
 800188a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    static float last = 0;
    float now;

    resultant = sqrt((imu_data.accXn * imu_data.accXn) + (imu_data.accYn * imu_data.accYn) + (imu_data.accZn * imu_data.accZn)); // should be approx. 1.0
 800188e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001892:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001896:	ee27 7a27 	vmul.f32	s14, s14, s15
 800189a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800189e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80018a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018aa:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80018ae:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80018b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ba:	ee17 0a90 	vmov	r0, s15
 80018be:	f7fe fe43 	bl	8000548 <__aeabi_f2d>
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	ec43 2b10 	vmov	d0, r2, r3
 80018ca:	f009 fe23 	bl	800b514 <sqrt>
 80018ce:	ed87 0b02 	vstr	d0, [r7, #8]

    if (resultant < 1.5f)
 80018d2:	f04f 0200 	mov.w	r2, #0
 80018d6:	4b64      	ldr	r3, [pc, #400]	; (8001a68 <comp_filter_angle+0x1f8>)
 80018d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018dc:	f7ff f8fe 	bl	8000adc <__aeabi_dcmplt>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f000 80ae 	beq.w	8001a44 <comp_filter_angle+0x1d4>
    {
        angle_pitch_acc = atan2(imu_data.accYn, imu_data.accZn) * to_deg;
 80018e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe fe2c 	bl	8000548 <__aeabi_f2d>
 80018f0:	4604      	mov	r4, r0
 80018f2:	460d      	mov	r5, r1
 80018f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7fe fe26 	bl	8000548 <__aeabi_f2d>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	ec43 2b11 	vmov	d1, r2, r3
 8001904:	ec45 4b10 	vmov	d0, r4, r5
 8001908:	f009 fe02 	bl	800b510 <atan2>
 800190c:	ec51 0b10 	vmov	r0, r1, d0
 8001910:	4b56      	ldr	r3, [pc, #344]	; (8001a6c <comp_filter_angle+0x1fc>)
 8001912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001916:	f7fe fe6f 	bl	80005f8 <__aeabi_dmul>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	4610      	mov	r0, r2
 8001920:	4619      	mov	r1, r3
 8001922:	f7ff f941 	bl	8000ba8 <__aeabi_d2f>
 8001926:	4603      	mov	r3, r0
 8001928:	4a51      	ldr	r2, [pc, #324]	; (8001a70 <comp_filter_angle+0x200>)
 800192a:	6013      	str	r3, [r2, #0]

        if (first_entry)
 800192c:	4b51      	ldr	r3, [pc, #324]	; (8001a74 <comp_filter_angle+0x204>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d026      	beq.n	8001982 <comp_filter_angle+0x112>
        {
            setAngle(angle_pitch_acc,0, 0);
 8001934:	4b4e      	ldr	r3, [pc, #312]	; (8001a70 <comp_filter_angle+0x200>)
 8001936:	edd3 7a00 	vldr	s15, [r3]
 800193a:	ed9f 1a4f 	vldr	s2, [pc, #316]	; 8001a78 <comp_filter_angle+0x208>
 800193e:	eddf 0a4e 	vldr	s1, [pc, #312]	; 8001a78 <comp_filter_angle+0x208>
 8001942:	eeb0 0a67 	vmov.f32	s0, s15
 8001946:	f7ff ff77 	bl	8001838 <setAngle>
            init_Kalman(angle_pitch_acc, 0, 0);
 800194a:	4b49      	ldr	r3, [pc, #292]	; (8001a70 <comp_filter_angle+0x200>)
 800194c:	edd3 7a00 	vldr	s15, [r3]
 8001950:	ed9f 1a49 	vldr	s2, [pc, #292]	; 8001a78 <comp_filter_angle+0x208>
 8001954:	eddf 0a48 	vldr	s1, [pc, #288]	; 8001a78 <comp_filter_angle+0x208>
 8001958:	eeb0 0a67 	vmov.f32	s0, s15
 800195c:	f7ff fee6 	bl	800172c <init_Kalman>
            angle_pitch = angle_pitch_acc;
 8001960:	4b43      	ldr	r3, [pc, #268]	; (8001a70 <comp_filter_angle+0x200>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a45      	ldr	r2, [pc, #276]	; (8001a7c <comp_filter_angle+0x20c>)
 8001966:	6013      	str	r3, [r2, #0]
            first_entry = false;
 8001968:	4b42      	ldr	r3, [pc, #264]	; (8001a74 <comp_filter_angle+0x204>)
 800196a:	2200      	movs	r2, #0
 800196c:	701a      	strb	r2, [r3, #0]
            last = HAL_GetTick();
 800196e:	f002 ff8d 	bl	800488c <HAL_GetTick>
 8001972:	ee07 0a90 	vmov	s15, r0
 8001976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800197a:	4b41      	ldr	r3, [pc, #260]	; (8001a80 <comp_filter_angle+0x210>)
 800197c:	edc3 7a00 	vstr	s15, [r3]
 8001980:	e060      	b.n	8001a44 <comp_filter_angle+0x1d4>

        }
        else
        {
            now = HAL_GetTick();
 8001982:	f002 ff83 	bl	800488c <HAL_GetTick>
 8001986:	ee07 0a90 	vmov	s15, r0
 800198a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800198e:	edc7 7a01 	vstr	s15, [r7, #4]
            float dt = (now - last) * 0.001;
 8001992:	4b3b      	ldr	r3, [pc, #236]	; (8001a80 <comp_filter_angle+0x210>)
 8001994:	edd3 7a00 	vldr	s15, [r3]
 8001998:	ed97 7a01 	vldr	s14, [r7, #4]
 800199c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019a0:	ee17 0a90 	vmov	r0, s15
 80019a4:	f7fe fdd0 	bl	8000548 <__aeabi_f2d>
 80019a8:	a32d      	add	r3, pc, #180	; (adr r3, 8001a60 <comp_filter_angle+0x1f0>)
 80019aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ae:	f7fe fe23 	bl	80005f8 <__aeabi_dmul>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	4610      	mov	r0, r2
 80019b8:	4619      	mov	r1, r3
 80019ba:	f7ff f8f5 	bl	8000ba8 <__aeabi_d2f>
 80019be:	4603      	mov	r3, r0
 80019c0:	603b      	str	r3, [r7, #0]
            last = now;
 80019c2:	4a2f      	ldr	r2, [pc, #188]	; (8001a80 <comp_filter_angle+0x210>)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6013      	str	r3, [r2, #0]
            angle_pitch = ((angle_pitch + (imu_data.gyroXn * dt)) * alpha + angle_pitch_acc * (1.0 - alpha));
 80019c8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80019cc:	edd7 7a00 	vldr	s15, [r7]
 80019d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019d4:	4b29      	ldr	r3, [pc, #164]	; (8001a7c <comp_filter_angle+0x20c>)
 80019d6:	edd3 7a00 	vldr	s15, [r3]
 80019da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019de:	4b29      	ldr	r3, [pc, #164]	; (8001a84 <comp_filter_angle+0x214>)
 80019e0:	edd3 7a00 	vldr	s15, [r3]
 80019e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019e8:	ee17 0a90 	vmov	r0, s15
 80019ec:	f7fe fdac 	bl	8000548 <__aeabi_f2d>
 80019f0:	4604      	mov	r4, r0
 80019f2:	460d      	mov	r5, r1
 80019f4:	4b1e      	ldr	r3, [pc, #120]	; (8001a70 <comp_filter_angle+0x200>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7fe fda5 	bl	8000548 <__aeabi_f2d>
 80019fe:	4680      	mov	r8, r0
 8001a00:	4689      	mov	r9, r1
 8001a02:	4b20      	ldr	r3, [pc, #128]	; (8001a84 <comp_filter_angle+0x214>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7fe fd9e 	bl	8000548 <__aeabi_f2d>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	f04f 0000 	mov.w	r0, #0
 8001a14:	491c      	ldr	r1, [pc, #112]	; (8001a88 <comp_filter_angle+0x218>)
 8001a16:	f7fe fc37 	bl	8000288 <__aeabi_dsub>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	4640      	mov	r0, r8
 8001a20:	4649      	mov	r1, r9
 8001a22:	f7fe fde9 	bl	80005f8 <__aeabi_dmul>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4620      	mov	r0, r4
 8001a2c:	4629      	mov	r1, r5
 8001a2e:	f7fe fc2d 	bl	800028c <__adddf3>
 8001a32:	4602      	mov	r2, r0
 8001a34:	460b      	mov	r3, r1
 8001a36:	4610      	mov	r0, r2
 8001a38:	4619      	mov	r1, r3
 8001a3a:	f7ff f8b5 	bl	8000ba8 <__aeabi_d2f>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	4a0e      	ldr	r2, [pc, #56]	; (8001a7c <comp_filter_angle+0x20c>)
 8001a42:	6013      	str	r3, [r2, #0]
            //getAngle_R(angle_pitch_acc, imu_data.gyroXn , dt, &angle_pitch);

        }
    }

    new_angle[0] = angle_pitch;
 8001a44:	4b0d      	ldr	r3, [pc, #52]	; (8001a7c <comp_filter_angle+0x20c>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	bf00      	nop
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	e8bd 43b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, lr}
 8001a56:	b004      	add	sp, #16
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	f3af 8000 	nop.w
 8001a60:	d2f1a9fc 	.word	0xd2f1a9fc
 8001a64:	3f50624d 	.word	0x3f50624d
 8001a68:	3ff80000 	.word	0x3ff80000
 8001a6c:	20000020 	.word	0x20000020
 8001a70:	200004dc 	.word	0x200004dc
 8001a74:	20000028 	.word	0x20000028
 8001a78:	00000000 	.word	0x00000000
 8001a7c:	200004e0 	.word	0x200004e0
 8001a80:	200004e4 	.word	0x200004e4
 8001a84:	2000002c 	.word	0x2000002c
 8001a88:	3ff00000 	.word	0x3ff00000

08001a8c <filter_create>:
static bool create_once = true;
static filter_t *self = NULL;

// constructor and destructor ============================================
filter_t *const filter_create(filter_param_t filter_param)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	ed87 0a01 	vstr	s0, [r7, #4]
    if (create_once)
 8001a96:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <filter_create+0x3c>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d00d      	beq.n	8001aba <filter_create+0x2e>
    {
        self = (filter_t *)malloc(sizeof(filter_t));
 8001a9e:	2034      	movs	r0, #52	; 0x34
 8001aa0:	f006 feee 	bl	8008880 <malloc>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	4b08      	ldr	r3, [pc, #32]	; (8001acc <filter_create+0x40>)
 8001aaa:	601a      	str	r2, [r3, #0]
        filter_param_init(filter_param);
 8001aac:	ed97 0a01 	vldr	s0, [r7, #4]
 8001ab0:	f000 f80e 	bl	8001ad0 <filter_param_init>
        create_once = false;
 8001ab4:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <filter_create+0x3c>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	701a      	strb	r2, [r3, #0]
    }
    return self;
 8001aba:	4b04      	ldr	r3, [pc, #16]	; (8001acc <filter_create+0x40>)
 8001abc:	681b      	ldr	r3, [r3, #0]
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000030 	.word	0x20000030
 8001acc:	200004e8 	.word	0x200004e8

08001ad0 <filter_param_init>:
}

// Private members =======================================================

static void filter_param_init(filter_param_t filter_param)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	ed87 0a01 	vstr	s0, [r7, #4]
    self->filter_param.gain =  filter_param.gain;
 8001ada:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <filter_param_init+0x20>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	200004e8 	.word	0x200004e8

08001af4 <filter_process_data_ex>:

filter_t filter_process_data_ex()
{
 8001af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001af6:	b0b1      	sub	sp, #196	; 0xc4
 8001af8:	af08      	add	r7, sp, #32
 8001afa:	6378      	str	r0, [r7, #52]	; 0x34

    float new_angle[1];

    sensor_process_data_ex();
 8001afc:	463b      	mov	r3, r7
 8001afe:	4618      	mov	r0, r3
 8001b00:	f001 fc44 	bl	800338c <sensor_process_data_ex>
    self->enc_data = sensor_ouput_data().enc_data;
 8001b04:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f001 fc71 	bl	80033f0 <sensor_ouput_data>
 8001b0e:	4b21      	ldr	r3, [pc, #132]	; (8001b94 <filter_process_data_ex+0xa0>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	461a      	mov	r2, r3
 8001b14:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b18:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001b1c:	e882 0003 	stmia.w	r2, {r0, r1}
    self->imu_data = sensor_ouput_data().imu_data;
 8001b20:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001b24:	4618      	mov	r0, r3
 8001b26:	f001 fc63 	bl	80033f0 <sensor_ouput_data>
 8001b2a:	4b1a      	ldr	r3, [pc, #104]	; (8001b94 <filter_process_data_ex+0xa0>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f103 0408 	add.w	r4, r3, #8
 8001b32:	f107 0578 	add.w	r5, r7, #120	; 0x78
 8001b36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b3e:	682b      	ldr	r3, [r5, #0]
 8001b40:	6023      	str	r3, [r4, #0]
    comp_filter_angle(self->imu_data,new_angle,1);
 8001b42:	4b14      	ldr	r3, [pc, #80]	; (8001b94 <filter_process_data_ex+0xa0>)
 8001b44:	681e      	ldr	r6, [r3, #0]
 8001b46:	2301      	movs	r3, #1
 8001b48:	9306      	str	r3, [sp, #24]
 8001b4a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b4e:	9305      	str	r3, [sp, #20]
 8001b50:	466d      	mov	r5, sp
 8001b52:	f106 0418 	add.w	r4, r6, #24
 8001b56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b5a:	6823      	ldr	r3, [r4, #0]
 8001b5c:	602b      	str	r3, [r5, #0]
 8001b5e:	f106 0308 	add.w	r3, r6, #8
 8001b62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b64:	f7ff fe84 	bl	8001870 <comp_filter_angle>
    self->compf_data.pitch = new_angle[0];
 8001b68:	4b0a      	ldr	r3, [pc, #40]	; (8001b94 <filter_process_data_ex+0xa0>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b6e:	62da      	str	r2, [r3, #44]	; 0x2c

    return (*self);
 8001b70:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <filter_process_data_ex+0xa0>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b76:	4614      	mov	r4, r2
 8001b78:	461d      	mov	r5, r3
 8001b7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b86:	682b      	ldr	r3, [r5, #0]
 8001b88:	6023      	str	r3, [r4, #0]
}
 8001b8a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001b8c:	37a4      	adds	r7, #164	; 0xa4
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b92:	bf00      	nop
 8001b94:	200004e8 	.word	0x200004e8

08001b98 <filter_output_data>:

filter_t filter_output_data()
{
 8001b98:	b4b0      	push	{r4, r5, r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
	return (*self);
 8001ba0:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <filter_output_data+0x2c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	4614      	mov	r4, r2
 8001ba8:	461d      	mov	r5, r3
 8001baa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bb6:	682b      	ldr	r3, [r5, #0]
 8001bb8:	6023      	str	r3, [r4, #0]
}
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bcb0      	pop	{r4, r5, r7}
 8001bc2:	4770      	bx	lr
 8001bc4:	200004e8 	.word	0x200004e8

08001bc8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b09c      	sub	sp, #112	; 0x70
 8001bcc:	af00      	add	r7, sp, #0
  HAL_Init();
 8001bce:	f002 fe30 	bl	8004832 <HAL_Init>
  SystemClock_Config();
 8001bd2:	f000 f84f 	bl	8001c74 <SystemClock_Config>
  gpio_init();
 8001bd6:	f000 f82f 	bl	8001c38 <gpio_init>

  char msg[100];

  sprintf(msg, "End of initializations, Creating Tasks  now \n");
 8001bda:	f107 030c 	add.w	r3, r7, #12
 8001bde:	4914      	ldr	r1, [pc, #80]	; (8001c30 <main+0x68>)
 8001be0:	4618      	mov	r0, r3
 8001be2:	f007 fc27 	bl	8009434 <siprintf>
  usart2_tx(msg);
 8001be6:	f107 030c 	add.w	r3, r7, #12
 8001bea:	4618      	mov	r0, r3
 8001bec:	f001 f915 	bl	8002e1a <usart2_tx>

  status_monitor_lunch();
 8001bf0:	f000 fbba 	bl	8002368 <status_monitor_lunch>
  telemetry_lunch_thread();
 8001bf4:	f001 fc14 	bl	8003420 <telemetry_lunch_thread>

  sensor_param_t sensor_param;
  sensor_create(sensor_param);
 8001bf8:	ed97 0a02 	vldr	s0, [r7, #8]
 8001bfc:	f001 fb92 	bl	8003324 <sensor_create>

  filter_param_t filter_param;
  filter_create(filter_param);
 8001c00:	ed97 0a01 	vldr	s0, [r7, #4]
 8001c04:	f7ff ff42 	bl	8001a8c <filter_create>

  controller_lunch_thread(controller_create());
 8001c08:	f7ff f81e 	bl	8000c48 <controller_create>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff f830 	bl	8000c74 <controller_lunch_thread>

  sprintf(msg, "Start Task Scheduler\n");
 8001c14:	f107 030c 	add.w	r3, r7, #12
 8001c18:	4906      	ldr	r1, [pc, #24]	; (8001c34 <main+0x6c>)
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f007 fc0a 	bl	8009434 <siprintf>
  usart2_tx(msg);
 8001c20:	f107 030c 	add.w	r3, r7, #12
 8001c24:	4618      	mov	r0, r3
 8001c26:	f001 f8f8 	bl	8002e1a <usart2_tx>
  vTaskStartScheduler();
 8001c2a:	f005 f9b9 	bl	8006fa0 <vTaskStartScheduler>

  while (1)
 8001c2e:	e7fe      	b.n	8001c2e <main+0x66>
 8001c30:	0800bbf4 	.word	0x0800bbf4
 8001c34:	0800bc24 	.word	0x0800bc24

08001c38 <gpio_init>:
  {
  }
}

void gpio_init()
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b09a      	sub	sp, #104	; 0x68
 8001c3c:	af00      	add	r7, sp, #0

  peri_clock_init();
 8001c3e:	f000 f870 	bl	8001d22 <peri_clock_init>
  status_monitor_init();
 8001c42:	f000 fb87 	bl	8002354 <status_monitor_init>
  sbr_gpio_init();
 8001c46:	f000 ff1d 	bl	8002a84 <sbr_gpio_init>
  i2c_init();
 8001c4a:	f000 f8b7 	bl	8001dbc <i2c_init>
  usart_init();
 8001c4e:	f000 ffe5 	bl	8002c1c <usart_init>
  init_mpu();
 8001c52:	f001 f973 	bl	8002f3c <init_mpu>

  char msg[100];
  sprintf(msg, "gpio init. done\n");
 8001c56:	1d3b      	adds	r3, r7, #4
 8001c58:	4905      	ldr	r1, [pc, #20]	; (8001c70 <gpio_init+0x38>)
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f007 fbea 	bl	8009434 <siprintf>
  usart2_tx(msg);
 8001c60:	1d3b      	adds	r3, r7, #4
 8001c62:	4618      	mov	r0, r3
 8001c64:	f001 f8d9 	bl	8002e1a <usart2_tx>
}
 8001c68:	bf00      	nop
 8001c6a:	3768      	adds	r7, #104	; 0x68
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	0800bc3c 	.word	0x0800bc3c

08001c74 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b096      	sub	sp, #88	; 0x58
 8001c78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c7a:	f107 0314 	add.w	r3, r7, #20
 8001c7e:	2244      	movs	r2, #68	; 0x44
 8001c80:	2100      	movs	r1, #0
 8001c82:	4618      	mov	r0, r3
 8001c84:	f006 fe1a 	bl	80088bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c88:	463b      	mov	r3, r7
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	605a      	str	r2, [r3, #4]
 8001c90:	609a      	str	r2, [r3, #8]
 8001c92:	60da      	str	r2, [r3, #12]
 8001c94:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001c96:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001c9a:	f002 fef3 	bl	8004a84 <HAL_PWREx_ControlVoltageScaling>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001ca4:	f000 f838 	bl	8001d18 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cb0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cb2:	2310      	movs	r3, #16
 8001cb4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 9;
 8001cc2:	2309      	movs	r3, #9
 8001cc4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001cc6:	2307      	movs	r3, #7
 8001cc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cd2:	f107 0314 	add.w	r3, r7, #20
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f002 ff2a 	bl	8004b30 <HAL_RCC_OscConfig>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001ce2:	f000 f819 	bl	8001d18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ce6:	230f      	movs	r3, #15
 8001ce8:	603b      	str	r3, [r7, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cea:	2303      	movs	r3, #3
 8001cec:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cf6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001cfc:	463b      	mov	r3, r7
 8001cfe:	2104      	movs	r1, #4
 8001d00:	4618      	mov	r0, r3
 8001d02:	f003 faf1 	bl	80052e8 <HAL_RCC_ClockConfig>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001d0c:	f000 f804 	bl	8001d18 <Error_Handler>
  }
}
 8001d10:	bf00      	nop
 8001d12:	3758      	adds	r7, #88	; 0x58
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d1c:	b672      	cpsid	i
}
 8001d1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d20:	e7fe      	b.n	8001d20 <Error_Handler+0x8>

08001d22 <peri_clock_init>:
#include "io.h"
#include "peri_clock.h"
#include "stm32l4xx_hal.h"
#include "stm32l4xx.h" // Device header
void peri_clock_init()
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	af00      	add	r7, sp, #0
	RCC_AHB2ENR_wr(GPIOAEN, SETBIT, WRITE); // enable GPIOA clk, port A
 8001d26:	2201      	movs	r2, #1
 8001d28:	2101      	movs	r1, #1
 8001d2a:	2000      	movs	r0, #0
 8001d2c:	f002 fbb8 	bl	80044a0 <RCC_AHB2ENR_wr>
	RCC_AHB2ENR_wr(GPIOBEN, SETBIT, WRITE); // enable gpiob clock rm pg251
 8001d30:	2201      	movs	r2, #1
 8001d32:	2101      	movs	r1, #1
 8001d34:	2001      	movs	r0, #1
 8001d36:	f002 fbb3 	bl	80044a0 <RCC_AHB2ENR_wr>
	RCC_AHB2ENR_wr(GPIOCEN, SETBIT, WRITE);
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	2002      	movs	r0, #2
 8001d40:	f002 fbae 	bl	80044a0 <RCC_AHB2ENR_wr>

	RCC_APB2ENR_wr(USART_1EN, SETBIT, WRITE);
 8001d44:	2201      	movs	r2, #1
 8001d46:	2101      	movs	r1, #1
 8001d48:	200e      	movs	r0, #14
 8001d4a:	f002 f891 	bl	8003e70 <RCC_APB2ENR_wr>
	RCC_APB1ENR1_wr(USART2EN, SETBIT, WRITE);
 8001d4e:	2201      	movs	r2, #1
 8001d50:	2101      	movs	r1, #1
 8001d52:	2011      	movs	r0, #17
 8001d54:	f002 fb74 	bl	8004440 <RCC_APB1ENR1_wr>
	RCC_APB1ENR1_wr(USART3EN, SETBIT, WRITE);
 8001d58:	2201      	movs	r2, #1
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	2012      	movs	r0, #18
 8001d5e:	f002 fb6f 	bl	8004440 <RCC_APB1ENR1_wr>

	RCC_APB1ENR1_wr(I2C1EN, SETBIT, WRITE);
 8001d62:	2201      	movs	r2, #1
 8001d64:	2101      	movs	r1, #1
 8001d66:	2015      	movs	r0, #21
 8001d68:	f002 fb6a 	bl	8004440 <RCC_APB1ENR1_wr>

	RCC_AHB1ENR_wr(DMA_1EN, SETBIT, WRITE);
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	2101      	movs	r1, #1
 8001d70:	2000      	movs	r0, #0
 8001d72:	f002 f84d 	bl	8003e10 <RCC_AHB1ENR_wr>

	RCC_APB1ENR1_wr(TIM2EN, SETBIT, WRITE);
 8001d76:	2201      	movs	r2, #1
 8001d78:	2101      	movs	r1, #1
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	f002 fb60 	bl	8004440 <RCC_APB1ENR1_wr>
	RCC_APB2ENR_wr(TIM_1EN, SETBIT, WRITE);
 8001d80:	2201      	movs	r2, #1
 8001d82:	2101      	movs	r1, #1
 8001d84:	200b      	movs	r0, #11
 8001d86:	f002 f873 	bl	8003e70 <RCC_APB2ENR_wr>
	RCC_APB1ENR1_wr(TIM3EN, SETBIT, WRITE);
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	2101      	movs	r1, #1
 8001d8e:	2001      	movs	r0, #1
 8001d90:	f002 fb56 	bl	8004440 <RCC_APB1ENR1_wr>
}
 8001d94:	bf00      	nop
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM7)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a04      	ldr	r2, [pc, #16]	; (8001db8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d101      	bne.n	8001dae <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 8001daa:	f002 fd5b 	bl	8004864 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40001400 	.word	0x40001400

08001dbc <i2c_init>:
uint8_t send_data(uint8_t saddr, uint8_t maddr, uint8_t data_len, uint8_t *buffer);
uint8_t read_data(uint8_t saddr, uint8_t maddr, uint8_t data_len, uint8_t *buffer);
void i2c1_reset(void);

void i2c_init()
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
    // PB8 scl, PB9 sda for i2c
    GPIO_MODER_w(PORTB, MODE8, ALT);
 8001dc0:	2202      	movs	r2, #2
 8001dc2:	2108      	movs	r1, #8
 8001dc4:	2001      	movs	r0, #1
 8001dc6:	f002 fc03 	bl	80045d0 <GPIO_MODER_w>
    GPIO_AFR_w(PORTB, AFSEL0_8, I2C, true);
 8001dca:	2301      	movs	r3, #1
 8001dcc:	2204      	movs	r2, #4
 8001dce:	2100      	movs	r1, #0
 8001dd0:	2001      	movs	r0, #1
 8001dd2:	f002 fb95 	bl	8004500 <GPIO_AFR_w>
    GPIO_MODER_w(PORTB, MODE9, ALT);
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	2109      	movs	r1, #9
 8001dda:	2001      	movs	r0, #1
 8001ddc:	f002 fbf8 	bl	80045d0 <GPIO_MODER_w>
    GPIO_AFR_w(PORTB, AFSEL1_9, I2C, true);
 8001de0:	2301      	movs	r3, #1
 8001de2:	2204      	movs	r2, #4
 8001de4:	2104      	movs	r1, #4
 8001de6:	2001      	movs	r0, #1
 8001de8:	f002 fb8a 	bl	8004500 <GPIO_AFR_w>
}
 8001dec:	bf00      	nop
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <i2c1_init>:

void i2c1_init(void)
{ ///////////12c1 for IMU////////////////////////////////////////////////////////////////////////////////////////
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
    //   pb8,9 open drain rm pg306
    GPIO_OTYPER_wr(PORTB, OT8, SETBIT, WRITE);
 8001df4:	2301      	movs	r3, #1
 8001df6:	2201      	movs	r2, #1
 8001df8:	2108      	movs	r1, #8
 8001dfa:	2001      	movs	r0, #1
 8001dfc:	f002 f96a 	bl	80040d4 <GPIO_OTYPER_wr>
    GPIO_OTYPER_wr(PORTB, OT9, SETBIT, WRITE);
 8001e00:	2301      	movs	r3, #1
 8001e02:	2201      	movs	r2, #1
 8001e04:	2109      	movs	r1, #9
 8001e06:	2001      	movs	r0, #1
 8001e08:	f002 f964 	bl	80040d4 <GPIO_OTYPER_wr>
    i2c1_reset();
 8001e0c:	f000 f802 	bl	8001e14 <i2c1_reset>
}
 8001e10:	bf00      	nop
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <i2c1_reset>:

void i2c1_reset(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
    I2C_CR1_wr(I2C_1, PE, !SETBIT, WRITE);
 8001e18:	2301      	movs	r3, #1
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	2000      	movs	r0, #0
 8001e20:	f002 fa12 	bl	8004248 <I2C_CR1_wr>
    I2C_CR1_wr(I2C_1, PE, !SETBIT, READ);
 8001e24:	2300      	movs	r3, #0
 8001e26:	2200      	movs	r2, #0
 8001e28:	2100      	movs	r1, #0
 8001e2a:	2000      	movs	r0, #0
 8001e2c:	f002 fa0c 	bl	8004248 <I2C_CR1_wr>
    I2C_TIMINGR_w(I2C_1, TIMINGR_VAL);
 8001e30:	4905      	ldr	r1, [pc, #20]	; (8001e48 <i2c1_reset+0x34>)
 8001e32:	2000      	movs	r0, #0
 8001e34:	f002 fa6a 	bl	800430c <I2C_TIMINGR_w>
    I2C_CR1_wr(I2C_1, PE, SETBIT, WRITE);
 8001e38:	2301      	movs	r3, #1
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	2000      	movs	r0, #0
 8001e40:	f002 fa02 	bl	8004248 <I2C_CR1_wr>
}
 8001e44:	bf00      	nop
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	00610611 	.word	0x00610611

08001e4c <config_12c1_node>:

void config_12c1_node(uint8_t saddr, uint8_t mem_addr, uint8_t data, uint8_t data_len)
{
 8001e4c:	b590      	push	{r4, r7, lr}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4604      	mov	r4, r0
 8001e54:	4608      	mov	r0, r1
 8001e56:	4611      	mov	r1, r2
 8001e58:	461a      	mov	r2, r3
 8001e5a:	4623      	mov	r3, r4
 8001e5c:	71fb      	strb	r3, [r7, #7]
 8001e5e:	4603      	mov	r3, r0
 8001e60:	71bb      	strb	r3, [r7, #6]
 8001e62:	460b      	mov	r3, r1
 8001e64:	717b      	strb	r3, [r7, #5]
 8001e66:	4613      	mov	r3, r2
 8001e68:	713b      	strb	r3, [r7, #4]
    send_data(saddr, mem_addr, data_len, &data);
 8001e6a:	1d7b      	adds	r3, r7, #5
 8001e6c:	793a      	ldrb	r2, [r7, #4]
 8001e6e:	79b9      	ldrb	r1, [r7, #6]
 8001e70:	79f8      	ldrb	r0, [r7, #7]
 8001e72:	f000 f8e1 	bl	8002038 <send_data>
}
 8001e76:	bf00      	nop
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd90      	pop	{r4, r7, pc}

08001e7e <i2c1_start_ret>:

uint8_t i2c1_start_ret(uint8_t saddr, uint8_t rwmode, uint8_t data_len)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b082      	sub	sp, #8
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	4603      	mov	r3, r0
 8001e86:	71fb      	strb	r3, [r7, #7]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	71bb      	strb	r3, [r7, #6]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	717b      	strb	r3, [r7, #5]
    I2C_CR2_wr(I2C_1, SADD07, saddr << 1, WRITE); // slave address,sw end mode, write mode(0) on reset
 8001e90:	79fb      	ldrb	r3, [r7, #7]
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	461a      	mov	r2, r3
 8001e96:	2301      	movs	r3, #1
 8001e98:	2100      	movs	r1, #0
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	f002 f96e 	bl	800417c <I2C_CR2_wr>
    I2C_CR2_wr(I2C_1, RD_WRN, rwmode, WRITE);     // change to read mode or write mode
 8001ea0:	79ba      	ldrb	r2, [r7, #6]
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	210a      	movs	r1, #10
 8001ea6:	2000      	movs	r0, #0
 8001ea8:	f002 f968 	bl	800417c <I2C_CR2_wr>
    I2C_CR2_wr(I2C_1, NBYTES, data_len, WRITE);   // read/write n number of registers(byte)
 8001eac:	797a      	ldrb	r2, [r7, #5]
 8001eae:	2301      	movs	r3, #1
 8001eb0:	2110      	movs	r1, #16
 8001eb2:	2000      	movs	r0, #0
 8001eb4:	f002 f962 	bl	800417c <I2C_CR2_wr>
    I2C_CR2_wr(I2C_1, RELOAD, !SETBIT, WRITE);    // no reload
 8001eb8:	2301      	movs	r3, #1
 8001eba:	2200      	movs	r2, #0
 8001ebc:	2118      	movs	r1, #24
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	f002 f95c 	bl	800417c <I2C_CR2_wr>
    I2C_CR2_wr(I2C_1, AUTOEND, SETBIT, WRITE);    // for auto stop in read mode only
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	2119      	movs	r1, #25
 8001eca:	2000      	movs	r0, #0
 8001ecc:	f002 f956 	bl	800417c <I2C_CR2_wr>
    I2C_CR2_wr(I2C_1, START, SETBIT, WRITE);      // start condition rm pg1327
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	210d      	movs	r1, #13
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	f002 f950 	bl	800417c <I2C_CR2_wr>

    if (!check_i2c_cr2(START, !SETBIT))
 8001edc:	2100      	movs	r1, #0
 8001ede:	200d      	movs	r0, #13
 8001ee0:	f000 f826 	bl	8001f30 <check_i2c_cr2>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d103      	bne.n	8001ef2 <i2c1_start_ret+0x74>
    { // check if START is reset, that is address is sent
        i2c1_stop_ret();
 8001eea:	f000 f807 	bl	8001efc <i2c1_stop_ret>
        return 0;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	e000      	b.n	8001ef4 <i2c1_start_ret+0x76>
    }

    return 1;
 8001ef2:	2301      	movs	r3, #1
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <i2c1_stop_ret>:

uint8_t i2c1_stop_ret()
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
    I2C_CR2_wr(I2C_1, STOP, SETBIT, WRITE); // stop condition rm pg1327
 8001f00:	2301      	movs	r3, #1
 8001f02:	2201      	movs	r2, #1
 8001f04:	210e      	movs	r1, #14
 8001f06:	2000      	movs	r0, #0
 8001f08:	f002 f938 	bl	800417c <I2C_CR2_wr>

    if (!check_i2c_cr2(STOP, !SETBIT))
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	200e      	movs	r0, #14
 8001f10:	f000 f80e 	bl	8001f30 <check_i2c_cr2>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <i2c1_stop_ret+0x22>
    { // check if STOP flag is Reset
        return 0;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	e003      	b.n	8001f26 <i2c1_stop_ret+0x2a>
    }

    I2C1->CR2 = 0; // clear CR2 reg
 8001f1e:	4b03      	ldr	r3, [pc, #12]	; (8001f2c <i2c1_stop_ret+0x30>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	605a      	str	r2, [r3, #4]

    return 1;
 8001f24:	2301      	movs	r3, #1
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40005400 	.word	0x40005400

08001f30 <check_i2c_cr2>:

uint8_t check_i2c_cr2(uint8_t flag, uint8_t state)
{ // Use for single bit blocks of cr2 only
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	460a      	mov	r2, r1
 8001f3a:	71fb      	strb	r3, [r7, #7]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	71bb      	strb	r3, [r7, #6]
    uint16_t time_out = 0;
 8001f40:	2300      	movs	r3, #0
 8001f42:	81fb      	strh	r3, [r7, #14]
    uint32_t reg_val = 1;
 8001f44:	2301      	movs	r3, #1
 8001f46:	60bb      	str	r3, [r7, #8]

    while (reg_val)
 8001f48:	e027      	b.n	8001f9a <check_i2c_cr2+0x6a>
    {
        reg_val = state ? !I2C_CR2_wr(I2C_1, flag, READ, READ) : I2C_CR2_wr(I2C_1, flag, READ, READ);
 8001f4a:	79bb      	ldrb	r3, [r7, #6]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d00c      	beq.n	8001f6a <check_i2c_cr2+0x3a>
 8001f50:	79f9      	ldrb	r1, [r7, #7]
 8001f52:	2300      	movs	r3, #0
 8001f54:	2200      	movs	r2, #0
 8001f56:	2000      	movs	r0, #0
 8001f58:	f002 f910 	bl	800417c <I2C_CR2_wr>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	bf0c      	ite	eq
 8001f62:	2301      	moveq	r3, #1
 8001f64:	2300      	movne	r3, #0
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	e006      	b.n	8001f78 <check_i2c_cr2+0x48>
 8001f6a:	79f9      	ldrb	r1, [r7, #7]
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2000      	movs	r0, #0
 8001f72:	f002 f903 	bl	800417c <I2C_CR2_wr>
 8001f76:	4603      	mov	r3, r0
 8001f78:	60bb      	str	r3, [r7, #8]

        time_out++;
 8001f7a:	89fb      	ldrh	r3, [r7, #14]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	81fb      	strh	r3, [r7, #14]
        if (time_out >= TIMEOUT)
 8001f80:	89fb      	ldrh	r3, [r7, #14]
 8001f82:	2b63      	cmp	r3, #99	; 0x63
 8001f84:	d909      	bls.n	8001f9a <check_i2c_cr2+0x6a>
        {
            // char msg[500];
            // sprintf(msg, "************************Time out check_i2c_cr2 Flag: %d \n", flag);
            // usart2_tx(msg);

            if (flag == STOP)
 8001f86:	79fb      	ldrb	r3, [r7, #7]
 8001f88:	2b0e      	cmp	r3, #14
 8001f8a:	d104      	bne.n	8001f96 <check_i2c_cr2+0x66>
            {
                i2c1_reset();
 8001f8c:	f7ff ff42 	bl	8001e14 <i2c1_reset>
                /// clear CR2 reg
                I2C1->CR2 = 0;
 8001f90:	4b06      	ldr	r3, [pc, #24]	; (8001fac <check_i2c_cr2+0x7c>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	605a      	str	r2, [r3, #4]
            }

            // sprintf(msg, "************************Time out check_i2c_cr2 Flag: %d \n", flag);
            // usart2_tx(msg);

            return 0;
 8001f96:	2300      	movs	r3, #0
 8001f98:	e003      	b.n	8001fa2 <check_i2c_cr2+0x72>
    while (reg_val)
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1d4      	bne.n	8001f4a <check_i2c_cr2+0x1a>
        }
    }
    return 1;
 8001fa0:	2301      	movs	r3, #1
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40005400 	.word	0x40005400

08001fb0 <check_i2c_isr>:

uint8_t check_i2c_isr(uint8_t flag, uint8_t state)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	460a      	mov	r2, r1
 8001fba:	71fb      	strb	r3, [r7, #7]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	71bb      	strb	r3, [r7, #6]
    uint16_t time_out = 0;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	81fb      	strh	r3, [r7, #14]
    uint32_t reg_val = 1;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	60bb      	str	r3, [r7, #8]

    while (reg_val)
 8001fc8:	e02d      	b.n	8002026 <check_i2c_isr+0x76>
    {
        reg_val = state ? !I2C_ISR_r(I2C_1, flag) : I2C_ISR_r(I2C_1, flag);
 8001fca:	79bb      	ldrb	r3, [r7, #6]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d00b      	beq.n	8001fe8 <check_i2c_isr+0x38>
 8001fd0:	79fb      	ldrb	r3, [r7, #7]
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	f002 f8b7 	bl	8004148 <I2C_ISR_r>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	bf0c      	ite	eq
 8001fe0:	2301      	moveq	r3, #1
 8001fe2:	2300      	movne	r3, #0
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	e005      	b.n	8001ff4 <check_i2c_isr+0x44>
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
 8001fea:	4619      	mov	r1, r3
 8001fec:	2000      	movs	r0, #0
 8001fee:	f002 f8ab 	bl	8004148 <I2C_ISR_r>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	60bb      	str	r3, [r7, #8]

        time_out++;
 8001ff6:	89fb      	ldrh	r3, [r7, #14]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	81fb      	strh	r3, [r7, #14]
        if (time_out >= TIMEOUT)
 8001ffc:	89fb      	ldrh	r3, [r7, #14]
 8001ffe:	2b63      	cmp	r3, #99	; 0x63
 8002000:	d911      	bls.n	8002026 <check_i2c_isr+0x76>
        {
            if (flag == TXIS)
 8002002:	79fb      	ldrb	r3, [r7, #7]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d10a      	bne.n	800201e <check_i2c_isr+0x6e>
            {
                if (I2C_ISR_r(I2C_1, NACKF))
 8002008:	2104      	movs	r1, #4
 800200a:	2000      	movs	r0, #0
 800200c:	f002 f89c 	bl	8004148 <I2C_ISR_r>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <check_i2c_isr+0x6e>
                {
                    // usart2_tx("************************Time out check_i2c_isr Flag: NACKF \n");
                    i2c1_stop_ret();
 8002016:	f7ff ff71 	bl	8001efc <i2c1_stop_ret>
                    // usart2_tx("************************END Time out check_i2c_isr Flag: NACKF \n");
                    return 0;
 800201a:	2300      	movs	r3, #0
 800201c:	e007      	b.n	800202e <check_i2c_isr+0x7e>

            // char msg[500];
            // sprintf(msg, "************************Time out check_i2c_isr Flag: %d\n", flag);
            // usart2_tx(msg);

            i2c1_stop_ret();
 800201e:	f7ff ff6d 	bl	8001efc <i2c1_stop_ret>

            // sprintf(msg, "************************END Time out check_i2c_isr Flag: %d\n", flag);
            // usart2_tx(msg);

            return 0;
 8002022:	2300      	movs	r3, #0
 8002024:	e003      	b.n	800202e <check_i2c_isr+0x7e>
    while (reg_val)
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1ce      	bne.n	8001fca <check_i2c_isr+0x1a>
        }
    }

    return 1;
 800202c:	2301      	movs	r3, #1
}
 800202e:	4618      	mov	r0, r3
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
	...

08002038 <send_data>:

uint8_t send_data(uint8_t saddr, uint8_t maddr, uint8_t data_len, uint8_t *buffer)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	603b      	str	r3, [r7, #0]
 8002040:	4603      	mov	r3, r0
 8002042:	71fb      	strb	r3, [r7, #7]
 8002044:	460b      	mov	r3, r1
 8002046:	71bb      	strb	r3, [r7, #6]
 8002048:	4613      	mov	r3, r2
 800204a:	717b      	strb	r3, [r7, #5]
    // 2.
    //*************************** Transmit/send data to slave device
    if (!i2c1_start_ret(saddr, w_mode, 1 + data_len)) // call i2c start in write mode
 800204c:	797b      	ldrb	r3, [r7, #5]
 800204e:	3301      	adds	r3, #1
 8002050:	b2da      	uxtb	r2, r3
 8002052:	79fb      	ldrb	r3, [r7, #7]
 8002054:	2100      	movs	r1, #0
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff ff11 	bl	8001e7e <i2c1_start_ret>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <send_data+0x2e>
    {
        return 0;
 8002062:	2300      	movs	r3, #0
 8002064:	e03a      	b.n	80020dc <send_data+0xa4>
    }
    else
    { // start bit transmit was successfull, now write the reg address
        if (!check_i2c_isr((uint8_t)TXIS, SETBIT))
 8002066:	2101      	movs	r1, #1
 8002068:	2001      	movs	r0, #1
 800206a:	f7ff ffa1 	bl	8001fb0 <check_i2c_isr>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <send_data+0x40>
        { // check if TXIS is set
            return 0;
 8002074:	2300      	movs	r3, #0
 8002076:	e031      	b.n	80020dc <send_data+0xa4>
        }

        I2C_TXDR_w(I2C_1, maddr); // transmit register address
 8002078:	79bb      	ldrb	r3, [r7, #6]
 800207a:	4619      	mov	r1, r3
 800207c:	2000      	movs	r0, #0
 800207e:	f002 f91d 	bl	80042bc <I2C_TXDR_w>
    }

    uint8_t i = 0;
 8002082:	2300      	movs	r3, #0
 8002084:	73fb      	strb	r3, [r7, #15]
    for (i = 0; i < data_len; i++)
 8002086:	2300      	movs	r3, #0
 8002088:	73fb      	strb	r3, [r7, #15]
 800208a:	e013      	b.n	80020b4 <send_data+0x7c>
    { // do only if nRegs is > 0
        if (!check_i2c_isr((uint8_t)TXIS, SETBIT))
 800208c:	2101      	movs	r1, #1
 800208e:	2001      	movs	r0, #1
 8002090:	f7ff ff8e 	bl	8001fb0 <check_i2c_isr>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <send_data+0x66>
        { // check if TXIS is set
            return 0;
 800209a:	2300      	movs	r3, #0
 800209c:	e01e      	b.n	80020dc <send_data+0xa4>
        }

        I2C_TXDR_w(I2C_1, buffer[i]); // transmit register data
 800209e:	7bfb      	ldrb	r3, [r7, #15]
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	4413      	add	r3, r2
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	4619      	mov	r1, r3
 80020a8:	2000      	movs	r0, #0
 80020aa:	f002 f907 	bl	80042bc <I2C_TXDR_w>
    for (i = 0; i < data_len; i++)
 80020ae:	7bfb      	ldrb	r3, [r7, #15]
 80020b0:	3301      	adds	r3, #1
 80020b2:	73fb      	strb	r3, [r7, #15]
 80020b4:	7bfa      	ldrb	r2, [r7, #15]
 80020b6:	797b      	ldrb	r3, [r7, #5]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d3e7      	bcc.n	800208c <send_data+0x54>
    }

    if (!check_i2c_isr((uint8_t)STOPF, SETBIT))
 80020bc:	2101      	movs	r1, #1
 80020be:	2005      	movs	r0, #5
 80020c0:	f7ff ff76 	bl	8001fb0 <check_i2c_isr>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <send_data+0x96>
    { // check if STOPF is set
        return 0;
 80020ca:	2300      	movs	r3, #0
 80020cc:	e006      	b.n	80020dc <send_data+0xa4>
    }
    I2C1->ICR |= (1 << 5); // clear stop flag
 80020ce:	4b05      	ldr	r3, [pc, #20]	; (80020e4 <send_data+0xac>)
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	4a04      	ldr	r2, [pc, #16]	; (80020e4 <send_data+0xac>)
 80020d4:	f043 0320 	orr.w	r3, r3, #32
 80020d8:	61d3      	str	r3, [r2, #28]
    //*************************** END Transmit/send data to slave device

    return 1;
 80020da:	2301      	movs	r3, #1
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3710      	adds	r7, #16
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40005400 	.word	0x40005400

080020e8 <read_data>:

uint8_t read_data(uint8_t saddr, uint8_t maddr, uint8_t data_len, uint8_t *buffer)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	603b      	str	r3, [r7, #0]
 80020f0:	4603      	mov	r3, r0
 80020f2:	71fb      	strb	r3, [r7, #7]
 80020f4:	460b      	mov	r3, r1
 80020f6:	71bb      	strb	r3, [r7, #6]
 80020f8:	4613      	mov	r3, r2
 80020fa:	717b      	strb	r3, [r7, #5]
    //********************* Read from slave
    if (!i2c1_start_ret(saddr, r_mode, data_len)) // call i2c start in read mode
 80020fc:	797a      	ldrb	r2, [r7, #5]
 80020fe:	79fb      	ldrb	r3, [r7, #7]
 8002100:	2101      	movs	r1, #1
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff febb 	bl	8001e7e <i2c1_start_ret>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <read_data+0x2a>
    {
        return 0;
 800210e:	2300      	movs	r3, #0
 8002110:	e02d      	b.n	800216e <read_data+0x86>
    }

    uint8_t i = 0;
 8002112:	2300      	movs	r3, #0
 8002114:	73fb      	strb	r3, [r7, #15]
    for (i = 0; i < data_len; i++)
 8002116:	2300      	movs	r3, #0
 8002118:	73fb      	strb	r3, [r7, #15]
 800211a:	e014      	b.n	8002146 <read_data+0x5e>
    {
        if (!check_i2c_isr((uint8_t)RXNE_I, SETBIT))
 800211c:	2101      	movs	r1, #1
 800211e:	2002      	movs	r0, #2
 8002120:	f7ff ff46 	bl	8001fb0 <check_i2c_isr>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <read_data+0x46>
        { // check if RXNE_I is set
            return 0;
 800212a:	2300      	movs	r3, #0
 800212c:	e01f      	b.n	800216e <read_data+0x86>
        }
        buffer[i] = (uint8_t)I2C_RXDR_r(I2C_1); // rx byte data
 800212e:	2000      	movs	r0, #0
 8002130:	f002 f8da 	bl	80042e8 <I2C_RXDR_r>
 8002134:	4601      	mov	r1, r0
 8002136:	7bfb      	ldrb	r3, [r7, #15]
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	4413      	add	r3, r2
 800213c:	b2ca      	uxtb	r2, r1
 800213e:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_len; i++)
 8002140:	7bfb      	ldrb	r3, [r7, #15]
 8002142:	3301      	adds	r3, #1
 8002144:	73fb      	strb	r3, [r7, #15]
 8002146:	7bfa      	ldrb	r2, [r7, #15]
 8002148:	797b      	ldrb	r3, [r7, #5]
 800214a:	429a      	cmp	r2, r3
 800214c:	d3e6      	bcc.n	800211c <read_data+0x34>
    }

    if (!check_i2c_isr((uint8_t)STOPF, SETBIT))
 800214e:	2101      	movs	r1, #1
 8002150:	2005      	movs	r0, #5
 8002152:	f7ff ff2d 	bl	8001fb0 <check_i2c_isr>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d101      	bne.n	8002160 <read_data+0x78>
    { // check if STOPF is set
        return 0;
 800215c:	2300      	movs	r3, #0
 800215e:	e006      	b.n	800216e <read_data+0x86>
    }
    I2C1->ICR |= (1 << 5); // clear stop flag
 8002160:	4b05      	ldr	r3, [pc, #20]	; (8002178 <read_data+0x90>)
 8002162:	69db      	ldr	r3, [r3, #28]
 8002164:	4a04      	ldr	r2, [pc, #16]	; (8002178 <read_data+0x90>)
 8002166:	f043 0320 	orr.w	r3, r3, #32
 800216a:	61d3      	str	r3, [r2, #28]
    //********************* END Read from slave

    return 1;
 800216c:	2301      	movs	r3, #1
}
 800216e:	4618      	mov	r0, r3
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40005400 	.word	0x40005400

0800217c <i2c1_read>:
uint8_t i2c1_read(uint8_t saddr, uint8_t maddr, uint8_t data_len, uint8_t *buffer)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	603b      	str	r3, [r7, #0]
 8002184:	4603      	mov	r3, r0
 8002186:	71fb      	strb	r3, [r7, #7]
 8002188:	460b      	mov	r3, r1
 800218a:	71bb      	strb	r3, [r7, #6]
 800218c:	4613      	mov	r3, r2
 800218e:	717b      	strb	r3, [r7, #5]
    // 1.
    //********************** check if i2c is busy
    if (!check_i2c_isr(BUSY_I, !SETBIT))
 8002190:	2100      	movs	r1, #0
 8002192:	200f      	movs	r0, #15
 8002194:	f7ff ff0c 	bl	8001fb0 <check_i2c_isr>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <i2c1_read+0x26>
    { // check for reset
        return 0;
 800219e:	2300      	movs	r3, #0
 80021a0:	e019      	b.n	80021d6 <i2c1_read+0x5a>
    }
    //********************** END check if i2c is busy

    // 2.
    //*************************** Transmit/send data to slave device
    if (!send_data(saddr, maddr, 0, NULL))
 80021a2:	79b9      	ldrb	r1, [r7, #6]
 80021a4:	79f8      	ldrb	r0, [r7, #7]
 80021a6:	2300      	movs	r3, #0
 80021a8:	2200      	movs	r2, #0
 80021aa:	f7ff ff45 	bl	8002038 <send_data>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d101      	bne.n	80021b8 <i2c1_read+0x3c>
    {
        return 0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	e00e      	b.n	80021d6 <i2c1_read+0x5a>
    }
    //*************************** END Transmit/send data to slave device

    // 3.
    //********************* Read from slave
    if (!read_data(saddr, maddr, data_len, buffer))
 80021b8:	797a      	ldrb	r2, [r7, #5]
 80021ba:	79b9      	ldrb	r1, [r7, #6]
 80021bc:	79f8      	ldrb	r0, [r7, #7]
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	f7ff ff92 	bl	80020e8 <read_data>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <i2c1_read+0x52>
    {
        return 0;
 80021ca:	2300      	movs	r3, #0
 80021cc:	e003      	b.n	80021d6 <i2c1_read+0x5a>
    }
    //********************* END Read from slave

    // 4.
    I2C1->CR2 = 0; // clear CR2 reg
 80021ce:	4b04      	ldr	r3, [pc, #16]	; (80021e0 <i2c1_read+0x64>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	605a      	str	r2, [r3, #4]

    return 1;
 80021d4:	2301      	movs	r3, #1
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40005400 	.word	0x40005400

080021e4 <process_ibus>:
uint8_t ibus[radio_buffer] = {0};
uint16_t channels[channel_on]; // 10
static uint16_t calc_checksum(const uint8_t ch_data[]);
const uint16_t header = 32;
void process_ibus(void)
{
 80021e4:	b5b0      	push	{r4, r5, r7, lr}
 80021e6:	b092      	sub	sp, #72	; 0x48
 80021e8:	af00      	add	r7, sp, #0
    uint8_t empty_buffer[radio_buffer] = {0};
 80021ea:	2300      	movs	r3, #0
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24
 80021ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	605a      	str	r2, [r3, #4]
 80021f8:	609a      	str	r2, [r3, #8]
 80021fa:	60da      	str	r2, [r3, #12]
 80021fc:	611a      	str	r2, [r3, #16]
 80021fe:	615a      	str	r2, [r3, #20]
 8002200:	619a      	str	r2, [r3, #24]
    // 32 Max iBus packet size (2 byte header, 14 channels x 2 bytes, 2 byte checksum)
    //  TX only has 10 channels
    uint8_t ch_data[radio_buffer] = {0};
 8002202:	2300      	movs	r3, #0
 8002204:	607b      	str	r3, [r7, #4]
 8002206:	f107 0308 	add.w	r3, r7, #8
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	605a      	str	r2, [r3, #4]
 8002210:	609a      	str	r2, [r3, #8]
 8002212:	60da      	str	r2, [r3, #12]
 8002214:	611a      	str	r2, [r3, #16]
 8002216:	615a      	str	r2, [r3, #20]
 8002218:	619a      	str	r2, [r3, #24]

    if ((ibus[0] == header) && (ibus[1] == header * 2)) // check the header
 800221a:	4b34      	ldr	r3, [pc, #208]	; (80022ec <process_ibus+0x108>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	b29b      	uxth	r3, r3
 8002220:	2220      	movs	r2, #32
 8002222:	4293      	cmp	r3, r2
 8002224:	d15e      	bne.n	80022e4 <process_ibus+0x100>
 8002226:	4b31      	ldr	r3, [pc, #196]	; (80022ec <process_ibus+0x108>)
 8002228:	785b      	ldrb	r3, [r3, #1]
 800222a:	461a      	mov	r2, r3
 800222c:	2320      	movs	r3, #32
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	429a      	cmp	r2, r3
 8002232:	d157      	bne.n	80022e4 <process_ibus+0x100>
    {
        memcpy(ch_data, ibus, sizeof(ch_data));
 8002234:	4b2d      	ldr	r3, [pc, #180]	; (80022ec <process_ibus+0x108>)
 8002236:	1d3c      	adds	r4, r7, #4
 8002238:	461d      	mov	r5, r3
 800223a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800223c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800223e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002242:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (calc_checksum(ch_data) == (ch_data[30] | (ch_data[31] << 8)))
 8002246:	1d3b      	adds	r3, r7, #4
 8002248:	4618      	mov	r0, r3
 800224a:	f000 f853 	bl	80022f4 <calc_checksum>
 800224e:	4603      	mov	r3, r0
 8002250:	461a      	mov	r2, r3
 8002252:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002256:	4619      	mov	r1, r3
 8002258:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800225c:	021b      	lsls	r3, r3, #8
 800225e:	430b      	orrs	r3, r1
 8002260:	429a      	cmp	r2, r3
 8002262:	d12c      	bne.n	80022be <process_ibus+0xda>
        {
            // process iBus buffer into channels
            for (uint8_t i = 2, ch = 0; ch < channel_on; i = i + 2, ch++)
 8002264:	2302      	movs	r3, #2
 8002266:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800226a:	2300      	movs	r3, #0
 800226c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002270:	e021      	b.n	80022b6 <process_ibus+0xd2>
            {
                channels[ch] = ch_data[i] | (ch_data[i + 1] << 8);
 8002272:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002276:	3348      	adds	r3, #72	; 0x48
 8002278:	443b      	add	r3, r7
 800227a:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 800227e:	b21a      	sxth	r2, r3
 8002280:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002284:	3301      	adds	r3, #1
 8002286:	3348      	adds	r3, #72	; 0x48
 8002288:	443b      	add	r3, r7
 800228a:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 800228e:	021b      	lsls	r3, r3, #8
 8002290:	b21b      	sxth	r3, r3
 8002292:	4313      	orrs	r3, r2
 8002294:	b21a      	sxth	r2, r3
 8002296:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800229a:	b291      	uxth	r1, r2
 800229c:	4a14      	ldr	r2, [pc, #80]	; (80022f0 <process_ibus+0x10c>)
 800229e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (uint8_t i = 2, ch = 0; ch < channel_on; i = i + 2, ch++)
 80022a2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80022a6:	3302      	adds	r3, #2
 80022a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80022ac:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80022b0:	3301      	adds	r3, #1
 80022b2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80022b6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80022ba:	2b09      	cmp	r3, #9
 80022bc:	d9d9      	bls.n	8002272 <process_ibus+0x8e>
            }

        }
        // reset buffer values
        memcpy(ibus, empty_buffer, sizeof(ibus));
 80022be:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <process_ibus+0x108>)
 80022c0:	461d      	mov	r5, r3
 80022c2:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80022c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022ca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80022ce:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
        memcpy(ch_data, empty_buffer, sizeof(ch_data));
 80022d2:	1d3c      	adds	r4, r7, #4
 80022d4:	f107 0524 	add.w	r5, r7, #36	; 0x24
 80022d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022dc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80022e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }
}
 80022e4:	bf00      	nop
 80022e6:	3748      	adds	r7, #72	; 0x48
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bdb0      	pop	{r4, r5, r7, pc}
 80022ec:	200004ec 	.word	0x200004ec
 80022f0:	2000050c 	.word	0x2000050c

080022f4 <calc_checksum>:
static uint16_t calc_checksum(const uint8_t ch_data[])
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
    uint16_t checksum = 65535;
 80022fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002300:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i <= 29; i++)
 8002302:	2300      	movs	r3, #0
 8002304:	737b      	strb	r3, [r7, #13]
 8002306:	e00a      	b.n	800231e <calc_checksum+0x2a>
    {
        checksum -= ch_data[i];
 8002308:	7b7b      	ldrb	r3, [r7, #13]
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	4413      	add	r3, r2
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	b29b      	uxth	r3, r3
 8002312:	89fa      	ldrh	r2, [r7, #14]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i <= 29; i++)
 8002318:	7b7b      	ldrb	r3, [r7, #13]
 800231a:	3301      	adds	r3, #1
 800231c:	737b      	strb	r3, [r7, #13]
 800231e:	7b7b      	ldrb	r3, [r7, #13]
 8002320:	2b1d      	cmp	r3, #29
 8002322:	d9f1      	bls.n	8002308 <calc_checksum+0x14>
    }
    return checksum;
 8002324:	89fb      	ldrh	r3, [r7, #14]
}
 8002326:	4618      	mov	r0, r3
 8002328:	3714      	adds	r7, #20
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <update_channels>:
uint8_t update_channels(void)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	af00      	add	r7, sp, #0
    if (DMA_ISR_r(TCIF5))
 8002336:	2011      	movs	r0, #17
 8002338:	f001 fd54 	bl	8003de4 <DMA_ISR_r>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d005      	beq.n	800234e <update_channels+0x1c>
    {
        // process inbus buffer into channels
        process_ibus();
 8002342:	f7ff ff4f 	bl	80021e4 <process_ibus>
        // restart dma
        usart1_radio_dma_restart();
 8002346:	f000 fd29 	bl	8002d9c <usart1_radio_dma_restart>
        return 1;
 800234a:	2301      	movs	r3, #1
 800234c:	e000      	b.n	8002350 <update_channels+0x1e>
    }
    return 0;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	bd80      	pop	{r7, pc}

08002354 <status_monitor_init>:

void status_led();
void status_monitor(void *pvParameters);

void status_monitor_init()
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
	GPIO_MODER_w(PORTA, MODE5, OUTPUT);
 8002358:	2201      	movs	r2, #1
 800235a:	2105      	movs	r1, #5
 800235c:	2000      	movs	r0, #0
 800235e:	f002 f937 	bl	80045d0 <GPIO_MODER_w>
}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
	...

08002368 <status_monitor_lunch>:
void status_monitor_lunch()
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af02      	add	r7, sp, #8
	if (lunch_once)
 800236e:	4b0c      	ldr	r3, [pc, #48]	; (80023a0 <status_monitor_lunch+0x38>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d010      	beq.n	8002398 <status_monitor_lunch+0x30>
	{
		Status_indicator_return_Handle = xTaskCreate(status_monitor, "Status indicator Activity Task",
 8002376:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <status_monitor_lunch+0x3c>)
 8002378:	9301      	str	r3, [sp, #4]
 800237a:	2301      	movs	r3, #1
 800237c:	9300      	str	r3, [sp, #0]
 800237e:	2300      	movs	r3, #0
 8002380:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002384:	4908      	ldr	r1, [pc, #32]	; (80023a8 <status_monitor_lunch+0x40>)
 8002386:	4809      	ldr	r0, [pc, #36]	; (80023ac <status_monitor_lunch+0x44>)
 8002388:	f004 fb28 	bl	80069dc <xTaskCreate>
 800238c:	4603      	mov	r3, r0
 800238e:	4a08      	ldr	r2, [pc, #32]	; (80023b0 <status_monitor_lunch+0x48>)
 8002390:	6013      	str	r3, [r2, #0]
													 128 * 4,
													 NULL, MONITOR_PRIORITY, &Status_indicator_Handle);
		lunch_once = false;
 8002392:	4b03      	ldr	r3, [pc, #12]	; (80023a0 <status_monitor_lunch+0x38>)
 8002394:	2200      	movs	r2, #0
 8002396:	701a      	strb	r2, [r3, #0]
	}
}
 8002398:	bf00      	nop
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	20000038 	.word	0x20000038
 80023a4:	20000520 	.word	0x20000520
 80023a8:	0800bc50 	.word	0x0800bc50
 80023ac:	08002419 	.word	0x08002419
 80023b0:	20000524 	.word	0x20000524

080023b4 <status_led>:
void status_led()
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
	GPIO_BSRR_w(PORTA, BS5, SETBIT);						   // LED ON
 80023b8:	2201      	movs	r2, #1
 80023ba:	2105      	movs	r1, #5
 80023bc:	2000      	movs	r0, #0
 80023be:	f002 f8df 	bl	8004580 <GPIO_BSRR_w>
	vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(tick_time)); // 100 tick -> 100 ms -> 10Hz
 80023c2:	4b12      	ldr	r3, [pc, #72]	; (800240c <status_led+0x58>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	461a      	mov	r2, r3
 80023c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023cc:	fb02 f303 	mul.w	r3, r2, r3
 80023d0:	4a0f      	ldr	r2, [pc, #60]	; (8002410 <status_led+0x5c>)
 80023d2:	fba2 2303 	umull	r2, r3, r2, r3
 80023d6:	099b      	lsrs	r3, r3, #6
 80023d8:	4619      	mov	r1, r3
 80023da:	480e      	ldr	r0, [pc, #56]	; (8002414 <status_led+0x60>)
 80023dc:	f004 fc52 	bl	8006c84 <vTaskDelayUntil>
	GPIO_BSRR_w(PORTA, BR5, SETBIT);						   // LED OFF
 80023e0:	2201      	movs	r2, #1
 80023e2:	2115      	movs	r1, #21
 80023e4:	2000      	movs	r0, #0
 80023e6:	f002 f8cb 	bl	8004580 <GPIO_BSRR_w>
	vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(tick_time));
 80023ea:	4b08      	ldr	r3, [pc, #32]	; (800240c <status_led+0x58>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	461a      	mov	r2, r3
 80023f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023f4:	fb02 f303 	mul.w	r3, r2, r3
 80023f8:	4a05      	ldr	r2, [pc, #20]	; (8002410 <status_led+0x5c>)
 80023fa:	fba2 2303 	umull	r2, r3, r2, r3
 80023fe:	099b      	lsrs	r3, r3, #6
 8002400:	4619      	mov	r1, r3
 8002402:	4804      	ldr	r0, [pc, #16]	; (8002414 <status_led+0x60>)
 8002404:	f004 fc3e 	bl	8006c84 <vTaskDelayUntil>
}
 8002408:	bf00      	nop
 800240a:	bd80      	pop	{r7, pc}
 800240c:	20000034 	.word	0x20000034
 8002410:	10624dd3 	.word	0x10624dd3
 8002414:	20000528 	.word	0x20000528

08002418 <status_monitor>:
void status_monitor(void *pvParameters)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
	// Initialize the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 8002420:	f004 feda 	bl	80071d8 <xTaskGetTickCount>
 8002424:	4603      	mov	r3, r0
 8002426:	4a02      	ldr	r2, [pc, #8]	; (8002430 <status_monitor+0x18>)
 8002428:	6013      	str	r3, [r2, #0]
	while (1)
	{
		status_led();
 800242a:	f7ff ffc3 	bl	80023b4 <status_led>
 800242e:	e7fc      	b.n	800242a <status_monitor+0x12>
 8002430:	20000528 	.word	0x20000528

08002434 <monitor_status>:
	}
}

void monitor_status(enum control_states ctrl_state)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	4603      	mov	r3, r0
 800243c:	71fb      	strb	r3, [r7, #7]
	if ((ctrl_state == controller_enabled))
 800243e:	79fb      	ldrb	r3, [r7, #7]
 8002440:	2b02      	cmp	r3, #2
 8002442:	d111      	bne.n	8002468 <monitor_status+0x34>
	{
		if (is_status_task_resumed == true)
 8002444:	4b12      	ldr	r3, [pc, #72]	; (8002490 <monitor_status+0x5c>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d01c      	beq.n	8002486 <monitor_status+0x52>
		{
			is_status_task_resumed = false;
 800244c:	4b10      	ldr	r3, [pc, #64]	; (8002490 <monitor_status+0x5c>)
 800244e:	2200      	movs	r2, #0
 8002450:	701a      	strb	r2, [r3, #0]
			vTaskSuspend(Status_indicator_Handle);
 8002452:	4b10      	ldr	r3, [pc, #64]	; (8002494 <monitor_status+0x60>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f004 fc92 	bl	8006d80 <vTaskSuspend>
			GPIO_BSRR_w(PORTA, BS5, SETBIT); // LED ON
 800245c:	2201      	movs	r2, #1
 800245e:	2105      	movs	r1, #5
 8002460:	2000      	movs	r0, #0
 8002462:	f002 f88d 	bl	8004580 <GPIO_BSRR_w>
		{
			is_status_task_resumed = true;
			vTaskResume(Status_indicator_Handle);
		}
	}
 8002466:	e00e      	b.n	8002486 <monitor_status+0x52>
		if (is_status_task_resumed == false)
 8002468:	4b09      	ldr	r3, [pc, #36]	; (8002490 <monitor_status+0x5c>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	f083 0301 	eor.w	r3, r3, #1
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d007      	beq.n	8002486 <monitor_status+0x52>
			is_status_task_resumed = true;
 8002476:	4b06      	ldr	r3, [pc, #24]	; (8002490 <monitor_status+0x5c>)
 8002478:	2201      	movs	r2, #1
 800247a:	701a      	strb	r2, [r3, #0]
			vTaskResume(Status_indicator_Handle);
 800247c:	4b05      	ldr	r3, [pc, #20]	; (8002494 <monitor_status+0x60>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4618      	mov	r0, r3
 8002482:	f004 fd2f 	bl	8006ee4 <vTaskResume>
 8002486:	bf00      	nop
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	2000052c 	.word	0x2000052c
 8002494:	20000520 	.word	0x20000520

08002498 <timer_init>:

void restart_timer_dma();
void right_motor_cw();

void timer_init()
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
    //  PA0 and PA1 for timer/pwm/motor
    // PA0 TIM2 CH1, PWMA LEFT
    // PA1 TIM2 CH2, PWMB RIGHT

    GPIO_MODER_w(PORTA, MODE0, ALT);
 800249c:	2202      	movs	r2, #2
 800249e:	2100      	movs	r1, #0
 80024a0:	2000      	movs	r0, #0
 80024a2:	f002 f895 	bl	80045d0 <GPIO_MODER_w>
    GPIO_AFR_w(PORTA, AFSEL0_8, AF1_TIMER, false);
 80024a6:	2300      	movs	r3, #0
 80024a8:	2201      	movs	r2, #1
 80024aa:	2100      	movs	r1, #0
 80024ac:	2000      	movs	r0, #0
 80024ae:	f002 f827 	bl	8004500 <GPIO_AFR_w>

    GPIO_MODER_w(PORTA, MODE1, ALT);
 80024b2:	2202      	movs	r2, #2
 80024b4:	2101      	movs	r1, #1
 80024b6:	2000      	movs	r0, #0
 80024b8:	f002 f88a 	bl	80045d0 <GPIO_MODER_w>
    GPIO_AFR_w(PORTA, AFSEL1_9, AF1_TIMER, false);
 80024bc:	2300      	movs	r3, #0
 80024be:	2201      	movs	r2, #1
 80024c0:	2104      	movs	r1, #4
 80024c2:	2000      	movs	r0, #0
 80024c4:	f002 f81c 	bl	8004500 <GPIO_AFR_w>

    // // input timer for right motor encoder, PB4
    GPIO_MODER_w(PORTB, MODE4, ALT);
 80024c8:	2202      	movs	r2, #2
 80024ca:	2104      	movs	r1, #4
 80024cc:	2001      	movs	r0, #1
 80024ce:	f002 f87f 	bl	80045d0 <GPIO_MODER_w>
    GPIO_AFR_w(PORTB, AFSEL4_12, AF2_TIMER, false); // attach TIM3 ch1 to PB4
 80024d2:	2300      	movs	r3, #0
 80024d4:	2202      	movs	r2, #2
 80024d6:	2110      	movs	r1, #16
 80024d8:	2001      	movs	r0, #1
 80024da:	f002 f811 	bl	8004500 <GPIO_AFR_w>

    // PB0 input timer for left motor encoder
    GPIO_MODER_w(PORTB, MODE0, ALT);
 80024de:	2202      	movs	r2, #2
 80024e0:	2100      	movs	r1, #0
 80024e2:	2001      	movs	r0, #1
 80024e4:	f002 f874 	bl	80045d0 <GPIO_MODER_w>
    GPIO_AFR_w(PORTB, AFSEL0_8, AF2_TIMER, false); // attach TIM3 ch3 to PB0
 80024e8:	2300      	movs	r3, #0
 80024ea:	2202      	movs	r2, #2
 80024ec:	2100      	movs	r1, #0
 80024ee:	2001      	movs	r0, #1
 80024f0:	f002 f806 	bl	8004500 <GPIO_AFR_w>

    motor_init();
 80024f4:	f000 f804 	bl	8002500 <motor_init>
    encoder_init();
 80024f8:	f000 f84e 	bl	8002598 <encoder_init>
}
 80024fc:	bf00      	nop
 80024fe:	bd80      	pop	{r7, pc}

08002500 <motor_init>:

void motor_init(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
    // TIM2***********************************************************************
    TIM_PSC_w(TIM_2, PSC015, 36 - 1);   // set 2MHz clk
 8002504:	2223      	movs	r2, #35	; 0x23
 8002506:	2100      	movs	r1, #0
 8002508:	2001      	movs	r0, #1
 800250a:	f001 fb57 	bl	8003bbc <TIM_PSC_w>
    TIM_ARR_w(TIM_2, ARR015, 5000 - 1); // 400Hz, 2.5ms total period
 800250e:	f241 3287 	movw	r2, #4999	; 0x1387
 8002512:	2100      	movs	r1, #0
 8002514:	2001      	movs	r0, #1
 8002516:	f001 fb13 	bl	8003b40 <TIM_ARR_w>

    // Enable Pwm mode 1,preload enable
    TIM_CCMR1_w(TIM_2, OC1PE, SETBIT, OUTPUT);
 800251a:	2301      	movs	r3, #1
 800251c:	2201      	movs	r2, #1
 800251e:	2102      	movs	r1, #2
 8002520:	2001      	movs	r0, #1
 8002522:	f001 f9c1 	bl	80038a8 <TIM_CCMR1_w>
    TIM_CCMR1_w(TIM_2, OC1M, 0b110, OUTPUT);
 8002526:	2301      	movs	r3, #1
 8002528:	2206      	movs	r2, #6
 800252a:	2103      	movs	r1, #3
 800252c:	2001      	movs	r0, #1
 800252e:	f001 f9bb 	bl	80038a8 <TIM_CCMR1_w>
    TIM_CCMR1_w(TIM_2, OC2PE, SETBIT, OUTPUT);
 8002532:	2301      	movs	r3, #1
 8002534:	2201      	movs	r2, #1
 8002536:	2107      	movs	r1, #7
 8002538:	2001      	movs	r0, #1
 800253a:	f001 f9b5 	bl	80038a8 <TIM_CCMR1_w>
    TIM_CCMR1_w(TIM_2, OC2M, 0b110, OUTPUT);
 800253e:	2301      	movs	r3, #1
 8002540:	2206      	movs	r2, #6
 8002542:	2108      	movs	r1, #8
 8002544:	2001      	movs	r0, #1
 8002546:	f001 f9af 	bl	80038a8 <TIM_CCMR1_w>

    TIM_CR1_w(TIM_2, ARPE, SETBIT); // Auto-reload preload enable
 800254a:	2201      	movs	r2, #1
 800254c:	2107      	movs	r1, #7
 800254e:	2001      	movs	r0, #1
 8002550:	f001 fc22 	bl	8003d98 <TIM_CR1_w>
    TIM_EGR_w(TIM_2, UG, SETBIT);   // Re-initialize the counter and generates an update of the registers
 8002554:	2201      	movs	r2, #1
 8002556:	2100      	movs	r1, #0
 8002558:	2001      	movs	r0, #1
 800255a:	f001 fb6f 	bl	8003c3c <TIM_EGR_w>

    // enable channels
    TIM_CCER_w(TIM_2, CC1E, SETBIT);
 800255e:	2201      	movs	r2, #1
 8002560:	2100      	movs	r1, #0
 8002562:	2001      	movs	r0, #1
 8002564:	f001 fabe 	bl	8003ae4 <TIM_CCER_w>
    TIM_CCER_w(TIM_2, CC2E, SETBIT);
 8002568:	2201      	movs	r2, #1
 800256a:	2104      	movs	r1, #4
 800256c:	2001      	movs	r0, #1
 800256e:	f001 fab9 	bl	8003ae4 <TIM_CCER_w>

    TIM_CCR1_wr(TIM_2, CCR1_015, 0, WRITE); // about 0% rpm
 8002572:	2301      	movs	r3, #1
 8002574:	2200      	movs	r2, #0
 8002576:	2100      	movs	r1, #0
 8002578:	2001      	movs	r0, #1
 800257a:	f001 fbc7 	bl	8003d0c <TIM_CCR1_wr>
    TIM_CCR2_wr(TIM_2, CCR2_015, 0, WRITE); // about 0% rpm
 800257e:	2301      	movs	r3, #1
 8002580:	2200      	movs	r2, #0
 8002582:	2100      	movs	r1, #0
 8002584:	2001      	movs	r0, #1
 8002586:	f001 fb87 	bl	8003c98 <TIM_CCR2_wr>

    // TIM_CR1_w(TIM_1, CEN, SETBIT); // Counter enable
    TIM_CR1_w(TIM_2, CEN, SETBIT); // Counter enable
 800258a:	2201      	movs	r2, #1
 800258c:	2100      	movs	r1, #0
 800258e:	2001      	movs	r0, #1
 8002590:	f001 fc02 	bl	8003d98 <TIM_CR1_w>
}
 8002594:	bf00      	nop
 8002596:	bd80      	pop	{r7, pc}

08002598 <encoder_init>:

void encoder_init()
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
    // TIM_CCER_w(TIM_3, CC1E, SETBIT); // caputre enabled
    // TIM_CR1_w(TIM_3, CEN, SETBIT);   // Counter enable
    // DMA1_Channel_CCR_wr(DMA1_Ch6, EN_DMA, SETBIT, WRITE);

    //**********************************************************************
    DMA1_Channel_CCR_wr(DMA1_Ch6, EN_DMA, !SETBIT, WRITE);
 800259c:	2301      	movs	r3, #1
 800259e:	2200      	movs	r2, #0
 80025a0:	2100      	movs	r1, #0
 80025a2:	2005      	movs	r0, #5
 80025a4:	f001 fd5e 	bl	8004064 <DMA1_Channel_CCR_wr>
    DMA1_Channel_CCR_wr(DMA1_Ch2, EN_DMA, !SETBIT, WRITE);
 80025a8:	2301      	movs	r3, #1
 80025aa:	2200      	movs	r2, #0
 80025ac:	2100      	movs	r1, #0
 80025ae:	2001      	movs	r0, #1
 80025b0:	f001 fd58 	bl	8004064 <DMA1_Channel_CCR_wr>
    TIM_CR1_w(TIM_3, CEN, !SETBIT);   // Counter disable
 80025b4:	2200      	movs	r2, #0
 80025b6:	2100      	movs	r1, #0
 80025b8:	2002      	movs	r0, #2
 80025ba:	f001 fbed 	bl	8003d98 <TIM_CR1_w>
    TIM_CCER_w(TIM_3, CC1E, !SETBIT); // caputre disenabled ch1
 80025be:	2200      	movs	r2, #0
 80025c0:	2100      	movs	r1, #0
 80025c2:	2002      	movs	r0, #2
 80025c4:	f001 fa8e 	bl	8003ae4 <TIM_CCER_w>
    TIM_CCER_w(TIM_3, CC3E, !SETBIT); // caputre disenabled ch3
 80025c8:	2200      	movs	r2, #0
 80025ca:	2108      	movs	r1, #8
 80025cc:	2002      	movs	r0, #2
 80025ce:	f001 fa89 	bl	8003ae4 <TIM_CCER_w>

    /////////////////////////////////////////
    TIM_EGR_w(TIM_3, UG, SETBIT);             // Re-initialize the counter and generates an update of the registers
 80025d2:	2201      	movs	r2, #1
 80025d4:	2100      	movs	r1, #0
 80025d6:	2002      	movs	r0, #2
 80025d8:	f001 fb30 	bl	8003c3c <TIM_EGR_w>
    TIM_PSC_w(TIM_3, PSC015, PSC - 1);        // set 40khz clk
 80025dc:	f240 7207 	movw	r2, #1799	; 0x707
 80025e0:	2100      	movs	r1, #0
 80025e2:	2002      	movs	r0, #2
 80025e4:	f001 faea 	bl	8003bbc <TIM_PSC_w>
    TIM_ARR_w(TIM_3, ARR015, COUNT_FREQ - 1); // 1 sec
 80025e8:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80025ec:	2100      	movs	r1, #0
 80025ee:	2002      	movs	r0, #2
 80025f0:	f001 faa6 	bl	8003b40 <TIM_ARR_w>
    TIM_CR1_w(TIM_3, ARPE, SETBIT);           // Auto-reload preload enable
 80025f4:	2201      	movs	r2, #1
 80025f6:	2107      	movs	r1, #7
 80025f8:	2002      	movs	r0, #2
 80025fa:	f001 fbcd 	bl	8003d98 <TIM_CR1_w>

    // Input mode config
    TIM_CCMR1_w(TIM_3, CC1S, 0b01, INPUT);   // make input ch1
 80025fe:	2300      	movs	r3, #0
 8002600:	2201      	movs	r2, #1
 8002602:	2100      	movs	r1, #0
 8002604:	2002      	movs	r0, #2
 8002606:	f001 f94f 	bl	80038a8 <TIM_CCMR1_w>
    TIM3->CCMR2 |= (1 << 0);                 // make input ch3
 800260a:	4b4e      	ldr	r3, [pc, #312]	; (8002744 <encoder_init+0x1ac>)
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	4a4d      	ldr	r2, [pc, #308]	; (8002744 <encoder_init+0x1ac>)
 8002610:	f043 0301 	orr.w	r3, r3, #1
 8002614:	61d3      	str	r3, [r2, #28]
    TIM_CCMR1_w(TIM_3, IC1F, 0b0011, INPUT); // input filter ch1
 8002616:	2300      	movs	r3, #0
 8002618:	2203      	movs	r2, #3
 800261a:	2103      	movs	r1, #3
 800261c:	2002      	movs	r0, #2
 800261e:	f001 f943 	bl	80038a8 <TIM_CCMR1_w>
    TIM3->CCMR2 |= (1 << 4) | (1 << 5);      // input filter ch3
 8002622:	4b48      	ldr	r3, [pc, #288]	; (8002744 <encoder_init+0x1ac>)
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	4a47      	ldr	r2, [pc, #284]	; (8002744 <encoder_init+0x1ac>)
 8002628:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800262c:	61d3      	str	r3, [r2, #28]
    // Capture Input on rising edge(default): CC1P and CC1NP bits to 000 in the TIMx_CCER register (rising edge in this case).

    TIM3->DIER |= (1 << 9);  // 1: CC1 DMA request enabled.
 800262e:	4b45      	ldr	r3, [pc, #276]	; (8002744 <encoder_init+0x1ac>)
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	4a44      	ldr	r2, [pc, #272]	; (8002744 <encoder_init+0x1ac>)
 8002634:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002638:	60d3      	str	r3, [r2, #12]
    TIM3->DIER |= (1 << 11); // 1: CC3 DMA request enabled.
 800263a:	4b42      	ldr	r3, [pc, #264]	; (8002744 <encoder_init+0x1ac>)
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	4a41      	ldr	r2, [pc, #260]	; (8002744 <encoder_init+0x1ac>)
 8002640:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002644:	60d3      	str	r3, [r2, #12]
    TIM3->EGR |= (1 << 1);   //  DMA request is sent on capture event on cc1
 8002646:	4b3f      	ldr	r3, [pc, #252]	; (8002744 <encoder_init+0x1ac>)
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	4a3e      	ldr	r2, [pc, #248]	; (8002744 <encoder_init+0x1ac>)
 800264c:	f043 0302 	orr.w	r3, r3, #2
 8002650:	6153      	str	r3, [r2, #20]
    TIM3->EGR |= (1 << 3);   //  DMA request is sent on capture event on cc3
 8002652:	4b3c      	ldr	r3, [pc, #240]	; (8002744 <encoder_init+0x1ac>)
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	4a3b      	ldr	r2, [pc, #236]	; (8002744 <encoder_init+0x1ac>)
 8002658:	f043 0308 	orr.w	r3, r3, #8
 800265c:	6153      	str	r3, [r2, #20]
                             // CR2 reg, default 0: CCx DMA request sent when CCx event occurs

    ///////////////
    DMA1_CSELR->CSELR |= ((1 << 4) | (1 << 6)) | ((1 << 20) | (1 << 22)); // dma1 ch2 for tim3 ch3,  dma1 ch6 select for tim3 ch1
 800265e:	4b3a      	ldr	r3, [pc, #232]	; (8002748 <encoder_init+0x1b0>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a39      	ldr	r2, [pc, #228]	; (8002748 <encoder_init+0x1b0>)
 8002664:	f043 1350 	orr.w	r3, r3, #5242960	; 0x500050
 8002668:	6013      	str	r3, [r2, #0]

    ////dma timer for tim3 ch1, RIGHT ENC
    DMA1_Channel_CPAR_w(DMA1_Ch6, (uint32_t)&TIM3->CCR1, WRITE);
 800266a:	2201      	movs	r2, #1
 800266c:	4937      	ldr	r1, [pc, #220]	; (800274c <encoder_init+0x1b4>)
 800266e:	2005      	movs	r0, #5
 8002670:	f001 fc64 	bl	8003f3c <DMA1_Channel_CPAR_w>
    DMA1_Channel_CMAR_w(DMA1_Ch6, (uint32_t)enc_r, WRITE);
 8002674:	4b36      	ldr	r3, [pc, #216]	; (8002750 <encoder_init+0x1b8>)
 8002676:	2201      	movs	r2, #1
 8002678:	4619      	mov	r1, r3
 800267a:	2005      	movs	r0, #5
 800267c:	f001 fc74 	bl	8003f68 <DMA1_Channel_CMAR_w>
    DMA1_Channel_CNDTR_w(DMA1_Ch6, dma_buffer_size, WRITE); // number of data to rx
 8002680:	2201      	movs	r2, #1
 8002682:	2104      	movs	r1, #4
 8002684:	2005      	movs	r0, #5
 8002686:	f001 fc43 	bl	8003f10 <DMA1_Channel_CNDTR_w>
    DMA1_Channel_CCR_wr(DMA1_Ch6, PL + 1, SETBIT, WRITE);   // pirority high
 800268a:	2301      	movs	r3, #1
 800268c:	2201      	movs	r2, #1
 800268e:	210d      	movs	r1, #13
 8002690:	2005      	movs	r0, #5
 8002692:	f001 fce7 	bl	8004064 <DMA1_Channel_CCR_wr>
    // DIR, default 0: read from peripheral
    DMA1_Channel_CCR_wr(DMA1_Ch6, MINC_DMA, SETBIT, WRITE); // peri to peri
 8002696:	2301      	movs	r3, #1
 8002698:	2201      	movs	r2, #1
 800269a:	2107      	movs	r1, #7
 800269c:	2005      	movs	r0, #5
 800269e:	f001 fce1 	bl	8004064 <DMA1_Channel_CCR_wr>

    DMA1_Channel6->CCR |= (1 << 11); // 32 bits transfers, mem, destination
 80026a2:	4b2c      	ldr	r3, [pc, #176]	; (8002754 <encoder_init+0x1bc>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a2b      	ldr	r2, [pc, #172]	; (8002754 <encoder_init+0x1bc>)
 80026a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026ac:	6013      	str	r3, [r2, #0]
    DMA1_Channel6->CCR |= (1 << 9);  // 32 bits transfers, periph, source
 80026ae:	4b29      	ldr	r3, [pc, #164]	; (8002754 <encoder_init+0x1bc>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a28      	ldr	r2, [pc, #160]	; (8002754 <encoder_init+0x1bc>)
 80026b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026b8:	6013      	str	r3, [r2, #0]
    ////end dma timer

    ////////// LEFT ENC
    DMA1_Channel_CPAR_w(DMA1_Ch2, (uint32_t)&TIM3->CCR3, WRITE);
 80026ba:	2201      	movs	r2, #1
 80026bc:	4926      	ldr	r1, [pc, #152]	; (8002758 <encoder_init+0x1c0>)
 80026be:	2001      	movs	r0, #1
 80026c0:	f001 fc3c 	bl	8003f3c <DMA1_Channel_CPAR_w>
    DMA1_Channel_CMAR_w(DMA1_Ch2, (uint32_t)enc_l, WRITE);
 80026c4:	4b25      	ldr	r3, [pc, #148]	; (800275c <encoder_init+0x1c4>)
 80026c6:	2201      	movs	r2, #1
 80026c8:	4619      	mov	r1, r3
 80026ca:	2001      	movs	r0, #1
 80026cc:	f001 fc4c 	bl	8003f68 <DMA1_Channel_CMAR_w>
    DMA1_Channel_CNDTR_w(DMA1_Ch2, dma_buffer_size, WRITE); // number of data to rx
 80026d0:	2201      	movs	r2, #1
 80026d2:	2104      	movs	r1, #4
 80026d4:	2001      	movs	r0, #1
 80026d6:	f001 fc1b 	bl	8003f10 <DMA1_Channel_CNDTR_w>
    DMA1_Channel_CCR_wr(DMA1_Ch2, PL + 1, SETBIT, WRITE);   // pirority high
 80026da:	2301      	movs	r3, #1
 80026dc:	2201      	movs	r2, #1
 80026de:	210d      	movs	r1, #13
 80026e0:	2001      	movs	r0, #1
 80026e2:	f001 fcbf 	bl	8004064 <DMA1_Channel_CCR_wr>
    // DIR, default 0: read from peripheral
    DMA1_Channel_CCR_wr(DMA1_Ch2, MINC_DMA, SETBIT, WRITE); // peri to peri
 80026e6:	2301      	movs	r3, #1
 80026e8:	2201      	movs	r2, #1
 80026ea:	2107      	movs	r1, #7
 80026ec:	2001      	movs	r0, #1
 80026ee:	f001 fcb9 	bl	8004064 <DMA1_Channel_CCR_wr>

    DMA1_Channel2->CCR |= (1 << 11); // 32 bits transfers, mem, destination
 80026f2:	4b1b      	ldr	r3, [pc, #108]	; (8002760 <encoder_init+0x1c8>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a1a      	ldr	r2, [pc, #104]	; (8002760 <encoder_init+0x1c8>)
 80026f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026fc:	6013      	str	r3, [r2, #0]
    DMA1_Channel2->CCR |= (1 << 9);  // 32 bits transfers, periph, source
 80026fe:	4b18      	ldr	r3, [pc, #96]	; (8002760 <encoder_init+0x1c8>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a17      	ldr	r2, [pc, #92]	; (8002760 <encoder_init+0x1c8>)
 8002704:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002708:	6013      	str	r3, [r2, #0]
    ////////

    TIM_CCER_w(TIM_3, CC1E, SETBIT); // caputre enabled ch1
 800270a:	2201      	movs	r2, #1
 800270c:	2100      	movs	r1, #0
 800270e:	2002      	movs	r0, #2
 8002710:	f001 f9e8 	bl	8003ae4 <TIM_CCER_w>
    TIM_CCER_w(TIM_3, CC3E, SETBIT); // caputre enabled ch3
 8002714:	2201      	movs	r2, #1
 8002716:	2108      	movs	r1, #8
 8002718:	2002      	movs	r0, #2
 800271a:	f001 f9e3 	bl	8003ae4 <TIM_CCER_w>
    TIM_CR1_w(TIM_3, CEN, SETBIT);   // Counter enable
 800271e:	2201      	movs	r2, #1
 8002720:	2100      	movs	r1, #0
 8002722:	2002      	movs	r0, #2
 8002724:	f001 fb38 	bl	8003d98 <TIM_CR1_w>
    DMA1_Channel_CCR_wr(DMA1_Ch6, EN_DMA, SETBIT, WRITE);
 8002728:	2301      	movs	r3, #1
 800272a:	2201      	movs	r2, #1
 800272c:	2100      	movs	r1, #0
 800272e:	2005      	movs	r0, #5
 8002730:	f001 fc98 	bl	8004064 <DMA1_Channel_CCR_wr>
    DMA1_Channel_CCR_wr(DMA1_Ch2, EN_DMA, SETBIT, WRITE);
 8002734:	2301      	movs	r3, #1
 8002736:	2201      	movs	r2, #1
 8002738:	2100      	movs	r1, #0
 800273a:	2001      	movs	r0, #1
 800273c:	f001 fc92 	bl	8004064 <DMA1_Channel_CCR_wr>
}
 8002740:	bf00      	nop
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40000400 	.word	0x40000400
 8002748:	400200a8 	.word	0x400200a8
 800274c:	40000434 	.word	0x40000434
 8002750:	20000530 	.word	0x20000530
 8002754:	4002006c 	.word	0x4002006c
 8002758:	4000043c 	.word	0x4000043c
 800275c:	20000540 	.word	0x20000540
 8002760:	4002001c 	.word	0x4002001c
 8002764:	00000000 	.word	0x00000000

08002768 <enc_counts>:

enc_t enc_counts()
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
    static float enc_count_l = 0;
    static enc_t enc_data;
    static uint8_t not_moving_counter_l = 0;
    static uint8_t not_moving_counter_r = 0;

    if (DMA_ISR_r(TEIF6))
 800276e:	2017      	movs	r0, #23
 8002770:	f001 fb38 	bl	8003de4 <DMA_ISR_r>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d004      	beq.n	8002784 <enc_counts+0x1c>
    {
        DMA_IFCR_w(CTEIF6, SETBIT); // clear complete flag
 800277a:	2101      	movs	r1, #1
 800277c:	2017      	movs	r0, #23
 800277e:	f001 fba7 	bl	8003ed0 <DMA_IFCR_w>
 8002782:	e04b      	b.n	800281c <enc_counts+0xb4>
    }
    else if (DMA_ISR_r(TCIF6))
 8002784:	2015      	movs	r0, #21
 8002786:	f001 fb2d 	bl	8003de4 <DMA_ISR_r>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d045      	beq.n	800281c <enc_counts+0xb4>
    {

        int16_t count = (enc_r[2] - enc_r[1]);
 8002790:	4b73      	ldr	r3, [pc, #460]	; (8002960 <enc_counts+0x1f8>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	b29a      	uxth	r2, r3
 8002796:	4b72      	ldr	r3, [pc, #456]	; (8002960 <enc_counts+0x1f8>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	b29b      	uxth	r3, r3
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	b29b      	uxth	r3, r3
 80027a0:	82fb      	strh	r3, [r7, #22]
        int16_t count_2 = (enc_r[3] - enc_r[2]);
 80027a2:	4b6f      	ldr	r3, [pc, #444]	; (8002960 <enc_counts+0x1f8>)
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	4b6d      	ldr	r3, [pc, #436]	; (8002960 <enc_counts+0x1f8>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	82bb      	strh	r3, [r7, #20]

        if (abs(count - count_2) < 5) // make sure the array entries are uniformly spaced
 80027b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80027b8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	f113 0f04 	cmn.w	r3, #4
 80027c2:	db28      	blt.n	8002816 <enc_counts+0xae>
 80027c4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80027c8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	dc21      	bgt.n	8002816 <enc_counts+0xae>
        {

            if ((count >= 25) 
 80027d2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80027d6:	2b18      	cmp	r3, #24
 80027d8:	dd1d      	ble.n	8002816 <enc_counts+0xae>
            && // pwm 5000(100%) gives 29(0.75ms) counter counts.
 80027da:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80027de:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80027e2:	dc18      	bgt.n	8002816 <enc_counts+0xae>
                (count <= 500)   // min counts for min pwm, 500 count -> 80 enc -> 200 pwm
            )
            {
                enc_count_r = (1.0 / (float)(count * PERIOD)); // number of encoder counts per sec
 80027e4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7fd fe9b 	bl	8000524 <__aeabi_i2d>
 80027ee:	a35a      	add	r3, pc, #360	; (adr r3, 8002958 <enc_counts+0x1f0>)
 80027f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f4:	f7fe f82a 	bl	800084c <__aeabi_ddiv>
 80027f8:	4602      	mov	r2, r0
 80027fa:	460b      	mov	r3, r1
 80027fc:	4610      	mov	r0, r2
 80027fe:	4619      	mov	r1, r3
 8002800:	f7fe f9d2 	bl	8000ba8 <__aeabi_d2f>
 8002804:	ee06 0a90 	vmov	s13, r0
 8002808:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800280c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002810:	4b54      	ldr	r3, [pc, #336]	; (8002964 <enc_counts+0x1fc>)
 8002812:	edc3 7a00 	vstr	s15, [r3]
            }
        }

        not_moving_counter_r = 0;
 8002816:	4b54      	ldr	r3, [pc, #336]	; (8002968 <enc_counts+0x200>)
 8002818:	2200      	movs	r2, #0
 800281a:	701a      	strb	r2, [r3, #0]
        // sprintf(msg, "*********: %lu,%lu ,%lu,%lu ,%d,%d ,%f   \n", enc[0], enc[1], enc[2], enc[3], count, count_2, enc_count);
        // usart2_tx(msg);
    }

    // left encoder
    if (DMA_ISR_r(TEIF2))
 800281c:	2007      	movs	r0, #7
 800281e:	f001 fae1 	bl	8003de4 <DMA_ISR_r>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d004      	beq.n	8002832 <enc_counts+0xca>
    {
        DMA_IFCR_w(CTEIF2, SETBIT); // clear complete flag
 8002828:	2101      	movs	r1, #1
 800282a:	2007      	movs	r0, #7
 800282c:	f001 fb50 	bl	8003ed0 <DMA_IFCR_w>
 8002830:	e04b      	b.n	80028ca <enc_counts+0x162>
    }
    else if (DMA_ISR_r(TCIF2))
 8002832:	2005      	movs	r0, #5
 8002834:	f001 fad6 	bl	8003de4 <DMA_ISR_r>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d045      	beq.n	80028ca <enc_counts+0x162>
    {

        int16_t count = (enc_l[2] - enc_l[1]);
 800283e:	4b4b      	ldr	r3, [pc, #300]	; (800296c <enc_counts+0x204>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	b29a      	uxth	r2, r3
 8002844:	4b49      	ldr	r3, [pc, #292]	; (800296c <enc_counts+0x204>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	b29b      	uxth	r3, r3
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	b29b      	uxth	r3, r3
 800284e:	827b      	strh	r3, [r7, #18]
        int16_t count_2 = (enc_l[3] - enc_l[2]);
 8002850:	4b46      	ldr	r3, [pc, #280]	; (800296c <enc_counts+0x204>)
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	b29a      	uxth	r2, r3
 8002856:	4b45      	ldr	r3, [pc, #276]	; (800296c <enc_counts+0x204>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	b29b      	uxth	r3, r3
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	b29b      	uxth	r3, r3
 8002860:	823b      	strh	r3, [r7, #16]

        if (abs(count - count_2) < 5) // make sure the array entries are uniformly spaced
 8002862:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002866:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	f113 0f04 	cmn.w	r3, #4
 8002870:	db28      	blt.n	80028c4 <enc_counts+0x15c>
 8002872:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002876:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b04      	cmp	r3, #4
 800287e:	dc21      	bgt.n	80028c4 <enc_counts+0x15c>
        {

            if ((count >= 25) 
 8002880:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002884:	2b18      	cmp	r3, #24
 8002886:	dd1d      	ble.n	80028c4 <enc_counts+0x15c>
            && // pwm 5000(100%) gives 29(0.75ms) counter counts.
 8002888:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800288c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002890:	dc18      	bgt.n	80028c4 <enc_counts+0x15c>
                (count <= 500)   // min counts for min pwm
            )
            {
                enc_count_l = (1.0 / (float)(count * PERIOD)); // number of encoder counts per sec
 8002892:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002896:	4618      	mov	r0, r3
 8002898:	f7fd fe44 	bl	8000524 <__aeabi_i2d>
 800289c:	a32e      	add	r3, pc, #184	; (adr r3, 8002958 <enc_counts+0x1f0>)
 800289e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a2:	f7fd ffd3 	bl	800084c <__aeabi_ddiv>
 80028a6:	4602      	mov	r2, r0
 80028a8:	460b      	mov	r3, r1
 80028aa:	4610      	mov	r0, r2
 80028ac:	4619      	mov	r1, r3
 80028ae:	f7fe f97b 	bl	8000ba8 <__aeabi_d2f>
 80028b2:	ee06 0a90 	vmov	s13, r0
 80028b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80028ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028be:	4b2c      	ldr	r3, [pc, #176]	; (8002970 <enc_counts+0x208>)
 80028c0:	edc3 7a00 	vstr	s15, [r3]
            }
        }
        not_moving_counter_l = 0;
 80028c4:	4b2b      	ldr	r3, [pc, #172]	; (8002974 <enc_counts+0x20c>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	701a      	strb	r2, [r3, #0]
        // char msg[100];
        // sprintf(msg, "*********: %lu,%lu ,%lu,%lu ,%d,%d ,%f   \n", enc[0], enc[1], enc[2], enc[3], count, count_2, enc_count);
        // usart2_tx(msg);
    }

    not_moving_counter_l++;
 80028ca:	4b2a      	ldr	r3, [pc, #168]	; (8002974 <enc_counts+0x20c>)
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	3301      	adds	r3, #1
 80028d0:	b2da      	uxtb	r2, r3
 80028d2:	4b28      	ldr	r3, [pc, #160]	; (8002974 <enc_counts+0x20c>)
 80028d4:	701a      	strb	r2, [r3, #0]
    not_moving_counter_r++;
 80028d6:	4b24      	ldr	r3, [pc, #144]	; (8002968 <enc_counts+0x200>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	3301      	adds	r3, #1
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	4b22      	ldr	r3, [pc, #136]	; (8002968 <enc_counts+0x200>)
 80028e0:	701a      	strb	r2, [r3, #0]

    if (not_moving_counter_l > 100)
 80028e2:	4b24      	ldr	r3, [pc, #144]	; (8002974 <enc_counts+0x20c>)
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	2b64      	cmp	r3, #100	; 0x64
 80028e8:	d902      	bls.n	80028f0 <enc_counts+0x188>
    {
        not_moving_counter_l = 100;
 80028ea:	4b22      	ldr	r3, [pc, #136]	; (8002974 <enc_counts+0x20c>)
 80028ec:	2264      	movs	r2, #100	; 0x64
 80028ee:	701a      	strb	r2, [r3, #0]
    }
    if (not_moving_counter_r > 100)
 80028f0:	4b1d      	ldr	r3, [pc, #116]	; (8002968 <enc_counts+0x200>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	2b64      	cmp	r3, #100	; 0x64
 80028f6:	d902      	bls.n	80028fe <enc_counts+0x196>
    {
        not_moving_counter_r = 100;
 80028f8:	4b1b      	ldr	r3, [pc, #108]	; (8002968 <enc_counts+0x200>)
 80028fa:	2264      	movs	r2, #100	; 0x64
 80028fc:	701a      	strb	r2, [r3, #0]
    // if (not_moving_counter_r >= 100)
    // {
    //     enc_count_r = 0;
    // }

    if (DMA_ISR_r(TCIF6) || DMA_ISR_r(TCIF2))
 80028fe:	2015      	movs	r0, #21
 8002900:	f001 fa70 	bl	8003de4 <DMA_ISR_r>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d105      	bne.n	8002916 <enc_counts+0x1ae>
 800290a:	2005      	movs	r0, #5
 800290c:	f001 fa6a 	bl	8003de4 <DMA_ISR_r>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <enc_counts+0x1b2>
    {
        restart_timer_dma();
 8002916:	f000 f831 	bl	800297c <restart_timer_dma>
    }

    enc_data.encoder_count_r = enc_count_r;
 800291a:	4b12      	ldr	r3, [pc, #72]	; (8002964 <enc_counts+0x1fc>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a16      	ldr	r2, [pc, #88]	; (8002978 <enc_counts+0x210>)
 8002920:	6013      	str	r3, [r2, #0]
    enc_data.encoder_count_l = enc_count_l;
 8002922:	4b13      	ldr	r3, [pc, #76]	; (8002970 <enc_counts+0x208>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a14      	ldr	r2, [pc, #80]	; (8002978 <enc_counts+0x210>)
 8002928:	6053      	str	r3, [r2, #4]

    return enc_data;
 800292a:	4a13      	ldr	r2, [pc, #76]	; (8002978 <enc_counts+0x210>)
 800292c:	f107 0308 	add.w	r3, r7, #8
 8002930:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002934:	e883 0003 	stmia.w	r3, {r0, r1}
 8002938:	68ba      	ldr	r2, [r7, #8]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	ee07 2a10 	vmov	s14, r2
 8002940:	ee07 3a90 	vmov	s15, r3
}
 8002944:	eeb0 0a47 	vmov.f32	s0, s14
 8002948:	eef0 0a67 	vmov.f32	s1, s15
 800294c:	3718      	adds	r7, #24
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	f3af 8000 	nop.w
 8002958:	00000000 	.word	0x00000000
 800295c:	40e38800 	.word	0x40e38800
 8002960:	20000530 	.word	0x20000530
 8002964:	20000550 	.word	0x20000550
 8002968:	20000554 	.word	0x20000554
 800296c:	20000540 	.word	0x20000540
 8002970:	20000558 	.word	0x20000558
 8002974:	2000055c 	.word	0x2000055c
 8002978:	20000560 	.word	0x20000560

0800297c <restart_timer_dma>:

void restart_timer_dma()
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
    //                                  // CR2 reg, default 0: CCx DMA request sent when CCx event occurs
    // TIM_CCER_w(TIM_3, CC1E, SETBIT); // caputre enabled
    // TIM_CR1_w(TIM_3, CEN, SETBIT);   // Counter disabled
    // DMA1_Channel_CCR_wr(DMA1_Ch6, EN_DMA, SETBIT, WRITE);

    DMA_IFCR_w(CTCIF6, SETBIT); // clear complete flag
 8002980:	2101      	movs	r1, #1
 8002982:	2015      	movs	r0, #21
 8002984:	f001 faa4 	bl	8003ed0 <DMA_IFCR_w>
    DMA_IFCR_w(CTCIF2, SETBIT); // clear complete flag
 8002988:	2101      	movs	r1, #1
 800298a:	2005      	movs	r0, #5
 800298c:	f001 faa0 	bl	8003ed0 <DMA_IFCR_w>

    DMA1_Channel_CCR_wr(DMA1_Ch6, EN_DMA, !SETBIT, WRITE);
 8002990:	2301      	movs	r3, #1
 8002992:	2200      	movs	r2, #0
 8002994:	2100      	movs	r1, #0
 8002996:	2005      	movs	r0, #5
 8002998:	f001 fb64 	bl	8004064 <DMA1_Channel_CCR_wr>
    DMA1_Channel_CCR_wr(DMA1_Ch2, EN_DMA, !SETBIT, WRITE);
 800299c:	2301      	movs	r3, #1
 800299e:	2200      	movs	r2, #0
 80029a0:	2100      	movs	r1, #0
 80029a2:	2001      	movs	r0, #1
 80029a4:	f001 fb5e 	bl	8004064 <DMA1_Channel_CCR_wr>
    TIM3->DIER &= ~(1 << 9);                                // 1: CC1 DMA request disabled
 80029a8:	4b35      	ldr	r3, [pc, #212]	; (8002a80 <restart_timer_dma+0x104>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	4a34      	ldr	r2, [pc, #208]	; (8002a80 <restart_timer_dma+0x104>)
 80029ae:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80029b2:	60d3      	str	r3, [r2, #12]
    TIM3->EGR &= ~(1 << 1);                                 //  DMA request is sent on capture event
 80029b4:	4b32      	ldr	r3, [pc, #200]	; (8002a80 <restart_timer_dma+0x104>)
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	4a31      	ldr	r2, [pc, #196]	; (8002a80 <restart_timer_dma+0x104>)
 80029ba:	f023 0302 	bic.w	r3, r3, #2
 80029be:	6153      	str	r3, [r2, #20]
    TIM3->DIER &= ~(1 << 11);                               // 1: CC3 DMA request disabled
 80029c0:	4b2f      	ldr	r3, [pc, #188]	; (8002a80 <restart_timer_dma+0x104>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	4a2e      	ldr	r2, [pc, #184]	; (8002a80 <restart_timer_dma+0x104>)
 80029c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029ca:	60d3      	str	r3, [r2, #12]
    TIM3->EGR &= ~(1 << 3);                                 //  DMA request is sent on capture event
 80029cc:	4b2c      	ldr	r3, [pc, #176]	; (8002a80 <restart_timer_dma+0x104>)
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	4a2b      	ldr	r2, [pc, #172]	; (8002a80 <restart_timer_dma+0x104>)
 80029d2:	f023 0308 	bic.w	r3, r3, #8
 80029d6:	6153      	str	r3, [r2, #20]
    TIM_CR1_w(TIM_3, CEN, !SETBIT);                         // Counter disabled
 80029d8:	2200      	movs	r2, #0
 80029da:	2100      	movs	r1, #0
 80029dc:	2002      	movs	r0, #2
 80029de:	f001 f9db 	bl	8003d98 <TIM_CR1_w>
    TIM_CCER_w(TIM_3, CC1E, !SETBIT);                       // caputre disabled ch1
 80029e2:	2200      	movs	r2, #0
 80029e4:	2100      	movs	r1, #0
 80029e6:	2002      	movs	r0, #2
 80029e8:	f001 f87c 	bl	8003ae4 <TIM_CCER_w>
    TIM_CCER_w(TIM_3, CC3E, !SETBIT);                       // caputre disenabled ch3
 80029ec:	2200      	movs	r2, #0
 80029ee:	2108      	movs	r1, #8
 80029f0:	2002      	movs	r0, #2
 80029f2:	f001 f877 	bl	8003ae4 <TIM_CCER_w>
    TIM_EGR_w(TIM_3, UG, SETBIT);                           // Re-initialize the counter and generates an update of the registers
 80029f6:	2201      	movs	r2, #1
 80029f8:	2100      	movs	r1, #0
 80029fa:	2002      	movs	r0, #2
 80029fc:	f001 f91e 	bl	8003c3c <TIM_EGR_w>
    DMA1_Channel_CNDTR_w(DMA1_Ch6, dma_buffer_size, WRITE); // number of data to rx(important to refill CNDTR if circular mode is not used)
 8002a00:	2201      	movs	r2, #1
 8002a02:	2104      	movs	r1, #4
 8002a04:	2005      	movs	r0, #5
 8002a06:	f001 fa83 	bl	8003f10 <DMA1_Channel_CNDTR_w>
    DMA1_Channel_CNDTR_w(DMA1_Ch2, dma_buffer_size, WRITE); // number of data to rx(important to refill CNDTR if circular mode is not used)
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	2104      	movs	r1, #4
 8002a0e:	2001      	movs	r0, #1
 8002a10:	f001 fa7e 	bl	8003f10 <DMA1_Channel_CNDTR_w>

    TIM3->DIER |= (1 << 9);          // 1: CC1 DMA request enabled.
 8002a14:	4b1a      	ldr	r3, [pc, #104]	; (8002a80 <restart_timer_dma+0x104>)
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	4a19      	ldr	r2, [pc, #100]	; (8002a80 <restart_timer_dma+0x104>)
 8002a1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a1e:	60d3      	str	r3, [r2, #12]
    TIM3->EGR |= (1 << 1);           //  DMA request is sent on capture event
 8002a20:	4b17      	ldr	r3, [pc, #92]	; (8002a80 <restart_timer_dma+0x104>)
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	4a16      	ldr	r2, [pc, #88]	; (8002a80 <restart_timer_dma+0x104>)
 8002a26:	f043 0302 	orr.w	r3, r3, #2
 8002a2a:	6153      	str	r3, [r2, #20]
    TIM3->DIER |= (1 << 11);         // 1: CC3 DMA request enabled.
 8002a2c:	4b14      	ldr	r3, [pc, #80]	; (8002a80 <restart_timer_dma+0x104>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	4a13      	ldr	r2, [pc, #76]	; (8002a80 <restart_timer_dma+0x104>)
 8002a32:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a36:	60d3      	str	r3, [r2, #12]
    TIM3->EGR |= (1 << 3);           //  DMA request is sent on capture event
 8002a38:	4b11      	ldr	r3, [pc, #68]	; (8002a80 <restart_timer_dma+0x104>)
 8002a3a:	695b      	ldr	r3, [r3, #20]
 8002a3c:	4a10      	ldr	r2, [pc, #64]	; (8002a80 <restart_timer_dma+0x104>)
 8002a3e:	f043 0308 	orr.w	r3, r3, #8
 8002a42:	6153      	str	r3, [r2, #20]
                                     // CR2 reg, default 0: CCx DMA request sent when CCx event occurs
    TIM_CCER_w(TIM_3, CC1E, SETBIT); // caputre enabled
 8002a44:	2201      	movs	r2, #1
 8002a46:	2100      	movs	r1, #0
 8002a48:	2002      	movs	r0, #2
 8002a4a:	f001 f84b 	bl	8003ae4 <TIM_CCER_w>
    TIM_CCER_w(TIM_3, CC3E, SETBIT); // caputre enabled ch3
 8002a4e:	2201      	movs	r2, #1
 8002a50:	2108      	movs	r1, #8
 8002a52:	2002      	movs	r0, #2
 8002a54:	f001 f846 	bl	8003ae4 <TIM_CCER_w>
    TIM_CR1_w(TIM_3, CEN, SETBIT);   // Counter enabled
 8002a58:	2201      	movs	r2, #1
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	2002      	movs	r0, #2
 8002a5e:	f001 f99b 	bl	8003d98 <TIM_CR1_w>
    DMA1_Channel_CCR_wr(DMA1_Ch6, EN_DMA, SETBIT, WRITE);
 8002a62:	2301      	movs	r3, #1
 8002a64:	2201      	movs	r2, #1
 8002a66:	2100      	movs	r1, #0
 8002a68:	2005      	movs	r0, #5
 8002a6a:	f001 fafb 	bl	8004064 <DMA1_Channel_CCR_wr>
    DMA1_Channel_CCR_wr(DMA1_Ch2, EN_DMA, SETBIT, WRITE);
 8002a6e:	2301      	movs	r3, #1
 8002a70:	2201      	movs	r2, #1
 8002a72:	2100      	movs	r1, #0
 8002a74:	2001      	movs	r0, #1
 8002a76:	f001 faf5 	bl	8004064 <DMA1_Channel_CCR_wr>
}
 8002a7a:	bf00      	nop
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40000400 	.word	0x40000400

08002a84 <sbr_gpio_init>:

void sbr_gpio_init()
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
    GPIO_MODER_w(PORTB, MODE1, OUTPUT); // PB1 STBY_PIN
 8002a88:	2201      	movs	r2, #1
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	2001      	movs	r0, #1
 8002a8e:	f001 fd9f 	bl	80045d0 <GPIO_MODER_w>
    GPIO_MODER_w(PORTB, MODE2, OUTPUT); // PB2 Right motor direction control PIN, AIN1
 8002a92:	2201      	movs	r2, #1
 8002a94:	2102      	movs	r1, #2
 8002a96:	2001      	movs	r0, #1
 8002a98:	f001 fd9a 	bl	80045d0 <GPIO_MODER_w>
    GPIO_MODER_w(PORTB, MODE3, OUTPUT); // PB3 Left motor direction control PIN, BIN1
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	2103      	movs	r1, #3
 8002aa0:	2001      	movs	r0, #1
 8002aa2:	f001 fd95 	bl	80045d0 <GPIO_MODER_w>
    timer_init();
 8002aa6:	f7ff fcf7 	bl	8002498 <timer_init>
    right_motor_cw();
 8002aaa:	f000 f802 	bl	8002ab2 <right_motor_cw>
    // //////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // // input timer for right motor encoder, PB4, for use with enc_t enc_val()
    // GPIO_MODER_w(PORTB, MODE4, INPUT);
    // // PB0 input timer for left motor encoder
    // GPIO_MODER_w(PORTB, MODE0, INPUT);
}
 8002aae:	bf00      	nop
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <right_motor_cw>:

void right_motor_cw()
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	af00      	add	r7, sp, #0
    GPIO_BSRR_w(PORTB, BS1, SETBIT); // STBY_PIN HIGH
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	2101      	movs	r1, #1
 8002aba:	2001      	movs	r0, #1
 8002abc:	f001 fd60 	bl	8004580 <GPIO_BSRR_w>
    // GPIO_BSRR_w(PORTB, BS3, SETBIT);              // Right motor direction control PIN, bIN1, cw
    // TIM_CCR2_wr(TIM_2, CCR2_015,1000, WRITE); // PA1 TIM2 CH2, PWMB RIGHT

    //////////// Forward
    //   A left
    GPIO_BSRR_w(PORTB, BR2, SETBIT);          // left motor direction control PIN, AIN1, ccw
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	2112      	movs	r1, #18
 8002ac4:	2001      	movs	r0, #1
 8002ac6:	f001 fd5b 	bl	8004580 <GPIO_BSRR_w>
    TIM_CCR1_wr(TIM_2, CCR1_015, 200, WRITE); // PA0 TIM2 CH1, PWMA LEFT
 8002aca:	2301      	movs	r3, #1
 8002acc:	22c8      	movs	r2, #200	; 0xc8
 8002ace:	2100      	movs	r1, #0
 8002ad0:	2001      	movs	r0, #1
 8002ad2:	f001 f91b 	bl	8003d0c <TIM_CCR1_wr>

    // //  B right
    GPIO_BSRR_w(PORTB, BR3, SETBIT);          // Right motor direction control PIN, bIN1, cw
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	2113      	movs	r1, #19
 8002ada:	2001      	movs	r0, #1
 8002adc:	f001 fd50 	bl	8004580 <GPIO_BSRR_w>
    TIM_CCR2_wr(TIM_2, CCR2_015, 200, WRITE); // PA1 TIM2 CH2, PWMB RIGHT
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	22c8      	movs	r2, #200	; 0xc8
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	2001      	movs	r0, #1
 8002ae8:	f001 f8d6 	bl	8003c98 <TIM_CCR2_wr>
}
 8002aec:	bf00      	nop
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <turn_motors_off>:

pwm_t turn_motors_off(void)
{
 8002af0:	b590      	push	{r4, r7, lr}
 8002af2:	b08d      	sub	sp, #52	; 0x34
 8002af4:	af00      	add	r7, sp, #0
    pwm_t pwm;

    pwm.pwm1 = 0; // M1
 8002af6:	f04f 0300 	mov.w	r3, #0
 8002afa:	613b      	str	r3, [r7, #16]
    pwm.pwm2 = 0; // M2
 8002afc:	f04f 0300 	mov.w	r3, #0
 8002b00:	617b      	str	r3, [r7, #20]

    TIM_CCR2_wr(TIM_2, CCR2_015, pwm.pwm1, WRITE); // PA1 TIM2 CH2, PWMB RIGHT
 8002b02:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b0a:	ee17 3a90 	vmov	r3, s15
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	2301      	movs	r3, #1
 8002b12:	2100      	movs	r1, #0
 8002b14:	2001      	movs	r0, #1
 8002b16:	f001 f8bf 	bl	8003c98 <TIM_CCR2_wr>
    TIM_CCR1_wr(TIM_2, CCR1_015, pwm.pwm2, WRITE); // PA0 TIM2 CH1, PWMA LEFT
 8002b1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b22:	ee17 3a90 	vmov	r3, s15
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	2301      	movs	r3, #1
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	2001      	movs	r0, #1
 8002b2e:	f001 f8ed 	bl	8003d0c <TIM_CCR1_wr>

    return pwm;
 8002b32:	f107 0420 	add.w	r4, r7, #32
 8002b36:	f107 0310 	add.w	r3, r7, #16
 8002b3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002b40:	6a38      	ldr	r0, [r7, #32]
 8002b42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b48:	ee06 0a10 	vmov	s12, r0
 8002b4c:	ee06 1a90 	vmov	s13, r1
 8002b50:	ee07 2a10 	vmov	s14, r2
 8002b54:	ee07 3a90 	vmov	s15, r3
}
 8002b58:	eeb0 0a46 	vmov.f32	s0, s12
 8002b5c:	eef0 0a66 	vmov.f32	s1, s13
 8002b60:	eeb0 1a47 	vmov.f32	s2, s14
 8002b64:	eef0 1a67 	vmov.f32	s3, s15
 8002b68:	3734      	adds	r7, #52	; 0x34
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd90      	pop	{r4, r7, pc}

08002b6e <set_motors_pwm>:

void set_motors_pwm(pwm_t pwm)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b084      	sub	sp, #16
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	eeb0 6a40 	vmov.f32	s12, s0
 8002b78:	eef0 6a60 	vmov.f32	s13, s1
 8002b7c:	eeb0 7a41 	vmov.f32	s14, s2
 8002b80:	eef0 7a61 	vmov.f32	s15, s3
 8002b84:	ed87 6a00 	vstr	s12, [r7]
 8002b88:	edc7 6a01 	vstr	s13, [r7, #4]
 8002b8c:	ed87 7a02 	vstr	s14, [r7, #8]
 8002b90:	edc7 7a03 	vstr	s15, [r7, #12]
    // forward;  R 0cw, L 0ccw
    // backward; R 1ccw, L 1cw

    // let +ve pwm move sbr forward, as +ve angle means lean forward

    if (pwm.pwm1 > 0)
 8002b94:	edd7 7a00 	vldr	s15, [r7]
 8002b98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ba0:	dd05      	ble.n	8002bae <set_motors_pwm+0x40>
    {
        GPIO_BSRR_w(PORTB, BR3, SETBIT); // Right motor direction control PIN, bIN1, cw
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	2113      	movs	r1, #19
 8002ba6:	2001      	movs	r0, #1
 8002ba8:	f001 fcea 	bl	8004580 <GPIO_BSRR_w>
 8002bac:	e004      	b.n	8002bb8 <set_motors_pwm+0x4a>
    }
    else
    {
        GPIO_BSRR_w(PORTB, BS3, SETBIT); // Right motor direction control PIN, bIN1, ccw
 8002bae:	2201      	movs	r2, #1
 8002bb0:	2103      	movs	r1, #3
 8002bb2:	2001      	movs	r0, #1
 8002bb4:	f001 fce4 	bl	8004580 <GPIO_BSRR_w>
    }

    if (pwm.pwm2 > 0)
 8002bb8:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bbc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bc4:	dd05      	ble.n	8002bd2 <set_motors_pwm+0x64>
    {
        GPIO_BSRR_w(PORTB, BR2, SETBIT); // left motor direction control PIN, AIN1, ccw
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	2112      	movs	r1, #18
 8002bca:	2001      	movs	r0, #1
 8002bcc:	f001 fcd8 	bl	8004580 <GPIO_BSRR_w>
 8002bd0:	e004      	b.n	8002bdc <set_motors_pwm+0x6e>
    }
    else
    {
        GPIO_BSRR_w(PORTB, BS2, SETBIT); // left motor direction control PIN, AIN1, cw
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	2102      	movs	r1, #2
 8002bd6:	2001      	movs	r0, #1
 8002bd8:	f001 fcd2 	bl	8004580 <GPIO_BSRR_w>
    }

    TIM_CCR2_wr(TIM_2, CCR2_015, fabs(pwm.pwm1), WRITE); // PA1 TIM2 CH2, PWMB RIGHT
 8002bdc:	edd7 7a00 	vldr	s15, [r7]
 8002be0:	eef0 7ae7 	vabs.f32	s15, s15
 8002be4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002be8:	ee17 3a90 	vmov	r3, s15
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	2301      	movs	r3, #1
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	2001      	movs	r0, #1
 8002bf4:	f001 f850 	bl	8003c98 <TIM_CCR2_wr>
    TIM_CCR1_wr(TIM_2, CCR1_015, fabs(pwm.pwm2), WRITE); // PA0 TIM2 CH1, PWMA LEFT
 8002bf8:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bfc:	eef0 7ae7 	vabs.f32	s15, s15
 8002c00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c04:	ee17 3a90 	vmov	r3, s15
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	2001      	movs	r0, #1
 8002c10:	f001 f87c 	bl	8003d0c <TIM_CCR1_wr>
}
 8002c14:	bf00      	nop
 8002c16:	3710      	adds	r7, #16
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <usart_init>:
//0x3AA 38400*
void usart1_radio_init();
void usart2_display_init();

void usart_init()
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
    usart2_display_init();
 8002c20:	f000 f804 	bl	8002c2c <usart2_display_init>
    usart1_radio_init();
 8002c24:	f000 f862 	bl	8002cec <usart1_radio_init>
}
 8002c28:	bf00      	nop
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <usart2_display_init>:

void usart2_display_init()
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
    // PA2 TX and PA3 RX, for  usart2, telemetry
    GPIO_MODER_w(PORTA, MODE2, ALT);
 8002c30:	2202      	movs	r2, #2
 8002c32:	2102      	movs	r1, #2
 8002c34:	2000      	movs	r0, #0
 8002c36:	f001 fccb 	bl	80045d0 <GPIO_MODER_w>
    GPIO_AFR_w(PORTA, AFSEL2_10, USART, false);
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	2207      	movs	r2, #7
 8002c3e:	2108      	movs	r1, #8
 8002c40:	2000      	movs	r0, #0
 8002c42:	f001 fc5d 	bl	8004500 <GPIO_AFR_w>
    GPIO_MODER_w(PORTA, MODE3, ALT);
 8002c46:	2202      	movs	r2, #2
 8002c48:	2103      	movs	r1, #3
 8002c4a:	2000      	movs	r0, #0
 8002c4c:	f001 fcc0 	bl	80045d0 <GPIO_MODER_w>
    GPIO_AFR_w(PORTA, AFSEL3_11, USART, false);
 8002c50:	2300      	movs	r3, #0
 8002c52:	2207      	movs	r2, #7
 8002c54:	210c      	movs	r1, #12
 8002c56:	2000      	movs	r0, #0
 8002c58:	f001 fc52 	bl	8004500 <GPIO_AFR_w>

    // usart2 direct display
    USART_BRR_w(USART_2, tel_baud_rate);
 8002c5c:	f640 63a6 	movw	r3, #3750	; 0xea6
 8002c60:	4619      	mov	r1, r3
 8002c62:	2001      	movs	r0, #1
 8002c64:	f001 fbd6 	bl	8004414 <USART_BRR_w>
    USART_CR1_wr(USART_2, UE, SETBIT, WRITE); // enable USART UE BIT 0 (do after all USART config.), b4 RE and TE
 8002c68:	2301      	movs	r3, #1
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	2001      	movs	r0, #1
 8002c70:	f001 fb96 	bl	80043a0 <USART_CR1_wr>
    USART_CR1_wr(USART_2, RE, SETBIT, WRITE); // enable RX mode of USART RE (BIT 2)
 8002c74:	2301      	movs	r3, #1
 8002c76:	2201      	movs	r2, #1
 8002c78:	2102      	movs	r1, #2
 8002c7a:	2001      	movs	r0, #1
 8002c7c:	f001 fb90 	bl	80043a0 <USART_CR1_wr>
    USART_CR1_wr(USART_2, TE, SETBIT, WRITE); // enable TX mode of USART TE (BIT 3)
 8002c80:	2301      	movs	r3, #1
 8002c82:	2201      	movs	r2, #1
 8002c84:	2103      	movs	r1, #3
 8002c86:	2001      	movs	r0, #1
 8002c88:	f001 fb8a 	bl	80043a0 <USART_CR1_wr>

    //BT
        // PC10 TX and PC11 RX, for  usart3, telemetry
    GPIO_MODER_w(PORTC, MODE10, ALT);
 8002c8c:	2202      	movs	r2, #2
 8002c8e:	210a      	movs	r1, #10
 8002c90:	2002      	movs	r0, #2
 8002c92:	f001 fc9d 	bl	80045d0 <GPIO_MODER_w>
    GPIO_AFR_w(PORTC, AFSEL2_10, USART, true);
 8002c96:	2301      	movs	r3, #1
 8002c98:	2207      	movs	r2, #7
 8002c9a:	2108      	movs	r1, #8
 8002c9c:	2002      	movs	r0, #2
 8002c9e:	f001 fc2f 	bl	8004500 <GPIO_AFR_w>
    GPIO_MODER_w(PORTC, MODE11, ALT);
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	210b      	movs	r1, #11
 8002ca6:	2002      	movs	r0, #2
 8002ca8:	f001 fc92 	bl	80045d0 <GPIO_MODER_w>
    GPIO_AFR_w(PORTC, AFSEL3_11, USART, true);
 8002cac:	2301      	movs	r3, #1
 8002cae:	2207      	movs	r2, #7
 8002cb0:	210c      	movs	r1, #12
 8002cb2:	2002      	movs	r0, #2
 8002cb4:	f001 fc24 	bl	8004500 <GPIO_AFR_w>

    // usart2 direct display
    USART_BRR_w(USART_3, tel_baud_rate);
 8002cb8:	f640 63a6 	movw	r3, #3750	; 0xea6
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	2002      	movs	r0, #2
 8002cc0:	f001 fba8 	bl	8004414 <USART_BRR_w>
    USART_CR1_wr(USART_3, UE, SETBIT, WRITE); // enable USART UE BIT 0 (do after all USART config.), b4 RE and TE
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	2100      	movs	r1, #0
 8002cca:	2002      	movs	r0, #2
 8002ccc:	f001 fb68 	bl	80043a0 <USART_CR1_wr>
    USART_CR1_wr(USART_3, RE, SETBIT, WRITE); // enable RX mode of USART RE (BIT 2)
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	2102      	movs	r1, #2
 8002cd6:	2002      	movs	r0, #2
 8002cd8:	f001 fb62 	bl	80043a0 <USART_CR1_wr>
    USART_CR1_wr(USART_3, TE, SETBIT, WRITE); // enable TX mode of USART TE (BIT 3)
 8002cdc:	2301      	movs	r3, #1
 8002cde:	2201      	movs	r2, #1
 8002ce0:	2103      	movs	r1, #3
 8002ce2:	2002      	movs	r0, #2
 8002ce4:	f001 fb5c 	bl	80043a0 <USART_CR1_wr>
}
 8002ce8:	bf00      	nop
 8002cea:	bd80      	pop	{r7, pc}

08002cec <usart1_radio_init>:

// for radio,at 115200 baud rate
void usart1_radio_init()
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
    // PA10 for  usart1, radio
    GPIO_MODER_w(PORTA, MODE10, ALT);
 8002cf0:	2202      	movs	r2, #2
 8002cf2:	210a      	movs	r1, #10
 8002cf4:	2000      	movs	r0, #0
 8002cf6:	f001 fc6b 	bl	80045d0 <GPIO_MODER_w>
    GPIO_AFR_w(PORTA, AFSEL2_10, USART, true);
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	2207      	movs	r2, #7
 8002cfe:	2108      	movs	r1, #8
 8002d00:	2000      	movs	r0, #0
 8002d02:	f001 fbfd 	bl	8004500 <GPIO_AFR_w>

    // // PA10 Rx
    DMA1_Channel_CSELR_wr(C5S + 1, SETBIT, WRITE);
 8002d06:	2201      	movs	r2, #1
 8002d08:	2101      	movs	r1, #1
 8002d0a:	2011      	movs	r0, #17
 8002d0c:	f001 f942 	bl	8003f94 <DMA1_Channel_CSELR_wr>

    USART_CR3_wr(USART_1, DMAR, SETBIT, WRITE);
 8002d10:	2301      	movs	r3, #1
 8002d12:	2201      	movs	r2, #1
 8002d14:	2106      	movs	r1, #6
 8002d16:	2000      	movs	r0, #0
 8002d18:	f001 f96a 	bl	8003ff0 <USART_CR3_wr>

    DMA1_Channel_CPAR_w(DMA1_Ch5, (uint32_t)&USART1->RDR, WRITE);
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	491d      	ldr	r1, [pc, #116]	; (8002d94 <usart1_radio_init+0xa8>)
 8002d20:	2004      	movs	r0, #4
 8002d22:	f001 f90b 	bl	8003f3c <DMA1_Channel_CPAR_w>
    DMA1_Channel_CMAR_w(DMA1_Ch5, (uint32_t)ibus, WRITE);
 8002d26:	4b1c      	ldr	r3, [pc, #112]	; (8002d98 <usart1_radio_init+0xac>)
 8002d28:	2201      	movs	r2, #1
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	2004      	movs	r0, #4
 8002d2e:	f001 f91b 	bl	8003f68 <DMA1_Channel_CMAR_w>

    DMA1_Channel_CNDTR_w(DMA1_Ch5, radio_buffer, WRITE); // number of byte to rx
 8002d32:	2201      	movs	r2, #1
 8002d34:	2120      	movs	r1, #32
 8002d36:	2004      	movs	r0, #4
 8002d38:	f001 f8ea 	bl	8003f10 <DMA1_Channel_CNDTR_w>

    DMA1_Channel_CCR_wr(DMA1_Ch5, MINC_DMA, SETBIT, WRITE);
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	2201      	movs	r2, #1
 8002d40:	2107      	movs	r1, #7
 8002d42:	2004      	movs	r0, #4
 8002d44:	f001 f98e 	bl	8004064 <DMA1_Channel_CCR_wr>
    DMA1_Channel_CCR_wr(DMA1_Ch5, PL, SETBIT, WRITE);//medium piriority
 8002d48:	2301      	movs	r3, #1
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	210c      	movs	r1, #12
 8002d4e:	2004      	movs	r0, #4
 8002d50:	f001 f988 	bl	8004064 <DMA1_Channel_CCR_wr>

    USART_BRR_w(USART_1, radio_baud_rate);    // 72MHz/115200 = 271 hex,  pg 1356/1395 of refernce manual, OVER8 = 0
 8002d54:	f240 2371 	movw	r3, #625	; 0x271
 8002d58:	4619      	mov	r1, r3
 8002d5a:	2000      	movs	r0, #0
 8002d5c:	f001 fb5a 	bl	8004414 <USART_BRR_w>
    USART_CR1_wr(USART_1, UE, SETBIT, WRITE); // enable USART UE BIT 0 (do after all USART config.), b4 RE and TE
 8002d60:	2301      	movs	r3, #1
 8002d62:	2201      	movs	r2, #1
 8002d64:	2100      	movs	r1, #0
 8002d66:	2000      	movs	r0, #0
 8002d68:	f001 fb1a 	bl	80043a0 <USART_CR1_wr>
    USART_CR1_wr(USART_1, RE, SETBIT, WRITE); // enable RX mode of USART RE (BIT 2)
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	2201      	movs	r2, #1
 8002d70:	2102      	movs	r1, #2
 8002d72:	2000      	movs	r0, #0
 8002d74:	f001 fb14 	bl	80043a0 <USART_CR1_wr>
    USART_CR1_wr(USART_1, TE, SETBIT, WRITE); // enable TX mode of USART TE (BIT 3)
 8002d78:	2301      	movs	r3, #1
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	2103      	movs	r1, #3
 8002d7e:	2000      	movs	r0, #0
 8002d80:	f001 fb0e 	bl	80043a0 <USART_CR1_wr>

    DMA1_Channel_CCR_wr(DMA1_Ch5, EN_DMA, SETBIT, WRITE);
 8002d84:	2301      	movs	r3, #1
 8002d86:	2201      	movs	r2, #1
 8002d88:	2100      	movs	r1, #0
 8002d8a:	2004      	movs	r0, #4
 8002d8c:	f001 f96a 	bl	8004064 <DMA1_Channel_CCR_wr>


   ///////////////////////////
   

}
 8002d90:	bf00      	nop
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40013824 	.word	0x40013824
 8002d98:	200004ec 	.word	0x200004ec

08002d9c <usart1_radio_dma_restart>:

void usart1_radio_dma_restart()
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
    DMA_IFCR_w(CTCIF5, SETBIT);
 8002da0:	2101      	movs	r1, #1
 8002da2:	2011      	movs	r0, #17
 8002da4:	f001 f894 	bl	8003ed0 <DMA_IFCR_w>
    DMA1_Channel_CCR_wr(DMA1_Ch5, EN_DMA, !SETBIT, WRITE); // clear config reg before disabling the uart
 8002da8:	2301      	movs	r3, #1
 8002daa:	2200      	movs	r2, #0
 8002dac:	2100      	movs	r1, #0
 8002dae:	2004      	movs	r0, #4
 8002db0:	f001 f958 	bl	8004064 <DMA1_Channel_CCR_wr>
    USART_CR3_wr(USART_1, DMAR, !SETBIT, WRITE);           // DMAR diasble , b4 uart disable
 8002db4:	2301      	movs	r3, #1
 8002db6:	2200      	movs	r2, #0
 8002db8:	2106      	movs	r1, #6
 8002dba:	2000      	movs	r0, #0
 8002dbc:	f001 f918 	bl	8003ff0 <USART_CR3_wr>
    USART_CR1_wr(USART_1, TE, !SETBIT, WRITE);             // enable TX mode of USART TE (BIT 3)
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	2103      	movs	r1, #3
 8002dc6:	2000      	movs	r0, #0
 8002dc8:	f001 faea 	bl	80043a0 <USART_CR1_wr>
    while (!USART_ISR_r(USART_2, TC))
 8002dcc:	bf00      	nop
 8002dce:	2106      	movs	r1, #6
 8002dd0:	2001      	movs	r0, #1
 8002dd2:	f001 fac7 	bl	8004364 <USART_ISR_r>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d0f8      	beq.n	8002dce <usart1_radio_dma_restart+0x32>
        ;                                                           // wait for TC to be set automatically after TE is disabled
    USART_CR1_wr(USART_1, UE, !SETBIT, WRITE);                      // disable USART
 8002ddc:	2301      	movs	r3, #1
 8002dde:	2200      	movs	r2, #0
 8002de0:	2100      	movs	r1, #0
 8002de2:	2000      	movs	r0, #0
 8002de4:	f001 fadc 	bl	80043a0 <USART_CR1_wr>
    DMA1_Channel_CNDTR_w(DMA1_Ch5, radio_buffer, WRITE); // number of byte to rx
 8002de8:	2201      	movs	r2, #1
 8002dea:	2120      	movs	r1, #32
 8002dec:	2004      	movs	r0, #4
 8002dee:	f001 f88f 	bl	8003f10 <DMA1_Channel_CNDTR_w>
    DMA1_Channel_CCR_wr(DMA1_Ch5, EN_DMA, SETBIT, WRITE);           // enable
 8002df2:	2301      	movs	r3, #1
 8002df4:	2201      	movs	r2, #1
 8002df6:	2100      	movs	r1, #0
 8002df8:	2004      	movs	r0, #4
 8002dfa:	f001 f933 	bl	8004064 <DMA1_Channel_CCR_wr>

    USART_CR3_wr(USART_1, DMAR, SETBIT, WRITE);
 8002dfe:	2301      	movs	r3, #1
 8002e00:	2201      	movs	r2, #1
 8002e02:	2106      	movs	r1, #6
 8002e04:	2000      	movs	r0, #0
 8002e06:	f001 f8f3 	bl	8003ff0 <USART_CR3_wr>
    USART_CR1_wr(USART_1, UE, SETBIT, WRITE); // enable USART UE BIT 0 (do after all USART config.), b4 RE and TE
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	2100      	movs	r1, #0
 8002e10:	2000      	movs	r0, #0
 8002e12:	f001 fac5 	bl	80043a0 <USART_CR1_wr>
}
 8002e16:	bf00      	nop
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <usart2_tx>:
 */
#include "io.h"
#include "usart.h"
#include "usart_comm.h"
void usart2_tx(char *data)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b082      	sub	sp, #8
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
    while (*data)
 8002e22:	e00f      	b.n	8002e44 <usart2_tx+0x2a>
    {
        while (!USART_ISR_r(USART_2, TXE))
 8002e24:	bf00      	nop
 8002e26:	2107      	movs	r1, #7
 8002e28:	2001      	movs	r0, #1
 8002e2a:	f001 fa9b 	bl	8004364 <USART_ISR_r>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d0f8      	beq.n	8002e26 <usart2_tx+0xc>
            ; // wait for TX buffer(BIT 7) to be empty
        USART_TDR_w(USART_2, *(data++));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	1c5a      	adds	r2, r3, #1
 8002e38:	607a      	str	r2, [r7, #4]
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	2001      	movs	r0, #1
 8002e40:	f001 fa78 	bl	8004334 <USART_TDR_w>
    while (*data)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1eb      	bne.n	8002e24 <usart2_tx+0xa>
        // USART_TDR_w(USART_2, d);

        // while (!USART_ISR_r(USART_2, TC))
        //     ;
    }
}
 8002e4c:	bf00      	nop
 8002e4e:	bf00      	nop
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <usart3_tx>:

void usart3_tx(char *data)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b082      	sub	sp, #8
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
    while (*data)
 8002e5e:	e00f      	b.n	8002e80 <usart3_tx+0x2a>
    {

        while (!USART_ISR_r(USART_3, TXE))
 8002e60:	bf00      	nop
 8002e62:	2107      	movs	r1, #7
 8002e64:	2002      	movs	r0, #2
 8002e66:	f001 fa7d 	bl	8004364 <USART_ISR_r>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0f8      	beq.n	8002e62 <usart3_tx+0xc>
            ; // wait for TX buffer(BIT 7) to be empty
        USART_TDR_w(USART_3, *(data++));
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	1c5a      	adds	r2, r3, #1
 8002e74:	607a      	str	r2, [r7, #4]
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	4619      	mov	r1, r3
 8002e7a:	2002      	movs	r0, #2
 8002e7c:	f001 fa5a 	bl	8004334 <USART_TDR_w>
    while (*data)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1eb      	bne.n	8002e60 <usart3_tx+0xa>
        // USART_TDR_w(USART_3, d);

        // while (!USART_ISR_r(USART_3, TC))
        //     ;
    }
}
 8002e88:	bf00      	nop
 8002e8a:	bf00      	nop
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
	...

08002e94 <init_acc_gyro>:
static uint8_t read_accelerometer();
static uint8_t read_gyro();
static void init_acc_gyro();

static void init_acc_gyro()
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
    sprintf(msg, "MPU starting\n");
 8002e9a:	4921      	ldr	r1, [pc, #132]	; (8002f20 <init_acc_gyro+0x8c>)
 8002e9c:	4821      	ldr	r0, [pc, #132]	; (8002f24 <init_acc_gyro+0x90>)
 8002e9e:	f006 fac9 	bl	8009434 <siprintf>
    usart2_tx(msg);
 8002ea2:	4820      	ldr	r0, [pc, #128]	; (8002f24 <init_acc_gyro+0x90>)
 8002ea4:	f7ff ffb9 	bl	8002e1a <usart2_tx>
    // this piece of code keeps initializing i2c until it is successful
    int who_i_be = 0;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	607b      	str	r3, [r7, #4]
    do
    {
        i2c1_init();
 8002eac:	f7fe ffa0 	bl	8001df0 <i2c1_init>
        uint8_t read_buffer[1];
        if (i2c1_read(ADDRESS_AD0_LOW, WHO_AM_I, 1, read_buffer))
 8002eb0:	463b      	mov	r3, r7
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	2175      	movs	r1, #117	; 0x75
 8002eb6:	2068      	movs	r0, #104	; 0x68
 8002eb8:	f7ff f960 	bl	800217c <i2c1_read>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <init_acc_gyro+0x32>
        {
            who_i_be = read_buffer[0];
 8002ec2:	783b      	ldrb	r3, [r7, #0]
 8002ec4:	607b      	str	r3, [r7, #4]
        }
    } while (who_i_be != WHO_AM_I_VAL);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2b68      	cmp	r3, #104	; 0x68
 8002eca:	d1ef      	bne.n	8002eac <init_acc_gyro+0x18>

    sprintf(msg, "MPU ID %d,MPU i2c1 OK\n", who_i_be);
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	4916      	ldr	r1, [pc, #88]	; (8002f28 <init_acc_gyro+0x94>)
 8002ed0:	4814      	ldr	r0, [pc, #80]	; (8002f24 <init_acc_gyro+0x90>)
 8002ed2:	f006 faaf 	bl	8009434 <siprintf>
    usart2_tx(msg);
 8002ed6:	4813      	ldr	r0, [pc, #76]	; (8002f24 <init_acc_gyro+0x90>)
 8002ed8:	f7ff ff9f 	bl	8002e1a <usart2_tx>

    config_12c1_node(ADDRESS_AD0_LOW, ACCEL_CONFIG, ACCEL_4g, 1);   // +-4g
 8002edc:	2301      	movs	r3, #1
 8002ede:	2208      	movs	r2, #8
 8002ee0:	211c      	movs	r1, #28
 8002ee2:	2068      	movs	r0, #104	; 0x68
 8002ee4:	f7fe ffb2 	bl	8001e4c <config_12c1_node>
    config_12c1_node(ADDRESS_AD0_LOW, GYRO_CONFIG, GYRO_500dps, 1); //+-500dps
 8002ee8:	2301      	movs	r3, #1
 8002eea:	2208      	movs	r2, #8
 8002eec:	211b      	movs	r1, #27
 8002eee:	2068      	movs	r0, #104	; 0x68
 8002ef0:	f7fe ffac 	bl	8001e4c <config_12c1_node>
    config_12c1_node(ADDRESS_AD0_LOW, PWR_MGMT_1, RUN_MODE, 1);     // run mode
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	216b      	movs	r1, #107	; 0x6b
 8002efa:	2068      	movs	r0, #104	; 0x68
 8002efc:	f7fe ffa6 	bl	8001e4c <config_12c1_node>
    config_12c1_node(ADDRESS_AD0_LOW, CONFIG, CUTOFF_HZ, 1);        // DLPF cutoff freq of %5Hz cutoff
 8002f00:	2301      	movs	r3, #1
 8002f02:	2206      	movs	r2, #6
 8002f04:	211a      	movs	r1, #26
 8002f06:	2068      	movs	r0, #104	; 0x68
 8002f08:	f7fe ffa0 	bl	8001e4c <config_12c1_node>
    config_12c1_node(ADDRESS_AD0_LOW, SMPLRT_DIV, UPDATE_HZ, 1);    // update sensor reg. at 500Hz
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	2202      	movs	r2, #2
 8002f10:	2119      	movs	r1, #25
 8002f12:	2068      	movs	r0, #104	; 0x68
 8002f14:	f7fe ff9a 	bl	8001e4c <config_12c1_node>
}
 8002f18:	bf00      	nop
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	0800bc70 	.word	0x0800bc70
 8002f24:	200005a4 	.word	0x200005a4
 8002f28:	0800bc80 	.word	0x0800bc80

08002f2c <init>:

static void init()
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
    init_acc_gyro();
 8002f30:	f7ff ffb0 	bl	8002e94 <init_acc_gyro>
    gyro_calib();
 8002f34:	f000 f86e 	bl	8003014 <gyro_calib>
}
 8002f38:	bf00      	nop
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <init_mpu>:

void init_mpu(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
    init();
 8002f42:	f7ff fff3 	bl	8002f2c <init>
    bool first_entry = true;
 8002f46:	2301      	movs	r3, #1
 8002f48:	73fb      	strb	r3, [r7, #15]
    int count_to_reset = 0;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	60bb      	str	r3, [r7, #8]
    float resultant = 0;
 8002f4e:	f04f 0300 	mov.w	r3, #0
 8002f52:	607b      	str	r3, [r7, #4]
    int reset_limit = 100;
 8002f54:	2364      	movs	r3, #100	; 0x64
 8002f56:	603b      	str	r3, [r7, #0]
    while (first_entry)
 8002f58:	e04d      	b.n	8002ff6 <init_mpu+0xba>
    {
        read_accelerometer();
 8002f5a:	f000 f8fd 	bl	8003158 <read_accelerometer>
        resultant = sqrt((imu_data.accXn * imu_data.accXn) + (imu_data.accYn * imu_data.accYn) + (imu_data.accZn * imu_data.accZn)); // should be approx. 1.0
 8002f5e:	4b2a      	ldr	r3, [pc, #168]	; (8003008 <init_mpu+0xcc>)
 8002f60:	ed93 7a00 	vldr	s14, [r3]
 8002f64:	4b28      	ldr	r3, [pc, #160]	; (8003008 <init_mpu+0xcc>)
 8002f66:	edd3 7a00 	vldr	s15, [r3]
 8002f6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f6e:	4b26      	ldr	r3, [pc, #152]	; (8003008 <init_mpu+0xcc>)
 8002f70:	edd3 6a01 	vldr	s13, [r3, #4]
 8002f74:	4b24      	ldr	r3, [pc, #144]	; (8003008 <init_mpu+0xcc>)
 8002f76:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f82:	4b21      	ldr	r3, [pc, #132]	; (8003008 <init_mpu+0xcc>)
 8002f84:	edd3 6a02 	vldr	s13, [r3, #8]
 8002f88:	4b1f      	ldr	r3, [pc, #124]	; (8003008 <init_mpu+0xcc>)
 8002f8a:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f96:	ee17 0a90 	vmov	r0, s15
 8002f9a:	f7fd fad5 	bl	8000548 <__aeabi_f2d>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	ec43 2b10 	vmov	d0, r2, r3
 8002fa6:	f008 fab5 	bl	800b514 <sqrt>
 8002faa:	ec53 2b10 	vmov	r2, r3, d0
 8002fae:	4610      	mov	r0, r2
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	f7fd fdf9 	bl	8000ba8 <__aeabi_d2f>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	607b      	str	r3, [r7, #4]

        count_to_reset++;
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	60bb      	str	r3, [r7, #8]
        if (count_to_reset >= reset_limit) // reset mpu imu until accelerometer value is correct
 8002fc0:	68ba      	ldr	r2, [r7, #8]
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	db16      	blt.n	8002ff6 <init_mpu+0xba>
        {
            if ((resultant > 1.5f))
 8002fc8:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fcc:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002fd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fd8:	dd02      	ble.n	8002fe0 <init_mpu+0xa4>
            {
                init();
 8002fda:	f7ff ffa7 	bl	8002f2c <init>
 8002fde:	e008      	b.n	8002ff2 <init_mpu+0xb6>
            }
            else
            {
                first_entry = false;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	73fb      	strb	r3, [r7, #15]
                sprintf(msg, "\nMPU init. done\n");
 8002fe4:	4909      	ldr	r1, [pc, #36]	; (800300c <init_mpu+0xd0>)
 8002fe6:	480a      	ldr	r0, [pc, #40]	; (8003010 <init_mpu+0xd4>)
 8002fe8:	f006 fa24 	bl	8009434 <siprintf>
                usart2_tx(msg);
 8002fec:	4808      	ldr	r0, [pc, #32]	; (8003010 <init_mpu+0xd4>)
 8002fee:	f7ff ff14 	bl	8002e1a <usart2_tx>
            }
            count_to_reset = 0;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	60bb      	str	r3, [r7, #8]
    while (first_entry)
 8002ff6:	7bfb      	ldrb	r3, [r7, #15]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1ae      	bne.n	8002f5a <init_mpu+0x1e>
        }
    }
}
 8002ffc:	bf00      	nop
 8002ffe:	bf00      	nop
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	20000580 	.word	0x20000580
 800300c:	0800bc98 	.word	0x0800bc98
 8003010:	200005a4 	.word	0x200005a4

08003014 <gyro_calib>:
static void gyro_calib(void)
{
 8003014:	b5b0      	push	{r4, r5, r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0
    // Gyro Offset calibration
    int counter = 0;
 800301a:	2300      	movs	r3, #0
 800301c:	617b      	str	r3, [r7, #20]
    float counter_limit = 1000.0f;
 800301e:	4b4a      	ldr	r3, [pc, #296]	; (8003148 <gyro_calib+0x134>)
 8003020:	613b      	str	r3, [r7, #16]
    int16_t gyroXD, gyroYD, gyroZD;
    uint8_t read_buffer[6];

    while (counter < counter_limit)
 8003022:	e04d      	b.n	80030c0 <gyro_calib+0xac>
    {
        if (i2c1_read(ADDRESS_AD0_LOW, GYRO_XOUT_H, 6, read_buffer))
 8003024:	1d3b      	adds	r3, r7, #4
 8003026:	2206      	movs	r2, #6
 8003028:	2143      	movs	r1, #67	; 0x43
 800302a:	2068      	movs	r0, #104	; 0x68
 800302c:	f7ff f8a6 	bl	800217c <i2c1_read>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d044      	beq.n	80030c0 <gyro_calib+0xac>
        {
            gyroXD = read_buffer[0] << 8 | read_buffer[1];
 8003036:	793b      	ldrb	r3, [r7, #4]
 8003038:	021b      	lsls	r3, r3, #8
 800303a:	b21a      	sxth	r2, r3
 800303c:	797b      	ldrb	r3, [r7, #5]
 800303e:	b21b      	sxth	r3, r3
 8003040:	4313      	orrs	r3, r2
 8003042:	81fb      	strh	r3, [r7, #14]
            gyroYD = read_buffer[2] << 8 | read_buffer[3];
 8003044:	79bb      	ldrb	r3, [r7, #6]
 8003046:	021b      	lsls	r3, r3, #8
 8003048:	b21a      	sxth	r2, r3
 800304a:	79fb      	ldrb	r3, [r7, #7]
 800304c:	b21b      	sxth	r3, r3
 800304e:	4313      	orrs	r3, r2
 8003050:	81bb      	strh	r3, [r7, #12]
            gyroZD = read_buffer[4] << 8 | read_buffer[5];
 8003052:	7a3b      	ldrb	r3, [r7, #8]
 8003054:	021b      	lsls	r3, r3, #8
 8003056:	b21a      	sxth	r2, r3
 8003058:	7a7b      	ldrb	r3, [r7, #9]
 800305a:	b21b      	sxth	r3, r3
 800305c:	4313      	orrs	r3, r2
 800305e:	817b      	strh	r3, [r7, #10]

            gx_offset += gyroXD;
 8003060:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003064:	4618      	mov	r0, r3
 8003066:	f7fd fa5d 	bl	8000524 <__aeabi_i2d>
 800306a:	4b38      	ldr	r3, [pc, #224]	; (800314c <gyro_calib+0x138>)
 800306c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003070:	f7fd f90c 	bl	800028c <__adddf3>
 8003074:	4602      	mov	r2, r0
 8003076:	460b      	mov	r3, r1
 8003078:	4934      	ldr	r1, [pc, #208]	; (800314c <gyro_calib+0x138>)
 800307a:	e9c1 2300 	strd	r2, r3, [r1]
            gy_offset += gyroYD;
 800307e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003082:	4618      	mov	r0, r3
 8003084:	f7fd fa4e 	bl	8000524 <__aeabi_i2d>
 8003088:	4b31      	ldr	r3, [pc, #196]	; (8003150 <gyro_calib+0x13c>)
 800308a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800308e:	f7fd f8fd 	bl	800028c <__adddf3>
 8003092:	4602      	mov	r2, r0
 8003094:	460b      	mov	r3, r1
 8003096:	492e      	ldr	r1, [pc, #184]	; (8003150 <gyro_calib+0x13c>)
 8003098:	e9c1 2300 	strd	r2, r3, [r1]
            gz_offset += gyroZD;
 800309c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7fd fa3f 	bl	8000524 <__aeabi_i2d>
 80030a6:	4b2b      	ldr	r3, [pc, #172]	; (8003154 <gyro_calib+0x140>)
 80030a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ac:	f7fd f8ee 	bl	800028c <__adddf3>
 80030b0:	4602      	mov	r2, r0
 80030b2:	460b      	mov	r3, r1
 80030b4:	4927      	ldr	r1, [pc, #156]	; (8003154 <gyro_calib+0x140>)
 80030b6:	e9c1 2300 	strd	r2, r3, [r1]
            counter++;
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	3301      	adds	r3, #1
 80030be:	617b      	str	r3, [r7, #20]
    while (counter < counter_limit)
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	ee07 3a90 	vmov	s15, r3
 80030c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030ca:	ed97 7a04 	vldr	s14, [r7, #16]
 80030ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030d6:	dca5      	bgt.n	8003024 <gyro_calib+0x10>
        }
    }
    gx_offset = gx_offset / counter_limit;
 80030d8:	4b1c      	ldr	r3, [pc, #112]	; (800314c <gyro_calib+0x138>)
 80030da:	e9d3 4500 	ldrd	r4, r5, [r3]
 80030de:	6938      	ldr	r0, [r7, #16]
 80030e0:	f7fd fa32 	bl	8000548 <__aeabi_f2d>
 80030e4:	4602      	mov	r2, r0
 80030e6:	460b      	mov	r3, r1
 80030e8:	4620      	mov	r0, r4
 80030ea:	4629      	mov	r1, r5
 80030ec:	f7fd fbae 	bl	800084c <__aeabi_ddiv>
 80030f0:	4602      	mov	r2, r0
 80030f2:	460b      	mov	r3, r1
 80030f4:	4915      	ldr	r1, [pc, #84]	; (800314c <gyro_calib+0x138>)
 80030f6:	e9c1 2300 	strd	r2, r3, [r1]
    gy_offset = gy_offset / counter_limit;
 80030fa:	4b15      	ldr	r3, [pc, #84]	; (8003150 <gyro_calib+0x13c>)
 80030fc:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003100:	6938      	ldr	r0, [r7, #16]
 8003102:	f7fd fa21 	bl	8000548 <__aeabi_f2d>
 8003106:	4602      	mov	r2, r0
 8003108:	460b      	mov	r3, r1
 800310a:	4620      	mov	r0, r4
 800310c:	4629      	mov	r1, r5
 800310e:	f7fd fb9d 	bl	800084c <__aeabi_ddiv>
 8003112:	4602      	mov	r2, r0
 8003114:	460b      	mov	r3, r1
 8003116:	490e      	ldr	r1, [pc, #56]	; (8003150 <gyro_calib+0x13c>)
 8003118:	e9c1 2300 	strd	r2, r3, [r1]
    gz_offset = gz_offset / counter_limit;
 800311c:	4b0d      	ldr	r3, [pc, #52]	; (8003154 <gyro_calib+0x140>)
 800311e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003122:	6938      	ldr	r0, [r7, #16]
 8003124:	f7fd fa10 	bl	8000548 <__aeabi_f2d>
 8003128:	4602      	mov	r2, r0
 800312a:	460b      	mov	r3, r1
 800312c:	4620      	mov	r0, r4
 800312e:	4629      	mov	r1, r5
 8003130:	f7fd fb8c 	bl	800084c <__aeabi_ddiv>
 8003134:	4602      	mov	r2, r0
 8003136:	460b      	mov	r3, r1
 8003138:	4906      	ldr	r1, [pc, #24]	; (8003154 <gyro_calib+0x140>)
 800313a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800313e:	bf00      	nop
 8003140:	3718      	adds	r7, #24
 8003142:	46bd      	mov	sp, r7
 8003144:	bdb0      	pop	{r4, r5, r7, pc}
 8003146:	bf00      	nop
 8003148:	447a0000 	.word	0x447a0000
 800314c:	20000568 	.word	0x20000568
 8003150:	20000570 	.word	0x20000570
 8003154:	20000578 	.word	0x20000578

08003158 <read_accelerometer>:

static uint8_t read_accelerometer()
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
    int16_t accXD, accYD, accZD;
    float sensitivity_4g = 8192.0f;
 800315e:	f04f 438c 	mov.w	r3, #1174405120	; 0x46000000
 8003162:	60fb      	str	r3, [r7, #12]
    uint8_t read_buffer[6];

    if (i2c1_read(ADDRESS_AD0_LOW, ACCEL_XOUT_H, 6, read_buffer))
 8003164:	463b      	mov	r3, r7
 8003166:	2206      	movs	r2, #6
 8003168:	213b      	movs	r1, #59	; 0x3b
 800316a:	2068      	movs	r0, #104	; 0x68
 800316c:	f7ff f806 	bl	800217c <i2c1_read>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d03d      	beq.n	80031f2 <read_accelerometer+0x9a>
    {
        accXD = read_buffer[0] << 8 | read_buffer[1];
 8003176:	783b      	ldrb	r3, [r7, #0]
 8003178:	021b      	lsls	r3, r3, #8
 800317a:	b21a      	sxth	r2, r3
 800317c:	787b      	ldrb	r3, [r7, #1]
 800317e:	b21b      	sxth	r3, r3
 8003180:	4313      	orrs	r3, r2
 8003182:	817b      	strh	r3, [r7, #10]
        accYD = read_buffer[2] << 8 | read_buffer[3];
 8003184:	78bb      	ldrb	r3, [r7, #2]
 8003186:	021b      	lsls	r3, r3, #8
 8003188:	b21a      	sxth	r2, r3
 800318a:	78fb      	ldrb	r3, [r7, #3]
 800318c:	b21b      	sxth	r3, r3
 800318e:	4313      	orrs	r3, r2
 8003190:	813b      	strh	r3, [r7, #8]
        accZD = read_buffer[4] << 8 | read_buffer[5];
 8003192:	793b      	ldrb	r3, [r7, #4]
 8003194:	021b      	lsls	r3, r3, #8
 8003196:	b21a      	sxth	r2, r3
 8003198:	797b      	ldrb	r3, [r7, #5]
 800319a:	b21b      	sxth	r3, r3
 800319c:	4313      	orrs	r3, r2
 800319e:	80fb      	strh	r3, [r7, #6]

        // // converting MAV frame to NED frame:  acc. axis is +1g when pointing down
        // //  convert to g,-+4g -> 8192LSB/g
        imu_data.accYn = (double)(((accYD) / sensitivity_4g));
 80031a0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80031a4:	ee07 3a90 	vmov	s15, r3
 80031a8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80031ac:	ed97 7a03 	vldr	s14, [r7, #12]
 80031b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031b4:	4b11      	ldr	r3, [pc, #68]	; (80031fc <read_accelerometer+0xa4>)
 80031b6:	edc3 7a01 	vstr	s15, [r3, #4]
        imu_data.accXn = (double)(((accXD) / sensitivity_4g));
 80031ba:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80031be:	ee07 3a90 	vmov	s15, r3
 80031c2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80031c6:	ed97 7a03 	vldr	s14, [r7, #12]
 80031ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031ce:	4b0b      	ldr	r3, [pc, #44]	; (80031fc <read_accelerometer+0xa4>)
 80031d0:	edc3 7a00 	vstr	s15, [r3]
        imu_data.accZn = (double)(((accZD) / sensitivity_4g));
 80031d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031d8:	ee07 3a90 	vmov	s15, r3
 80031dc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80031e0:	ed97 7a03 	vldr	s14, [r7, #12]
 80031e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031e8:	4b04      	ldr	r3, [pc, #16]	; (80031fc <read_accelerometer+0xa4>)
 80031ea:	edc3 7a02 	vstr	s15, [r3, #8]
        return 1;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e000      	b.n	80031f4 <read_accelerometer+0x9c>
    }
    return 0;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	20000580 	.word	0x20000580

08003200 <read_gyro>:

static uint8_t read_gyro()
{
 8003200:	b5b0      	push	{r4, r5, r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0

    int16_t gyroXD, gyroYD, gyroZD;
    float sensitivity_500dps = 65.5f;
 8003206:	4b39      	ldr	r3, [pc, #228]	; (80032ec <read_gyro+0xec>)
 8003208:	60fb      	str	r3, [r7, #12]
    uint8_t read_buffer[6];
    if (i2c1_read(ADDRESS_AD0_LOW, GYRO_XOUT_H, 6, read_buffer))
 800320a:	463b      	mov	r3, r7
 800320c:	2206      	movs	r2, #6
 800320e:	2143      	movs	r1, #67	; 0x43
 8003210:	2068      	movs	r0, #104	; 0x68
 8003212:	f7fe ffb3 	bl	800217c <i2c1_read>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d061      	beq.n	80032e0 <read_gyro+0xe0>
    {
        gyroXD = read_buffer[0] << 8 | read_buffer[1];
 800321c:	783b      	ldrb	r3, [r7, #0]
 800321e:	021b      	lsls	r3, r3, #8
 8003220:	b21a      	sxth	r2, r3
 8003222:	787b      	ldrb	r3, [r7, #1]
 8003224:	b21b      	sxth	r3, r3
 8003226:	4313      	orrs	r3, r2
 8003228:	817b      	strh	r3, [r7, #10]
        gyroYD = read_buffer[2] << 8 | read_buffer[3];
 800322a:	78bb      	ldrb	r3, [r7, #2]
 800322c:	021b      	lsls	r3, r3, #8
 800322e:	b21a      	sxth	r2, r3
 8003230:	78fb      	ldrb	r3, [r7, #3]
 8003232:	b21b      	sxth	r3, r3
 8003234:	4313      	orrs	r3, r2
 8003236:	813b      	strh	r3, [r7, #8]
        gyroZD = read_buffer[4] << 8 | read_buffer[5];
 8003238:	793b      	ldrb	r3, [r7, #4]
 800323a:	021b      	lsls	r3, r3, #8
 800323c:	b21a      	sxth	r2, r3
 800323e:	797b      	ldrb	r3, [r7, #5]
 8003240:	b21b      	sxth	r3, r3
 8003242:	4313      	orrs	r3, r2
 8003244:	80fb      	strh	r3, [r7, #6]

        // convert of deg/s, +- 500dps -> 65.5
        // and converting MAV frame to NED frame
        imu_data.gyroYn = ((double)(gyroYD) / sensitivity_500dps);
 8003246:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800324a:	4618      	mov	r0, r3
 800324c:	f7fd f96a 	bl	8000524 <__aeabi_i2d>
 8003250:	4604      	mov	r4, r0
 8003252:	460d      	mov	r5, r1
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f7fd f977 	bl	8000548 <__aeabi_f2d>
 800325a:	4602      	mov	r2, r0
 800325c:	460b      	mov	r3, r1
 800325e:	4620      	mov	r0, r4
 8003260:	4629      	mov	r1, r5
 8003262:	f7fd faf3 	bl	800084c <__aeabi_ddiv>
 8003266:	4602      	mov	r2, r0
 8003268:	460b      	mov	r3, r1
 800326a:	4610      	mov	r0, r2
 800326c:	4619      	mov	r1, r3
 800326e:	f7fd fc9b 	bl	8000ba8 <__aeabi_d2f>
 8003272:	4603      	mov	r3, r0
 8003274:	4a1e      	ldr	r2, [pc, #120]	; (80032f0 <read_gyro+0xf0>)
 8003276:	6113      	str	r3, [r2, #16]
        imu_data.gyroXn = ((double)(gyroXD ) / sensitivity_500dps);
 8003278:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800327c:	4618      	mov	r0, r3
 800327e:	f7fd f951 	bl	8000524 <__aeabi_i2d>
 8003282:	4604      	mov	r4, r0
 8003284:	460d      	mov	r5, r1
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f7fd f95e 	bl	8000548 <__aeabi_f2d>
 800328c:	4602      	mov	r2, r0
 800328e:	460b      	mov	r3, r1
 8003290:	4620      	mov	r0, r4
 8003292:	4629      	mov	r1, r5
 8003294:	f7fd fada 	bl	800084c <__aeabi_ddiv>
 8003298:	4602      	mov	r2, r0
 800329a:	460b      	mov	r3, r1
 800329c:	4610      	mov	r0, r2
 800329e:	4619      	mov	r1, r3
 80032a0:	f7fd fc82 	bl	8000ba8 <__aeabi_d2f>
 80032a4:	4603      	mov	r3, r0
 80032a6:	4a12      	ldr	r2, [pc, #72]	; (80032f0 <read_gyro+0xf0>)
 80032a8:	60d3      	str	r3, [r2, #12]
        imu_data.gyroZn = ((double)(gyroZD) / sensitivity_500dps);
 80032aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7fd f938 	bl	8000524 <__aeabi_i2d>
 80032b4:	4604      	mov	r4, r0
 80032b6:	460d      	mov	r5, r1
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	f7fd f945 	bl	8000548 <__aeabi_f2d>
 80032be:	4602      	mov	r2, r0
 80032c0:	460b      	mov	r3, r1
 80032c2:	4620      	mov	r0, r4
 80032c4:	4629      	mov	r1, r5
 80032c6:	f7fd fac1 	bl	800084c <__aeabi_ddiv>
 80032ca:	4602      	mov	r2, r0
 80032cc:	460b      	mov	r3, r1
 80032ce:	4610      	mov	r0, r2
 80032d0:	4619      	mov	r1, r3
 80032d2:	f7fd fc69 	bl	8000ba8 <__aeabi_d2f>
 80032d6:	4603      	mov	r3, r0
 80032d8:	4a05      	ldr	r2, [pc, #20]	; (80032f0 <read_gyro+0xf0>)
 80032da:	6153      	str	r3, [r2, #20]
        return 1;
 80032dc:	2301      	movs	r3, #1
 80032de:	e000      	b.n	80032e2 <read_gyro+0xe2>
    }
    return 0;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bdb0      	pop	{r4, r5, r7, pc}
 80032ea:	bf00      	nop
 80032ec:	42830000 	.word	0x42830000
 80032f0:	20000580 	.word	0x20000580

080032f4 <update_mpu_imu>:

imu_t update_mpu_imu()
{
 80032f4:	b5b0      	push	{r4, r5, r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
    read_accelerometer();
 80032fc:	f7ff ff2c 	bl	8003158 <read_accelerometer>
    read_gyro();
 8003300:	f7ff ff7e 	bl	8003200 <read_gyro>
    return imu_data;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a06      	ldr	r2, [pc, #24]	; (8003320 <update_mpu_imu+0x2c>)
 8003308:	461c      	mov	r4, r3
 800330a:	4615      	mov	r5, r2
 800330c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800330e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003310:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003312:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003314:	682b      	ldr	r3, [r5, #0]
 8003316:	6023      	str	r3, [r4, #0]
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	3708      	adds	r7, #8
 800331c:	46bd      	mov	sp, r7
 800331e:	bdb0      	pop	{r4, r5, r7, pc}
 8003320:	20000580 	.word	0x20000580

08003324 <sensor_create>:
static void sensor_param_init(sensor_param_t sensor_param);
static sensor_t *self = NULL;

// constructor and destructor ============================================
sensor_t *const sensor_create(sensor_param_t sensor_param)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	ed87 0a01 	vstr	s0, [r7, #4]
	if (create_once)
 800332e:	4b0c      	ldr	r3, [pc, #48]	; (8003360 <sensor_create+0x3c>)
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00d      	beq.n	8003352 <sensor_create+0x2e>
	{
		self = (sensor_t *)malloc(sizeof(sensor_t));
 8003336:	2030      	movs	r0, #48	; 0x30
 8003338:	f005 faa2 	bl	8008880 <malloc>
 800333c:	4603      	mov	r3, r0
 800333e:	461a      	mov	r2, r3
 8003340:	4b08      	ldr	r3, [pc, #32]	; (8003364 <sensor_create+0x40>)
 8003342:	601a      	str	r2, [r3, #0]
		sensor_param_init(sensor_param);
 8003344:	ed97 0a01 	vldr	s0, [r7, #4]
 8003348:	f000 f80e 	bl	8003368 <sensor_param_init>
		create_once = false;
 800334c:	4b04      	ldr	r3, [pc, #16]	; (8003360 <sensor_create+0x3c>)
 800334e:	2200      	movs	r2, #0
 8003350:	701a      	strb	r2, [r3, #0]
	}
	return self;
 8003352:	4b04      	ldr	r3, [pc, #16]	; (8003364 <sensor_create+0x40>)
 8003354:	681b      	ldr	r3, [r3, #0]
}
 8003356:	4618      	mov	r0, r3
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	20000039 	.word	0x20000039
 8003364:	20000608 	.word	0x20000608

08003368 <sensor_param_init>:
	free(self);
}

// Private members =======================================================
static void sensor_param_init(sensor_param_t sensor_param)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	ed87 0a01 	vstr	s0, [r7, #4]
	self->sensor_param.alpha =  sensor_param.alpha;
 8003372:	4b05      	ldr	r3, [pc, #20]	; (8003388 <sensor_param_init+0x20>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800337a:	bf00      	nop
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	20000608 	.word	0x20000608

0800338c <sensor_process_data_ex>:

sensor_t sensor_process_data_ex()
{
 800338c:	b5b0      	push	{r4, r5, r7, lr}
 800338e:	b08c      	sub	sp, #48	; 0x30
 8003390:	af00      	add	r7, sp, #0
 8003392:	62f8      	str	r0, [r7, #44]	; 0x2c

	self->enc_data = enc_counts();
 8003394:	4b15      	ldr	r3, [pc, #84]	; (80033ec <sensor_process_data_ex+0x60>)
 8003396:	681c      	ldr	r4, [r3, #0]
 8003398:	f7ff f9e6 	bl	8002768 <enc_counts>
 800339c:	eeb0 7a40 	vmov.f32	s14, s0
 80033a0:	eef0 7a60 	vmov.f32	s15, s1
 80033a4:	ed84 7a00 	vstr	s14, [r4]
 80033a8:	edc4 7a01 	vstr	s15, [r4, #4]
	self->imu_data = update_mpu_imu();
 80033ac:	4b0f      	ldr	r3, [pc, #60]	; (80033ec <sensor_process_data_ex+0x60>)
 80033ae:	681c      	ldr	r4, [r3, #0]
 80033b0:	463b      	mov	r3, r7
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7ff ff9e 	bl	80032f4 <update_mpu_imu>
 80033b8:	3408      	adds	r4, #8
 80033ba:	463d      	mov	r5, r7
 80033bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033c4:	682b      	ldr	r3, [r5, #0]
 80033c6:	6023      	str	r3, [r4, #0]
	
	// char msg[100];
	// sprintf(msg, "************************Sen enc , %0.2f ,  %0.2f \n", enc_data.encoder_count_s,   imu_data.pitch_x);
	// usart2_tx(msg);

	return (*self);
 80033c8:	4b08      	ldr	r3, [pc, #32]	; (80033ec <sensor_process_data_ex+0x60>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033ce:	4614      	mov	r4, r2
 80033d0:	461d      	mov	r5, r3
 80033d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033da:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80033de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80033e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80033e4:	3730      	adds	r7, #48	; 0x30
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bdb0      	pop	{r4, r5, r7, pc}
 80033ea:	bf00      	nop
 80033ec:	20000608 	.word	0x20000608

080033f0 <sensor_ouput_data>:

sensor_t sensor_ouput_data()
{
 80033f0:	b4b0      	push	{r4, r5, r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
	return (*self);
 80033f8:	4b08      	ldr	r3, [pc, #32]	; (800341c <sensor_ouput_data+0x2c>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	4614      	mov	r4, r2
 8003400:	461d      	mov	r5, r3
 8003402:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003404:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003406:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003408:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800340a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800340e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	bcb0      	pop	{r4, r5, r7}
 800341a:	4770      	bx	lr
 800341c:	20000608 	.word	0x20000608

08003420 <telemetry_lunch_thread>:
BaseType_t telemetry_run_return_Handle;

// Public members ========================================================

BaseType_t telemetry_lunch_thread()
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af02      	add	r7, sp, #8
    if (lunch_once)
 8003426:	4b0d      	ldr	r3, [pc, #52]	; (800345c <telemetry_lunch_thread+0x3c>)
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d010      	beq.n	8003450 <telemetry_lunch_thread+0x30>
    {
        telemetry_run_return_Handle = xTaskCreate(telemetry_run, "Telemetry Activity Task",
 800342e:	4b0c      	ldr	r3, [pc, #48]	; (8003460 <telemetry_lunch_thread+0x40>)
 8003430:	9301      	str	r3, [sp, #4]
 8003432:	2302      	movs	r3, #2
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	4b0b      	ldr	r3, [pc, #44]	; (8003464 <telemetry_lunch_thread+0x44>)
 8003438:	f44f 7200 	mov.w	r2, #512	; 0x200
 800343c:	490a      	ldr	r1, [pc, #40]	; (8003468 <telemetry_lunch_thread+0x48>)
 800343e:	480b      	ldr	r0, [pc, #44]	; (800346c <telemetry_lunch_thread+0x4c>)
 8003440:	f003 facc 	bl	80069dc <xTaskCreate>
 8003444:	4603      	mov	r3, r0
 8003446:	4a0a      	ldr	r2, [pc, #40]	; (8003470 <telemetry_lunch_thread+0x50>)
 8003448:	6013      	str	r3, [r2, #0]
                                                  STACK_SIZE,
                                                  (void *)&tel, TELEMETRY_PRIORITY, &telemetry_run_Handle);
        lunch_once = false;
 800344a:	4b04      	ldr	r3, [pc, #16]	; (800345c <telemetry_lunch_thread+0x3c>)
 800344c:	2200      	movs	r2, #0
 800344e:	701a      	strb	r2, [r3, #0]
    }
    return telemetry_run_return_Handle;
 8003450:	4b07      	ldr	r3, [pc, #28]	; (8003470 <telemetry_lunch_thread+0x50>)
 8003452:	681b      	ldr	r3, [r3, #0]
}
 8003454:	4618      	mov	r0, r3
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	2000003a 	.word	0x2000003a
 8003460:	200006b8 	.word	0x200006b8
 8003464:	2000060c 	.word	0x2000060c
 8003468:	0800bd54 	.word	0x0800bd54
 800346c:	08003475 	.word	0x08003475
 8003470:	200006bc 	.word	0x200006bc

08003474 <telemetry_run>:

// Private members =======================================================
static void telemetry_run(void *const tel_ptr)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
    TickType_t xLastWakeTime;
    // Initialize the xLastWakeTime variable with the current time.
    xLastWakeTime = xTaskGetTickCount();
 800347c:	f003 feac 	bl	80071d8 <xTaskGetTickCount>
 8003480:	4603      	mov	r3, r0
 8003482:	60fb      	str	r3, [r7, #12]
    int tick_time = 100; // 10 hz
 8003484:	2364      	movs	r3, #100	; 0x64
 8003486:	617b      	str	r3, [r7, #20]

    telemetry_t *const tel = (telemetry_t *)tel_ptr;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	613b      	str	r3, [r7, #16]
    while (true)
    {
        send(tel, SENSOR, output_sensor, output_sensor_n);
 800348c:	2302      	movs	r3, #2
 800348e:	4a10      	ldr	r2, [pc, #64]	; (80034d0 <telemetry_run+0x5c>)
 8003490:	2102      	movs	r1, #2
 8003492:	6938      	ldr	r0, [r7, #16]
 8003494:	f000 f824 	bl	80034e0 <send>
        send(tel, FILTER, output_filter, output_filter_n);
 8003498:	2303      	movs	r3, #3
 800349a:	4a0e      	ldr	r2, [pc, #56]	; (80034d4 <telemetry_run+0x60>)
 800349c:	2101      	movs	r1, #1
 800349e:	6938      	ldr	r0, [r7, #16]
 80034a0:	f000 f81e 	bl	80034e0 <send>
        send(tel, CONTROLLER, output_ctrl, output_ctrl_n);
 80034a4:	2305      	movs	r3, #5
 80034a6:	4a0c      	ldr	r2, [pc, #48]	; (80034d8 <telemetry_run+0x64>)
 80034a8:	2100      	movs	r1, #0
 80034aa:	6938      	ldr	r0, [r7, #16]
 80034ac:	f000 f818 	bl	80034e0 <send>
        vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(tick_time));
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80034b6:	fb02 f303 	mul.w	r3, r2, r3
 80034ba:	4a08      	ldr	r2, [pc, #32]	; (80034dc <telemetry_run+0x68>)
 80034bc:	fba2 2303 	umull	r2, r3, r2, r3
 80034c0:	099a      	lsrs	r2, r3, #6
 80034c2:	f107 030c 	add.w	r3, r7, #12
 80034c6:	4611      	mov	r1, r2
 80034c8:	4618      	mov	r0, r3
 80034ca:	f003 fbdb 	bl	8006c84 <vTaskDelayUntil>
        send(tel, SENSOR, output_sensor, output_sensor_n);
 80034ce:	e7dd      	b.n	800348c <telemetry_run+0x18>
 80034d0:	0800bd94 	.word	0x0800bd94
 80034d4:	0800bda4 	.word	0x0800bda4
 80034d8:	0800bdbc 	.word	0x0800bdbc
 80034dc:	10624dd3 	.word	0x10624dd3

080034e0 <send>:
    }
    free(tel);
}

static void send(telemetry_t *const tel, const data_type_t input_type, const tx_t output[], const size_t output_len)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	607a      	str	r2, [r7, #4]
 80034ea:	603b      	str	r3, [r7, #0]
 80034ec:	460b      	mov	r3, r1
 80034ee:	72fb      	strb	r3, [r7, #11]
    if (telemetry_update_input_data(tel, input_type))
 80034f0:	7afb      	ldrb	r3, [r7, #11]
 80034f2:	4619      	mov	r1, r3
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f000 f853 	bl	80035a0 <telemetry_update_input_data>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d003      	beq.n	8003508 <send+0x28>
        telemetry_process_data(output, output_len);
 8003500:	6839      	ldr	r1, [r7, #0]
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f804 	bl	8003510 <telemetry_process_data>
}
 8003508:	bf00      	nop
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <telemetry_process_data>:

static void telemetry_process_data(const tx_t output[], const size_t output_len)
{
 8003510:	b590      	push	{r4, r7, lr}
 8003512:	b093      	sub	sp, #76	; 0x4c
 8003514:	af02      	add	r7, sp, #8
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]

    int i;
    for (i = 0; i < output_len; i++)
 800351a:	2300      	movs	r3, #0
 800351c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800351e:	e02d      	b.n	800357c <telemetry_process_data+0x6c>
    {
        char msg[50] = {'\0'};
 8003520:	2300      	movs	r3, #0
 8003522:	60bb      	str	r3, [r7, #8]
 8003524:	f107 030c 	add.w	r3, r7, #12
 8003528:	222e      	movs	r2, #46	; 0x2e
 800352a:	2100      	movs	r1, #0
 800352c:	4618      	mov	r0, r3
 800352e:	f005 f9c5 	bl	80088bc <memset>
        sprintf(msg, "%s:%0.2f\n", output[i].id, *(output[i].data));
 8003532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	4413      	add	r3, r2
 800353a:	685c      	ldr	r4, [r3, #4]
 800353c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	4413      	add	r3, r2
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4618      	mov	r0, r3
 800354a:	f7fc fffd 	bl	8000548 <__aeabi_f2d>
 800354e:	4602      	mov	r2, r0
 8003550:	460b      	mov	r3, r1
 8003552:	f107 0008 	add.w	r0, r7, #8
 8003556:	e9cd 2300 	strd	r2, r3, [sp]
 800355a:	4622      	mov	r2, r4
 800355c:	490e      	ldr	r1, [pc, #56]	; (8003598 <telemetry_process_data+0x88>)
 800355e:	f005 ff69 	bl	8009434 <siprintf>
        usart2_tx(msg); // direct visualization
 8003562:	f107 0308 	add.w	r3, r7, #8
 8003566:	4618      	mov	r0, r3
 8003568:	f7ff fc57 	bl	8002e1a <usart2_tx>
        usart3_tx(msg); // direct visualization
 800356c:	f107 0308 	add.w	r3, r7, #8
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff fc70 	bl	8002e56 <usart3_tx>
    for (i = 0; i < output_len; i++)
 8003576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003578:	3301      	adds	r3, #1
 800357a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800357c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	429a      	cmp	r2, r3
 8003582:	d8cd      	bhi.n	8003520 <telemetry_process_data+0x10>
    }
    usart2_tx("\n"); // direct visualization
 8003584:	4805      	ldr	r0, [pc, #20]	; (800359c <telemetry_process_data+0x8c>)
 8003586:	f7ff fc48 	bl	8002e1a <usart2_tx>
    usart3_tx("\n");
 800358a:	4804      	ldr	r0, [pc, #16]	; (800359c <telemetry_process_data+0x8c>)
 800358c:	f7ff fc63 	bl	8002e56 <usart3_tx>
}
 8003590:	bf00      	nop
 8003592:	3744      	adds	r7, #68	; 0x44
 8003594:	46bd      	mov	sp, r7
 8003596:	bd90      	pop	{r4, r7, pc}
 8003598:	0800bd6c 	.word	0x0800bd6c
 800359c:	0800bd78 	.word	0x0800bd78

080035a0 <telemetry_update_input_data>:

static bool telemetry_update_input_data(telemetry_t *const tel, const data_type_t input_type)
{
 80035a0:	b5b0      	push	{r4, r5, r7, lr}
 80035a2:	b090      	sub	sp, #64	; 0x40
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	63f8      	str	r0, [r7, #60]	; 0x3c
 80035a8:	460b      	mov	r3, r1
 80035aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    switch (input_type)
 80035ae:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d021      	beq.n	80035fa <telemetry_update_input_data+0x5a>
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	dc30      	bgt.n	800361c <telemetry_update_input_data+0x7c>
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <telemetry_update_input_data+0x24>
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d00a      	beq.n	80035d8 <telemetry_update_input_data+0x38>
    case SENSOR:
        tel->sensor = sensor_ouput_data();
        return true;
        break;
    default:
        break;
 80035c2:	e02b      	b.n	800361c <telemetry_update_input_data+0x7c>
        xQueueReceive(controller_telemetry_q, &(tel->ctrl), (TickType_t)0);
 80035c4:	4b18      	ldr	r3, [pc, #96]	; (8003628 <telemetry_update_input_data+0x88>)
 80035c6:	6818      	ldr	r0, [r3, #0]
 80035c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035ca:	3364      	adds	r3, #100	; 0x64
 80035cc:	2200      	movs	r2, #0
 80035ce:	4619      	mov	r1, r3
 80035d0:	f002 ff5a 	bl	8006488 <xQueueReceive>
        return true;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e023      	b.n	8003620 <telemetry_update_input_data+0x80>
        tel->filter = filter_output_data();
 80035d8:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 80035da:	463b      	mov	r3, r7
 80035dc:	4618      	mov	r0, r3
 80035de:	f7fe fadb 	bl	8001b98 <filter_output_data>
 80035e2:	3430      	adds	r4, #48	; 0x30
 80035e4:	463d      	mov	r5, r7
 80035e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035f2:	682b      	ldr	r3, [r5, #0]
 80035f4:	6023      	str	r3, [r4, #0]
        return true;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e012      	b.n	8003620 <telemetry_update_input_data+0x80>
        tel->sensor = sensor_ouput_data();
 80035fa:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 80035fc:	463b      	mov	r3, r7
 80035fe:	4618      	mov	r0, r3
 8003600:	f7ff fef6 	bl	80033f0 <sensor_ouput_data>
 8003604:	4625      	mov	r5, r4
 8003606:	463c      	mov	r4, r7
 8003608:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800360a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800360c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800360e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003610:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003614:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
        return true;
 8003618:	2301      	movs	r3, #1
 800361a:	e001      	b.n	8003620 <telemetry_update_input_data+0x80>
        break;
 800361c:	bf00      	nop
    }
    return false;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3740      	adds	r7, #64	; 0x40
 8003624:	46bd      	mov	sp, r7
 8003626:	bdb0      	pop	{r4, r5, r7, pc}
 8003628:	200003dc 	.word	0x200003dc

0800362c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003632:	4b0f      	ldr	r3, [pc, #60]	; (8003670 <HAL_MspInit+0x44>)
 8003634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003636:	4a0e      	ldr	r2, [pc, #56]	; (8003670 <HAL_MspInit+0x44>)
 8003638:	f043 0301 	orr.w	r3, r3, #1
 800363c:	6613      	str	r3, [r2, #96]	; 0x60
 800363e:	4b0c      	ldr	r3, [pc, #48]	; (8003670 <HAL_MspInit+0x44>)
 8003640:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	607b      	str	r3, [r7, #4]
 8003648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800364a:	4b09      	ldr	r3, [pc, #36]	; (8003670 <HAL_MspInit+0x44>)
 800364c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800364e:	4a08      	ldr	r2, [pc, #32]	; (8003670 <HAL_MspInit+0x44>)
 8003650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003654:	6593      	str	r3, [r2, #88]	; 0x58
 8003656:	4b06      	ldr	r3, [pc, #24]	; (8003670 <HAL_MspInit+0x44>)
 8003658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800365a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800365e:	603b      	str	r3, [r7, #0]
 8003660:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003662:	bf00      	nop
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	40021000 	.word	0x40021000

08003674 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b08c      	sub	sp, #48	; 0x30
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800367c:	2300      	movs	r3, #0
 800367e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003680:	2300      	movs	r3, #0
 8003682:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8003684:	2200      	movs	r2, #0
 8003686:	6879      	ldr	r1, [r7, #4]
 8003688:	2037      	movs	r0, #55	; 0x37
 800368a:	f001 f9c3 	bl	8004a14 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800368e:	2037      	movs	r0, #55	; 0x37
 8003690:	f001 f9dc 	bl	8004a4c <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8003694:	4b1f      	ldr	r3, [pc, #124]	; (8003714 <HAL_InitTick+0xa0>)
 8003696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003698:	4a1e      	ldr	r2, [pc, #120]	; (8003714 <HAL_InitTick+0xa0>)
 800369a:	f043 0320 	orr.w	r3, r3, #32
 800369e:	6593      	str	r3, [r2, #88]	; 0x58
 80036a0:	4b1c      	ldr	r3, [pc, #112]	; (8003714 <HAL_InitTick+0xa0>)
 80036a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a4:	f003 0320 	and.w	r3, r3, #32
 80036a8:	60fb      	str	r3, [r7, #12]
 80036aa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80036ac:	f107 0210 	add.w	r2, r7, #16
 80036b0:	f107 0314 	add.w	r3, r7, #20
 80036b4:	4611      	mov	r1, r2
 80036b6:	4618      	mov	r0, r3
 80036b8:	f001 ffc4 	bl	8005644 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80036bc:	f001 ffac 	bl	8005618 <HAL_RCC_GetPCLK1Freq>
 80036c0:	4603      	mov	r3, r0
 80036c2:	005b      	lsls	r3, r3, #1
 80036c4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80036c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c8:	4a13      	ldr	r2, [pc, #76]	; (8003718 <HAL_InitTick+0xa4>)
 80036ca:	fba2 2303 	umull	r2, r3, r2, r3
 80036ce:	0c9b      	lsrs	r3, r3, #18
 80036d0:	3b01      	subs	r3, #1
 80036d2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80036d4:	4b11      	ldr	r3, [pc, #68]	; (800371c <HAL_InitTick+0xa8>)
 80036d6:	4a12      	ldr	r2, [pc, #72]	; (8003720 <HAL_InitTick+0xac>)
 80036d8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 80036da:	4b10      	ldr	r3, [pc, #64]	; (800371c <HAL_InitTick+0xa8>)
 80036dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80036e0:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80036e2:	4a0e      	ldr	r2, [pc, #56]	; (800371c <HAL_InitTick+0xa8>)
 80036e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e6:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80036e8:	4b0c      	ldr	r3, [pc, #48]	; (800371c <HAL_InitTick+0xa8>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036ee:	4b0b      	ldr	r3, [pc, #44]	; (800371c <HAL_InitTick+0xa8>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 80036f4:	4809      	ldr	r0, [pc, #36]	; (800371c <HAL_InitTick+0xa8>)
 80036f6:	f002 f837 	bl	8005768 <HAL_TIM_Base_Init>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d104      	bne.n	800370a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8003700:	4806      	ldr	r0, [pc, #24]	; (800371c <HAL_InitTick+0xa8>)
 8003702:	f002 f893 	bl	800582c <HAL_TIM_Base_Start_IT>
 8003706:	4603      	mov	r3, r0
 8003708:	e000      	b.n	800370c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
}
 800370c:	4618      	mov	r0, r3
 800370e:	3730      	adds	r7, #48	; 0x30
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	40021000 	.word	0x40021000
 8003718:	431bde83 	.word	0x431bde83
 800371c:	200006c0 	.word	0x200006c0
 8003720:	40001400 	.word	0x40001400

08003724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003728:	e7fe      	b.n	8003728 <NMI_Handler+0x4>

0800372a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800372a:	b480      	push	{r7}
 800372c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800372e:	e7fe      	b.n	800372e <HardFault_Handler+0x4>

08003730 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003734:	e7fe      	b.n	8003734 <MemManage_Handler+0x4>

08003736 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003736:	b480      	push	{r7}
 8003738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800373a:	e7fe      	b.n	800373a <BusFault_Handler+0x4>

0800373c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003740:	e7fe      	b.n	8003740 <UsageFault_Handler+0x4>

08003742 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003742:	b480      	push	{r7}
 8003744:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003746:	bf00      	nop
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003754:	4802      	ldr	r0, [pc, #8]	; (8003760 <TIM7_IRQHandler+0x10>)
 8003756:	f002 f8d9 	bl	800590c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800375a:	bf00      	nop
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	200006c0 	.word	0x200006c0

08003764 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  return 1;
 8003768:	2301      	movs	r3, #1
}
 800376a:	4618      	mov	r0, r3
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <_kill>:

int _kill(int pid, int sig)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800377e:	f004 ff5b 	bl	8008638 <__errno>
 8003782:	4603      	mov	r3, r0
 8003784:	2216      	movs	r2, #22
 8003786:	601a      	str	r2, [r3, #0]
  return -1;
 8003788:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800378c:	4618      	mov	r0, r3
 800378e:	3708      	adds	r7, #8
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <_exit>:

void _exit (int status)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800379c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f7ff ffe7 	bl	8003774 <_kill>
  while (1) {}    /* Make sure we hang here */
 80037a6:	e7fe      	b.n	80037a6 <_exit+0x12>

080037a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037b4:	2300      	movs	r3, #0
 80037b6:	617b      	str	r3, [r7, #20]
 80037b8:	e00a      	b.n	80037d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80037ba:	f3af 8000 	nop.w
 80037be:	4601      	mov	r1, r0
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	1c5a      	adds	r2, r3, #1
 80037c4:	60ba      	str	r2, [r7, #8]
 80037c6:	b2ca      	uxtb	r2, r1
 80037c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	3301      	adds	r3, #1
 80037ce:	617b      	str	r3, [r7, #20]
 80037d0:	697a      	ldr	r2, [r7, #20]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	dbf0      	blt.n	80037ba <_read+0x12>
  }

  return len;
 80037d8:	687b      	ldr	r3, [r7, #4]
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3718      	adds	r7, #24
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b086      	sub	sp, #24
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	60f8      	str	r0, [r7, #12]
 80037ea:	60b9      	str	r1, [r7, #8]
 80037ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037ee:	2300      	movs	r3, #0
 80037f0:	617b      	str	r3, [r7, #20]
 80037f2:	e009      	b.n	8003808 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	1c5a      	adds	r2, r3, #1
 80037f8:	60ba      	str	r2, [r7, #8]
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	3301      	adds	r3, #1
 8003806:	617b      	str	r3, [r7, #20]
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	429a      	cmp	r2, r3
 800380e:	dbf1      	blt.n	80037f4 <_write+0x12>
  }
  return len;
 8003810:	687b      	ldr	r3, [r7, #4]
}
 8003812:	4618      	mov	r0, r3
 8003814:	3718      	adds	r7, #24
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <_close>:

int _close(int file)
{
 800381a:	b480      	push	{r7}
 800381c:	b083      	sub	sp, #12
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003822:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003826:	4618      	mov	r0, r3
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr

08003832 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003832:	b480      	push	{r7}
 8003834:	b083      	sub	sp, #12
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
 800383a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003842:	605a      	str	r2, [r3, #4]
  return 0;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr

08003852 <_isatty>:

int _isatty(int file)
{
 8003852:	b480      	push	{r7}
 8003854:	b083      	sub	sp, #12
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800385a:	2301      	movs	r3, #1
}
 800385c:	4618      	mov	r0, r3
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3714      	adds	r7, #20
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
	...

08003884 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003888:	4b06      	ldr	r3, [pc, #24]	; (80038a4 <SystemInit+0x20>)
 800388a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800388e:	4a05      	ldr	r2, [pc, #20]	; (80038a4 <SystemInit+0x20>)
 8003890:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003894:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003898:	bf00      	nop
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	e000ed00 	.word	0xe000ed00

080038a8 <TIM_CCMR1_w>:
	{.bytes = &TIM1->CCMR1},
	{.bytes = &TIM2->CCMR1},
	{.bytes = &TIM3->CCMR1},
};
void TIM_CCMR1_w(uint8_t TIM_ON, uint8_t field, uint8_t set, uint8_t mode)
{
 80038a8:	b490      	push	{r4, r7}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	4604      	mov	r4, r0
 80038b0:	4608      	mov	r0, r1
 80038b2:	4611      	mov	r1, r2
 80038b4:	461a      	mov	r2, r3
 80038b6:	4623      	mov	r3, r4
 80038b8:	71fb      	strb	r3, [r7, #7]
 80038ba:	4603      	mov	r3, r0
 80038bc:	71bb      	strb	r3, [r7, #6]
 80038be:	460b      	mov	r3, r1
 80038c0:	717b      	strb	r3, [r7, #5]
 80038c2:	4613      	mov	r3, r2
 80038c4:	713b      	strb	r3, [r7, #4]
	if (mode)
 80038c6:	793b      	ldrb	r3, [r7, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f000 80bb 	beq.w	8003a44 <TIM_CCMR1_w+0x19c>
	{
		switch (field)
 80038ce:	79bb      	ldrb	r3, [r7, #6]
 80038d0:	2b0b      	cmp	r3, #11
 80038d2:	f200 80ff 	bhi.w	8003ad4 <TIM_CCMR1_w+0x22c>
 80038d6:	a201      	add	r2, pc, #4	; (adr r2, 80038dc <TIM_CCMR1_w+0x34>)
 80038d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038dc:	0800390d 	.word	0x0800390d
 80038e0:	08003927 	.word	0x08003927
 80038e4:	08003941 	.word	0x08003941
 80038e8:	0800395b 	.word	0x0800395b
 80038ec:	08003975 	.word	0x08003975
 80038f0:	0800398f 	.word	0x0800398f
 80038f4:	080039a9 	.word	0x080039a9
 80038f8:	080039c3 	.word	0x080039c3
 80038fc:	080039dd 	.word	0x080039dd
 8003900:	080039f7 	.word	0x080039f7
 8003904:	08003a11 	.word	0x08003a11
 8003908:	08003a2b 	.word	0x08003a2b
		{
		case CC1S:
			TIM_CCMR1[TIM_ON].CCMR1->CC1S = set;
 800390c:	79fb      	ldrb	r3, [r7, #7]
 800390e:	4a74      	ldr	r2, [pc, #464]	; (8003ae0 <TIM_CCMR1_w+0x238>)
 8003910:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003914:	797b      	ldrb	r3, [r7, #5]
 8003916:	f003 0303 	and.w	r3, r3, #3
 800391a:	b2d9      	uxtb	r1, r3
 800391c:	7813      	ldrb	r3, [r2, #0]
 800391e:	f361 0301 	bfi	r3, r1, #0, #2
 8003922:	7013      	strb	r3, [r2, #0]
			break;
 8003924:	e0d6      	b.n	8003ad4 <TIM_CCMR1_w+0x22c>
		case OC1FE:
			TIM_CCMR1[TIM_ON].CCMR1->OC1FE = set;
 8003926:	79fb      	ldrb	r3, [r7, #7]
 8003928:	4a6d      	ldr	r2, [pc, #436]	; (8003ae0 <TIM_CCMR1_w+0x238>)
 800392a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800392e:	797b      	ldrb	r3, [r7, #5]
 8003930:	f003 0301 	and.w	r3, r3, #1
 8003934:	b2d9      	uxtb	r1, r3
 8003936:	7813      	ldrb	r3, [r2, #0]
 8003938:	f361 0382 	bfi	r3, r1, #2, #1
 800393c:	7013      	strb	r3, [r2, #0]
			break;
 800393e:	e0c9      	b.n	8003ad4 <TIM_CCMR1_w+0x22c>
		case OC1PE:
			TIM_CCMR1[TIM_ON].CCMR1->OC1PE = set;
 8003940:	79fb      	ldrb	r3, [r7, #7]
 8003942:	4a67      	ldr	r2, [pc, #412]	; (8003ae0 <TIM_CCMR1_w+0x238>)
 8003944:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003948:	797b      	ldrb	r3, [r7, #5]
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	b2d9      	uxtb	r1, r3
 8003950:	7813      	ldrb	r3, [r2, #0]
 8003952:	f361 03c3 	bfi	r3, r1, #3, #1
 8003956:	7013      	strb	r3, [r2, #0]
			break;
 8003958:	e0bc      	b.n	8003ad4 <TIM_CCMR1_w+0x22c>
		case OC1M:
			TIM_CCMR1[TIM_ON].CCMR1->OC1M = set;
 800395a:	79fb      	ldrb	r3, [r7, #7]
 800395c:	4a60      	ldr	r2, [pc, #384]	; (8003ae0 <TIM_CCMR1_w+0x238>)
 800395e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003962:	797b      	ldrb	r3, [r7, #5]
 8003964:	f003 0307 	and.w	r3, r3, #7
 8003968:	b2d9      	uxtb	r1, r3
 800396a:	7813      	ldrb	r3, [r2, #0]
 800396c:	f361 1306 	bfi	r3, r1, #4, #3
 8003970:	7013      	strb	r3, [r2, #0]
			break;
 8003972:	e0af      	b.n	8003ad4 <TIM_CCMR1_w+0x22c>
		case OC1CE:
			TIM_CCMR1[TIM_ON].CCMR1->OC1CE = set;
 8003974:	79fb      	ldrb	r3, [r7, #7]
 8003976:	4a5a      	ldr	r2, [pc, #360]	; (8003ae0 <TIM_CCMR1_w+0x238>)
 8003978:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800397c:	797b      	ldrb	r3, [r7, #5]
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	b2d9      	uxtb	r1, r3
 8003984:	7813      	ldrb	r3, [r2, #0]
 8003986:	f361 13c7 	bfi	r3, r1, #7, #1
 800398a:	7013      	strb	r3, [r2, #0]
			break;
 800398c:	e0a2      	b.n	8003ad4 <TIM_CCMR1_w+0x22c>
		case CC2S:
			TIM_CCMR1[TIM_ON].CCMR1->CC2S = set;
 800398e:	79fb      	ldrb	r3, [r7, #7]
 8003990:	4a53      	ldr	r2, [pc, #332]	; (8003ae0 <TIM_CCMR1_w+0x238>)
 8003992:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003996:	797b      	ldrb	r3, [r7, #5]
 8003998:	f003 0303 	and.w	r3, r3, #3
 800399c:	b2d9      	uxtb	r1, r3
 800399e:	7853      	ldrb	r3, [r2, #1]
 80039a0:	f361 0301 	bfi	r3, r1, #0, #2
 80039a4:	7053      	strb	r3, [r2, #1]
			break;
 80039a6:	e095      	b.n	8003ad4 <TIM_CCMR1_w+0x22c>
		case OC2FE:
			TIM_CCMR1[TIM_ON].CCMR1->OC2FE = set;
 80039a8:	79fb      	ldrb	r3, [r7, #7]
 80039aa:	4a4d      	ldr	r2, [pc, #308]	; (8003ae0 <TIM_CCMR1_w+0x238>)
 80039ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80039b0:	797b      	ldrb	r3, [r7, #5]
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	b2d9      	uxtb	r1, r3
 80039b8:	7853      	ldrb	r3, [r2, #1]
 80039ba:	f361 0382 	bfi	r3, r1, #2, #1
 80039be:	7053      	strb	r3, [r2, #1]
			break;
 80039c0:	e088      	b.n	8003ad4 <TIM_CCMR1_w+0x22c>
		case OC2PE:
			TIM_CCMR1[TIM_ON].CCMR1->OC2PE = set;
 80039c2:	79fb      	ldrb	r3, [r7, #7]
 80039c4:	4a46      	ldr	r2, [pc, #280]	; (8003ae0 <TIM_CCMR1_w+0x238>)
 80039c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80039ca:	797b      	ldrb	r3, [r7, #5]
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	b2d9      	uxtb	r1, r3
 80039d2:	7853      	ldrb	r3, [r2, #1]
 80039d4:	f361 03c3 	bfi	r3, r1, #3, #1
 80039d8:	7053      	strb	r3, [r2, #1]
			break;
 80039da:	e07b      	b.n	8003ad4 <TIM_CCMR1_w+0x22c>
		case OC2M:
			TIM_CCMR1[TIM_ON].CCMR1->OC2M = set;
 80039dc:	79fb      	ldrb	r3, [r7, #7]
 80039de:	4a40      	ldr	r2, [pc, #256]	; (8003ae0 <TIM_CCMR1_w+0x238>)
 80039e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80039e4:	797b      	ldrb	r3, [r7, #5]
 80039e6:	f003 0307 	and.w	r3, r3, #7
 80039ea:	b2d9      	uxtb	r1, r3
 80039ec:	7853      	ldrb	r3, [r2, #1]
 80039ee:	f361 1306 	bfi	r3, r1, #4, #3
 80039f2:	7053      	strb	r3, [r2, #1]
			break;
 80039f4:	e06e      	b.n	8003ad4 <TIM_CCMR1_w+0x22c>
		case OC2CE:
			TIM_CCMR1[TIM_ON].CCMR1->OC2CE = set;
 80039f6:	79fb      	ldrb	r3, [r7, #7]
 80039f8:	4a39      	ldr	r2, [pc, #228]	; (8003ae0 <TIM_CCMR1_w+0x238>)
 80039fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80039fe:	797b      	ldrb	r3, [r7, #5]
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	b2d9      	uxtb	r1, r3
 8003a06:	7853      	ldrb	r3, [r2, #1]
 8003a08:	f361 13c7 	bfi	r3, r1, #7, #1
 8003a0c:	7053      	strb	r3, [r2, #1]
			break;
 8003a0e:	e061      	b.n	8003ad4 <TIM_CCMR1_w+0x22c>
		case OC1M3:
			TIM_CCMR1[TIM_ON].CCMR1->OC1M3 = set;
 8003a10:	79fb      	ldrb	r3, [r7, #7]
 8003a12:	4a33      	ldr	r2, [pc, #204]	; (8003ae0 <TIM_CCMR1_w+0x238>)
 8003a14:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003a18:	797b      	ldrb	r3, [r7, #5]
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	b2d9      	uxtb	r1, r3
 8003a20:	7893      	ldrb	r3, [r2, #2]
 8003a22:	f361 0300 	bfi	r3, r1, #0, #1
 8003a26:	7093      	strb	r3, [r2, #2]
			break;
 8003a28:	e054      	b.n	8003ad4 <TIM_CCMR1_w+0x22c>
		case OC2M3:
			TIM_CCMR1[TIM_ON].CCMR1->OC2M3 = set;
 8003a2a:	79fb      	ldrb	r3, [r7, #7]
 8003a2c:	4a2c      	ldr	r2, [pc, #176]	; (8003ae0 <TIM_CCMR1_w+0x238>)
 8003a2e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003a32:	797b      	ldrb	r3, [r7, #5]
 8003a34:	f003 0301 	and.w	r3, r3, #1
 8003a38:	b2d9      	uxtb	r1, r3
 8003a3a:	78d3      	ldrb	r3, [r2, #3]
 8003a3c:	f361 0300 	bfi	r3, r1, #0, #1
 8003a40:	70d3      	strb	r3, [r2, #3]
			break;
 8003a42:	e047      	b.n	8003ad4 <TIM_CCMR1_w+0x22c>
		}
	}
	else
	{

		switch (field)
 8003a44:	79bb      	ldrb	r3, [r7, #6]
 8003a46:	2b06      	cmp	r3, #6
 8003a48:	d844      	bhi.n	8003ad4 <TIM_CCMR1_w+0x22c>
 8003a4a:	a201      	add	r2, pc, #4	; (adr r2, 8003a50 <TIM_CCMR1_w+0x1a8>)
 8003a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a50:	08003a6d 	.word	0x08003a6d
 8003a54:	08003ad5 	.word	0x08003ad5
 8003a58:	08003ad5 	.word	0x08003ad5
 8003a5c:	08003a87 	.word	0x08003a87
 8003a60:	08003aa1 	.word	0x08003aa1
 8003a64:	08003ad5 	.word	0x08003ad5
 8003a68:	08003abb 	.word	0x08003abb
		{
		case CC1S:
			TIM_CCMR1[TIM_ON].CCMR1->CC1S = set;
 8003a6c:	79fb      	ldrb	r3, [r7, #7]
 8003a6e:	4a1c      	ldr	r2, [pc, #112]	; (8003ae0 <TIM_CCMR1_w+0x238>)
 8003a70:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003a74:	797b      	ldrb	r3, [r7, #5]
 8003a76:	f003 0303 	and.w	r3, r3, #3
 8003a7a:	b2d9      	uxtb	r1, r3
 8003a7c:	7813      	ldrb	r3, [r2, #0]
 8003a7e:	f361 0301 	bfi	r3, r1, #0, #2
 8003a82:	7013      	strb	r3, [r2, #0]
			break;
 8003a84:	e026      	b.n	8003ad4 <TIM_CCMR1_w+0x22c>
		case IC1F:
			// OC1M  same address as IC1F, but redo this properly
			TIM_CCMR1[TIM_ON].CCMR1->OC1M = set;
 8003a86:	79fb      	ldrb	r3, [r7, #7]
 8003a88:	4a15      	ldr	r2, [pc, #84]	; (8003ae0 <TIM_CCMR1_w+0x238>)
 8003a8a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003a8e:	797b      	ldrb	r3, [r7, #5]
 8003a90:	f003 0307 	and.w	r3, r3, #7
 8003a94:	b2d9      	uxtb	r1, r3
 8003a96:	7813      	ldrb	r3, [r2, #0]
 8003a98:	f361 1306 	bfi	r3, r1, #4, #3
 8003a9c:	7013      	strb	r3, [r2, #0]
			break;
 8003a9e:	e019      	b.n	8003ad4 <TIM_CCMR1_w+0x22c>
		case CC2S_in:
			TIM_CCMR1[TIM_ON].CCMR1->CC2S = set;
 8003aa0:	79fb      	ldrb	r3, [r7, #7]
 8003aa2:	4a0f      	ldr	r2, [pc, #60]	; (8003ae0 <TIM_CCMR1_w+0x238>)
 8003aa4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003aa8:	797b      	ldrb	r3, [r7, #5]
 8003aaa:	f003 0303 	and.w	r3, r3, #3
 8003aae:	b2d9      	uxtb	r1, r3
 8003ab0:	7853      	ldrb	r3, [r2, #1]
 8003ab2:	f361 0301 	bfi	r3, r1, #0, #2
 8003ab6:	7053      	strb	r3, [r2, #1]
			break;
 8003ab8:	e00c      	b.n	8003ad4 <TIM_CCMR1_w+0x22c>
		case IC2F:
			// OC2M  same address as IC2F, but redo this properly
			TIM_CCMR1[TIM_ON].CCMR1->OC2M = set;
 8003aba:	79fb      	ldrb	r3, [r7, #7]
 8003abc:	4a08      	ldr	r2, [pc, #32]	; (8003ae0 <TIM_CCMR1_w+0x238>)
 8003abe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003ac2:	797b      	ldrb	r3, [r7, #5]
 8003ac4:	f003 0307 	and.w	r3, r3, #7
 8003ac8:	b2d9      	uxtb	r1, r3
 8003aca:	7853      	ldrb	r3, [r2, #1]
 8003acc:	f361 1306 	bfi	r3, r1, #4, #3
 8003ad0:	7053      	strb	r3, [r2, #1]
			break;
 8003ad2:	bf00      	nop
		}
	}
}
 8003ad4:	bf00      	nop
 8003ad6:	3708      	adds	r7, #8
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bc90      	pop	{r4, r7}
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	200001d0 	.word	0x200001d0

08003ae4 <TIM_CCER_w>:
void TIM_BDTR_w(uint8_t TIM_ON, uint8_t field, uint16_t set)
{
	*TIM_BDTR[TIM_ON].bytes = (uint16_t)((*TIM_BDTR[TIM_ON].bytes & ~(1 << field)) | (set << field));
}
void TIM_CCER_w(uint8_t TIM_ON, uint8_t field, uint16_t set)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	4603      	mov	r3, r0
 8003aec:	71fb      	strb	r3, [r7, #7]
 8003aee:	460b      	mov	r3, r1
 8003af0:	71bb      	strb	r3, [r7, #6]
 8003af2:	4613      	mov	r3, r2
 8003af4:	80bb      	strh	r3, [r7, #4]
	*TIM_CCER[TIM_ON].bytes = (uint16_t)((*TIM_CCER[TIM_ON].bytes & ~(1 << field)) | (set << field));
 8003af6:	79fb      	ldrb	r3, [r7, #7]
 8003af8:	4a10      	ldr	r2, [pc, #64]	; (8003b3c <TIM_CCER_w+0x58>)
 8003afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	79bb      	ldrb	r3, [r7, #6]
 8003b04:	2101      	movs	r1, #1
 8003b06:	fa01 f303 	lsl.w	r3, r1, r3
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	43db      	mvns	r3, r3
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	4013      	ands	r3, r2
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	88b9      	ldrh	r1, [r7, #4]
 8003b16:	79bb      	ldrb	r3, [r7, #6]
 8003b18:	fa01 f303 	lsl.w	r3, r1, r3
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	b299      	uxth	r1, r3
 8003b22:	79fb      	ldrb	r3, [r7, #7]
 8003b24:	4a05      	ldr	r2, [pc, #20]	; (8003b3c <TIM_CCER_w+0x58>)
 8003b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b2a:	460a      	mov	r2, r1
 8003b2c:	601a      	str	r2, [r3, #0]
}
 8003b2e:	bf00      	nop
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	200001c4 	.word	0x200001c4

08003b40 <TIM_ARR_w>:
void TIM_ARR_w(uint8_t TIM_ON, uint8_t field, uint32_t set)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	4603      	mov	r3, r0
 8003b48:	603a      	str	r2, [r7, #0]
 8003b4a:	71fb      	strb	r3, [r7, #7]
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	71bb      	strb	r3, [r7, #6]
	for (int i = field; i < 32; i++)
 8003b50:	79bb      	ldrb	r3, [r7, #6]
 8003b52:	60fb      	str	r3, [r7, #12]
 8003b54:	e025      	b.n	8003ba2 <TIM_ARR_w+0x62>
	{
		*TIM_ARR[TIM_ON].bytes = (uint16_t)((*TIM_ARR[TIM_ON].bytes & ~(1 << i)) | ((set << field) & (1 << i)));
 8003b56:	79fb      	ldrb	r3, [r7, #7]
 8003b58:	4a17      	ldr	r2, [pc, #92]	; (8003bb8 <TIM_ARR_w+0x78>)
 8003b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	2101      	movs	r1, #1
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	fa01 f303 	lsl.w	r3, r1, r3
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	43db      	mvns	r3, r3
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	4013      	ands	r3, r2
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	79bb      	ldrb	r3, [r7, #6]
 8003b76:	6839      	ldr	r1, [r7, #0]
 8003b78:	fa01 f303 	lsl.w	r3, r1, r3
 8003b7c:	b299      	uxth	r1, r3
 8003b7e:	2001      	movs	r0, #1
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	fa00 f303 	lsl.w	r3, r0, r3
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	400b      	ands	r3, r1
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	b299      	uxth	r1, r3
 8003b90:	79fb      	ldrb	r3, [r7, #7]
 8003b92:	4a09      	ldr	r2, [pc, #36]	; (8003bb8 <TIM_ARR_w+0x78>)
 8003b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b98:	460a      	mov	r2, r1
 8003b9a:	601a      	str	r2, [r3, #0]
	for (int i = field; i < 32; i++)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	60fb      	str	r3, [r7, #12]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2b1f      	cmp	r3, #31
 8003ba6:	ddd6      	ble.n	8003b56 <TIM_ARR_w+0x16>
	}
}
 8003ba8:	bf00      	nop
 8003baa:	bf00      	nop
 8003bac:	3714      	adds	r7, #20
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	200001b8 	.word	0x200001b8

08003bbc <TIM_PSC_w>:
void TIM_PSC_w(uint8_t TIM_ON, uint8_t field, uint16_t set)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	71fb      	strb	r3, [r7, #7]
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	71bb      	strb	r3, [r7, #6]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	80bb      	strh	r3, [r7, #4]
	for (int i = field; i < 16; i++)
 8003bce:	79bb      	ldrb	r3, [r7, #6]
 8003bd0:	60fb      	str	r3, [r7, #12]
 8003bd2:	e026      	b.n	8003c22 <TIM_PSC_w+0x66>
	{
		*TIM_PSC[TIM_ON].bytes = (uint16_t)((*TIM_PSC[TIM_ON].bytes & ~(1 << i)) | ((set << field) & (1 << i)));
 8003bd4:	79fb      	ldrb	r3, [r7, #7]
 8003bd6:	4a18      	ldr	r2, [pc, #96]	; (8003c38 <TIM_PSC_w+0x7c>)
 8003bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	2101      	movs	r1, #1
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	fa01 f303 	lsl.w	r3, r1, r3
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	43db      	mvns	r3, r3
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	4013      	ands	r3, r2
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	88b9      	ldrh	r1, [r7, #4]
 8003bf4:	79bb      	ldrb	r3, [r7, #6]
 8003bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bfa:	b219      	sxth	r1, r3
 8003bfc:	2001      	movs	r0, #1
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	fa00 f303 	lsl.w	r3, r0, r3
 8003c04:	b21b      	sxth	r3, r3
 8003c06:	400b      	ands	r3, r1
 8003c08:	b21b      	sxth	r3, r3
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	b299      	uxth	r1, r3
 8003c10:	79fb      	ldrb	r3, [r7, #7]
 8003c12:	4a09      	ldr	r2, [pc, #36]	; (8003c38 <TIM_PSC_w+0x7c>)
 8003c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c18:	460a      	mov	r2, r1
 8003c1a:	601a      	str	r2, [r3, #0]
	for (int i = field; i < 16; i++)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	3301      	adds	r3, #1
 8003c20:	60fb      	str	r3, [r7, #12]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2b0f      	cmp	r3, #15
 8003c26:	ddd5      	ble.n	8003bd4 <TIM_PSC_w+0x18>
	}
}
 8003c28:	bf00      	nop
 8003c2a:	bf00      	nop
 8003c2c:	3714      	adds	r7, #20
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	200001ac 	.word	0x200001ac

08003c3c <TIM_EGR_w>:
void TIM_EGR_w(uint8_t TIM_ON, uint8_t field, uint16_t set)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	4603      	mov	r3, r0
 8003c44:	71fb      	strb	r3, [r7, #7]
 8003c46:	460b      	mov	r3, r1
 8003c48:	71bb      	strb	r3, [r7, #6]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	80bb      	strh	r3, [r7, #4]
	*TIM_EGR[TIM_ON].bytes = (uint16_t)((*TIM_EGR[TIM_ON].bytes & ~(1 << field)) | (set << field));
 8003c4e:	79fb      	ldrb	r3, [r7, #7]
 8003c50:	4a10      	ldr	r2, [pc, #64]	; (8003c94 <TIM_EGR_w+0x58>)
 8003c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	79bb      	ldrb	r3, [r7, #6]
 8003c5c:	2101      	movs	r1, #1
 8003c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	43db      	mvns	r3, r3
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	4013      	ands	r3, r2
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	88b9      	ldrh	r1, [r7, #4]
 8003c6e:	79bb      	ldrb	r3, [r7, #6]
 8003c70:	fa01 f303 	lsl.w	r3, r1, r3
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	4313      	orrs	r3, r2
 8003c78:	b299      	uxth	r1, r3
 8003c7a:	79fb      	ldrb	r3, [r7, #7]
 8003c7c:	4a05      	ldr	r2, [pc, #20]	; (8003c94 <TIM_EGR_w+0x58>)
 8003c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c82:	460a      	mov	r2, r1
 8003c84:	601a      	str	r2, [r3, #0]
}
 8003c86:	bf00      	nop
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	200001a0 	.word	0x200001a0

08003c98 <TIM_CCR2_wr>:
uint16_t TIM_CCR2_wr(uint8_t TIM_ON, uint8_t field, uint16_t set, bool wr)
{
 8003c98:	b490      	push	{r4, r7}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	4604      	mov	r4, r0
 8003ca0:	4608      	mov	r0, r1
 8003ca2:	4611      	mov	r1, r2
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	4623      	mov	r3, r4
 8003ca8:	71fb      	strb	r3, [r7, #7]
 8003caa:	4603      	mov	r3, r0
 8003cac:	71bb      	strb	r3, [r7, #6]
 8003cae:	460b      	mov	r3, r1
 8003cb0:	80bb      	strh	r3, [r7, #4]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	70fb      	strb	r3, [r7, #3]
	for (int i = field; i < 16; i++)
 8003cb6:	79bb      	ldrb	r3, [r7, #6]
 8003cb8:	60fb      	str	r3, [r7, #12]
 8003cba:	e01c      	b.n	8003cf6 <TIM_CCR2_wr+0x5e>
	{
		*TIM_CCR2[TIM_ON].bytes = (*TIM_CCR2[TIM_ON].bytes & ~(1 << i)) | ((set << field) & (1 << i));
 8003cbc:	79fb      	ldrb	r3, [r7, #7]
 8003cbe:	4a12      	ldr	r2, [pc, #72]	; (8003d08 <TIM_CCR2_wr+0x70>)
 8003cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	fa01 f202 	lsl.w	r2, r1, r2
 8003cce:	43d2      	mvns	r2, r2
 8003cd0:	401a      	ands	r2, r3
 8003cd2:	88b9      	ldrh	r1, [r7, #4]
 8003cd4:	79bb      	ldrb	r3, [r7, #6]
 8003cd6:	4099      	lsls	r1, r3
 8003cd8:	2001      	movs	r0, #1
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	fa00 f303 	lsl.w	r3, r0, r3
 8003ce0:	400b      	ands	r3, r1
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	79fb      	ldrb	r3, [r7, #7]
 8003ce6:	4908      	ldr	r1, [pc, #32]	; (8003d08 <TIM_CCR2_wr+0x70>)
 8003ce8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003cec:	4302      	orrs	r2, r0
 8003cee:	601a      	str	r2, [r3, #0]
	for (int i = field; i < 16; i++)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	60fb      	str	r3, [r7, #12]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2b0f      	cmp	r3, #15
 8003cfa:	dddf      	ble.n	8003cbc <TIM_CCR2_wr+0x24>
	}
	return 0;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bc90      	pop	{r4, r7}
 8003d06:	4770      	bx	lr
 8003d08:	20000194 	.word	0x20000194

08003d0c <TIM_CCR1_wr>:
uint32_t TIM_CCR1_wr(uint8_t TIM_ON, uint8_t field, uint16_t set, bool wr)
{
 8003d0c:	b490      	push	{r4, r7}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	4604      	mov	r4, r0
 8003d14:	4608      	mov	r0, r1
 8003d16:	4611      	mov	r1, r2
 8003d18:	461a      	mov	r2, r3
 8003d1a:	4623      	mov	r3, r4
 8003d1c:	71fb      	strb	r3, [r7, #7]
 8003d1e:	4603      	mov	r3, r0
 8003d20:	71bb      	strb	r3, [r7, #6]
 8003d22:	460b      	mov	r3, r1
 8003d24:	80bb      	strh	r3, [r7, #4]
 8003d26:	4613      	mov	r3, r2
 8003d28:	70fb      	strb	r3, [r7, #3]
	if (wr == 0)
 8003d2a:	78fb      	ldrb	r3, [r7, #3]
 8003d2c:	f083 0301 	eor.w	r3, r3, #1
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d005      	beq.n	8003d42 <TIM_CCR1_wr+0x36>
	{ // read
		return *TIM_CCR1[TIM_ON].bytes;
 8003d36:	79fb      	ldrb	r3, [r7, #7]
 8003d38:	4a16      	ldr	r2, [pc, #88]	; (8003d94 <TIM_CCR1_wr+0x88>)
 8003d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	e023      	b.n	8003d8a <TIM_CCR1_wr+0x7e>
	}

	for (int i = field; i < 16; i++)
 8003d42:	79bb      	ldrb	r3, [r7, #6]
 8003d44:	60fb      	str	r3, [r7, #12]
 8003d46:	e01c      	b.n	8003d82 <TIM_CCR1_wr+0x76>
	{
		*TIM_CCR1[TIM_ON].bytes = (*TIM_CCR1[TIM_ON].bytes & ~(1 << i)) | ((set << field) & (1 << i));
 8003d48:	79fb      	ldrb	r3, [r7, #7]
 8003d4a:	4a12      	ldr	r2, [pc, #72]	; (8003d94 <TIM_CCR1_wr+0x88>)
 8003d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2101      	movs	r1, #1
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	fa01 f202 	lsl.w	r2, r1, r2
 8003d5a:	43d2      	mvns	r2, r2
 8003d5c:	401a      	ands	r2, r3
 8003d5e:	88b9      	ldrh	r1, [r7, #4]
 8003d60:	79bb      	ldrb	r3, [r7, #6]
 8003d62:	4099      	lsls	r1, r3
 8003d64:	2001      	movs	r0, #1
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	fa00 f303 	lsl.w	r3, r0, r3
 8003d6c:	400b      	ands	r3, r1
 8003d6e:	4618      	mov	r0, r3
 8003d70:	79fb      	ldrb	r3, [r7, #7]
 8003d72:	4908      	ldr	r1, [pc, #32]	; (8003d94 <TIM_CCR1_wr+0x88>)
 8003d74:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d78:	4302      	orrs	r2, r0
 8003d7a:	601a      	str	r2, [r3, #0]
	for (int i = field; i < 16; i++)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	3301      	adds	r3, #1
 8003d80:	60fb      	str	r3, [r7, #12]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2b0f      	cmp	r3, #15
 8003d86:	dddf      	ble.n	8003d48 <TIM_CCR1_wr+0x3c>
	}

	return 0;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bc90      	pop	{r4, r7}
 8003d92:	4770      	bx	lr
 8003d94:	20000188 	.word	0x20000188

08003d98 <TIM_CR1_w>:
void TIM_CR1_w(uint8_t TIM_ON, uint8_t field, uint32_t set)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	4603      	mov	r3, r0
 8003da0:	603a      	str	r2, [r7, #0]
 8003da2:	71fb      	strb	r3, [r7, #7]
 8003da4:	460b      	mov	r3, r1
 8003da6:	71bb      	strb	r3, [r7, #6]
	*TIM_CR1[TIM_ON].bytes = (*TIM_CR1[TIM_ON].bytes & ~(1 << field)) | (set << field);
 8003da8:	79fb      	ldrb	r3, [r7, #7]
 8003daa:	4a0d      	ldr	r2, [pc, #52]	; (8003de0 <TIM_CR1_w+0x48>)
 8003dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	79ba      	ldrb	r2, [r7, #6]
 8003db4:	2101      	movs	r1, #1
 8003db6:	fa01 f202 	lsl.w	r2, r1, r2
 8003dba:	43d2      	mvns	r2, r2
 8003dbc:	ea03 0102 	and.w	r1, r3, r2
 8003dc0:	79bb      	ldrb	r3, [r7, #6]
 8003dc2:	683a      	ldr	r2, [r7, #0]
 8003dc4:	409a      	lsls	r2, r3
 8003dc6:	79fb      	ldrb	r3, [r7, #7]
 8003dc8:	4805      	ldr	r0, [pc, #20]	; (8003de0 <TIM_CR1_w+0x48>)
 8003dca:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	601a      	str	r2, [r3, #0]
}
 8003dd2:	bf00      	nop
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	2000017c 	.word	0x2000017c

08003de4 <DMA_ISR_r>:
uint32_t DMA_ISR_r(uint8_t field)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	4603      	mov	r3, r0
 8003dec:	71fb      	strb	r3, [r7, #7]
	return *DMA_ISR.bytes & (SETBIT << field);
 8003dee:	4b07      	ldr	r3, [pc, #28]	; (8003e0c <DMA_ISR_r+0x28>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	79fa      	ldrb	r2, [r7, #7]
 8003df6:	2101      	movs	r1, #1
 8003df8:	fa01 f202 	lsl.w	r2, r1, r2
 8003dfc:	4013      	ands	r3, r2
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	20000178 	.word	0x20000178

08003e10 <RCC_AHB1ENR_wr>:
uint32_t RCC_AHB1ENR_wr(uint8_t field, uint8_t set, bool wr)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	4603      	mov	r3, r0
 8003e18:	71fb      	strb	r3, [r7, #7]
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	71bb      	strb	r3, [r7, #6]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	717b      	strb	r3, [r7, #5]
	return wr ? *RCC_AHB1ENR.bytes = (*RCC_AHB1ENR.bytes & ~(1 << field)) | (set << field) : *RCC_AHB1ENR.bytes & (SETBIT << field);
 8003e22:	797b      	ldrb	r3, [r7, #5]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d012      	beq.n	8003e4e <RCC_AHB1ENR_wr+0x3e>
 8003e28:	4b10      	ldr	r3, [pc, #64]	; (8003e6c <RCC_AHB1ENR_wr+0x5c>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	79fa      	ldrb	r2, [r7, #7]
 8003e30:	2101      	movs	r1, #1
 8003e32:	fa01 f202 	lsl.w	r2, r1, r2
 8003e36:	43d2      	mvns	r2, r2
 8003e38:	4013      	ands	r3, r2
 8003e3a:	79b9      	ldrb	r1, [r7, #6]
 8003e3c:	79fa      	ldrb	r2, [r7, #7]
 8003e3e:	fa01 f202 	lsl.w	r2, r1, r2
 8003e42:	4611      	mov	r1, r2
 8003e44:	4a09      	ldr	r2, [pc, #36]	; (8003e6c <RCC_AHB1ENR_wr+0x5c>)
 8003e46:	6812      	ldr	r2, [r2, #0]
 8003e48:	430b      	orrs	r3, r1
 8003e4a:	6013      	str	r3, [r2, #0]
 8003e4c:	e007      	b.n	8003e5e <RCC_AHB1ENR_wr+0x4e>
 8003e4e:	4b07      	ldr	r3, [pc, #28]	; (8003e6c <RCC_AHB1ENR_wr+0x5c>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	79fa      	ldrb	r2, [r7, #7]
 8003e56:	2101      	movs	r1, #1
 8003e58:	fa01 f202 	lsl.w	r2, r1, r2
 8003e5c:	4013      	ands	r3, r2
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	20000088 	.word	0x20000088

08003e70 <RCC_APB2ENR_wr>:
uint32_t RCC_APB2ENR_wr(uint8_t field, uint8_t set, bool wr)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	4603      	mov	r3, r0
 8003e78:	71fb      	strb	r3, [r7, #7]
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	71bb      	strb	r3, [r7, #6]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	717b      	strb	r3, [r7, #5]
	return wr ? *RCC_APB2ENR.bytes = (*RCC_APB2ENR.bytes & ~(1 << field)) | (set << field) : *RCC_APB2ENR.bytes & (SETBIT << field);
 8003e82:	797b      	ldrb	r3, [r7, #5]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d012      	beq.n	8003eae <RCC_APB2ENR_wr+0x3e>
 8003e88:	4b10      	ldr	r3, [pc, #64]	; (8003ecc <RCC_APB2ENR_wr+0x5c>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	79fa      	ldrb	r2, [r7, #7]
 8003e90:	2101      	movs	r1, #1
 8003e92:	fa01 f202 	lsl.w	r2, r1, r2
 8003e96:	43d2      	mvns	r2, r2
 8003e98:	4013      	ands	r3, r2
 8003e9a:	79b9      	ldrb	r1, [r7, #6]
 8003e9c:	79fa      	ldrb	r2, [r7, #7]
 8003e9e:	fa01 f202 	lsl.w	r2, r1, r2
 8003ea2:	4611      	mov	r1, r2
 8003ea4:	4a09      	ldr	r2, [pc, #36]	; (8003ecc <RCC_APB2ENR_wr+0x5c>)
 8003ea6:	6812      	ldr	r2, [r2, #0]
 8003ea8:	430b      	orrs	r3, r1
 8003eaa:	6013      	str	r3, [r2, #0]
 8003eac:	e007      	b.n	8003ebe <RCC_APB2ENR_wr+0x4e>
 8003eae:	4b07      	ldr	r3, [pc, #28]	; (8003ecc <RCC_APB2ENR_wr+0x5c>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	79fa      	ldrb	r2, [r7, #7]
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	fa01 f202 	lsl.w	r2, r1, r2
 8003ebc:	4013      	ands	r3, r2
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	20000084 	.word	0x20000084

08003ed0 <DMA_IFCR_w>:
void DMA_IFCR_w(uint8_t field, uint32_t set)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	6039      	str	r1, [r7, #0]
 8003eda:	71fb      	strb	r3, [r7, #7]
	*DMA_IFCR.bytes = (*DMA_IFCR.bytes & ~(1 << field)) | (set << field);
 8003edc:	4b0b      	ldr	r3, [pc, #44]	; (8003f0c <DMA_IFCR_w+0x3c>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	79fa      	ldrb	r2, [r7, #7]
 8003ee4:	2101      	movs	r1, #1
 8003ee6:	fa01 f202 	lsl.w	r2, r1, r2
 8003eea:	43d2      	mvns	r2, r2
 8003eec:	ea03 0102 	and.w	r1, r3, r2
 8003ef0:	79fb      	ldrb	r3, [r7, #7]
 8003ef2:	683a      	ldr	r2, [r7, #0]
 8003ef4:	409a      	lsls	r2, r3
 8003ef6:	4b05      	ldr	r3, [pc, #20]	; (8003f0c <DMA_IFCR_w+0x3c>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	430a      	orrs	r2, r1
 8003efc:	601a      	str	r2, [r3, #0]
}
 8003efe:	bf00      	nop
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	20000174 	.word	0x20000174

08003f10 <DMA1_Channel_CNDTR_w>:
void DMA1_Channel_CNDTR_w(uint8_t DMA1_Channel_ON, uint32_t set, bool wr)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	4603      	mov	r3, r0
 8003f18:	6039      	str	r1, [r7, #0]
 8003f1a:	71fb      	strb	r3, [r7, #7]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	71bb      	strb	r3, [r7, #6]
	*DMA1_Channel_CNDTR[DMA1_Channel_ON].bytes = set;
 8003f20:	79fb      	ldrb	r3, [r7, #7]
 8003f22:	4a05      	ldr	r2, [pc, #20]	; (8003f38 <DMA1_Channel_CNDTR_w+0x28>)
 8003f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f28:	683a      	ldr	r2, [r7, #0]
 8003f2a:	601a      	str	r2, [r3, #0]
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr
 8003f38:	2000015c 	.word	0x2000015c

08003f3c <DMA1_Channel_CPAR_w>:
void DMA1_Channel_CPAR_w(uint8_t DMA1_Channel_ON, uint32_t set, bool wr)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	4603      	mov	r3, r0
 8003f44:	6039      	str	r1, [r7, #0]
 8003f46:	71fb      	strb	r3, [r7, #7]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	71bb      	strb	r3, [r7, #6]
	*DMA1_Channel_CPAR[DMA1_Channel_ON].bytes = set;
 8003f4c:	79fb      	ldrb	r3, [r7, #7]
 8003f4e:	4a05      	ldr	r2, [pc, #20]	; (8003f64 <DMA1_Channel_CPAR_w+0x28>)
 8003f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	601a      	str	r2, [r3, #0]
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	2000012c 	.word	0x2000012c

08003f68 <DMA1_Channel_CMAR_w>:
void DMA1_Channel_CMAR_w(uint8_t DMA1_Channel_ON, uint32_t set, bool wr)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	4603      	mov	r3, r0
 8003f70:	6039      	str	r1, [r7, #0]
 8003f72:	71fb      	strb	r3, [r7, #7]
 8003f74:	4613      	mov	r3, r2
 8003f76:	71bb      	strb	r3, [r7, #6]
	*DMA1_Channel_CMAR[DMA1_Channel_ON].bytes = set;
 8003f78:	79fb      	ldrb	r3, [r7, #7]
 8003f7a:	4a05      	ldr	r2, [pc, #20]	; (8003f90 <DMA1_Channel_CMAR_w+0x28>)
 8003f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	601a      	str	r2, [r3, #0]
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr
 8003f90:	20000144 	.word	0x20000144

08003f94 <DMA1_Channel_CSELR_wr>:
uint32_t DMA1_Channel_CSELR_wr(uint8_t field, uint32_t set, bool wr)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	6039      	str	r1, [r7, #0]
 8003f9e:	71fb      	strb	r3, [r7, #7]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	71bb      	strb	r3, [r7, #6]
	return wr ? *DMA1_Channel_CSELR.bytes = (*DMA1_Channel_CSELR.bytes & ~(1 << field)) | (set << field) : *DMA1_Channel_CSELR.bytes & (SETBIT << field);
 8003fa4:	79bb      	ldrb	r3, [r7, #6]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d012      	beq.n	8003fd0 <DMA1_Channel_CSELR_wr+0x3c>
 8003faa:	4b10      	ldr	r3, [pc, #64]	; (8003fec <DMA1_Channel_CSELR_wr+0x58>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	79fa      	ldrb	r2, [r7, #7]
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	fa01 f202 	lsl.w	r2, r1, r2
 8003fb8:	43d2      	mvns	r2, r2
 8003fba:	ea03 0102 	and.w	r1, r3, r2
 8003fbe:	79fb      	ldrb	r3, [r7, #7]
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc6:	4a09      	ldr	r2, [pc, #36]	; (8003fec <DMA1_Channel_CSELR_wr+0x58>)
 8003fc8:	6812      	ldr	r2, [r2, #0]
 8003fca:	430b      	orrs	r3, r1
 8003fcc:	6013      	str	r3, [r2, #0]
 8003fce:	e007      	b.n	8003fe0 <DMA1_Channel_CSELR_wr+0x4c>
 8003fd0:	4b06      	ldr	r3, [pc, #24]	; (8003fec <DMA1_Channel_CSELR_wr+0x58>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	79fa      	ldrb	r2, [r7, #7]
 8003fd8:	2101      	movs	r1, #1
 8003fda:	fa01 f202 	lsl.w	r2, r1, r2
 8003fde:	4013      	ands	r3, r2
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr
 8003fec:	20000128 	.word	0x20000128

08003ff0 <USART_CR3_wr>:
uint32_t USART_CR3_wr(uint8_t USART_ON, uint8_t field, uint8_t set, bool wr)
{
 8003ff0:	b490      	push	{r4, r7}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	4604      	mov	r4, r0
 8003ff8:	4608      	mov	r0, r1
 8003ffa:	4611      	mov	r1, r2
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	4623      	mov	r3, r4
 8004000:	71fb      	strb	r3, [r7, #7]
 8004002:	4603      	mov	r3, r0
 8004004:	71bb      	strb	r3, [r7, #6]
 8004006:	460b      	mov	r3, r1
 8004008:	717b      	strb	r3, [r7, #5]
 800400a:	4613      	mov	r3, r2
 800400c:	713b      	strb	r3, [r7, #4]
	return wr ? *USART_CR3[USART_ON].bytes = (*USART_CR3[USART_ON].bytes & ~(1 << field)) | (set << field) : *USART_CR3[USART_ON].bytes & (SETBIT << field);
 800400e:	793b      	ldrb	r3, [r7, #4]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d016      	beq.n	8004042 <USART_CR3_wr+0x52>
 8004014:	79fb      	ldrb	r3, [r7, #7]
 8004016:	4a12      	ldr	r2, [pc, #72]	; (8004060 <USART_CR3_wr+0x70>)
 8004018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	79ba      	ldrb	r2, [r7, #6]
 8004020:	2101      	movs	r1, #1
 8004022:	fa01 f202 	lsl.w	r2, r1, r2
 8004026:	43d2      	mvns	r2, r2
 8004028:	4013      	ands	r3, r2
 800402a:	7979      	ldrb	r1, [r7, #5]
 800402c:	79ba      	ldrb	r2, [r7, #6]
 800402e:	fa01 f202 	lsl.w	r2, r1, r2
 8004032:	4610      	mov	r0, r2
 8004034:	79fa      	ldrb	r2, [r7, #7]
 8004036:	490a      	ldr	r1, [pc, #40]	; (8004060 <USART_CR3_wr+0x70>)
 8004038:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800403c:	4303      	orrs	r3, r0
 800403e:	6013      	str	r3, [r2, #0]
 8004040:	e009      	b.n	8004056 <USART_CR3_wr+0x66>
 8004042:	79fb      	ldrb	r3, [r7, #7]
 8004044:	4a06      	ldr	r2, [pc, #24]	; (8004060 <USART_CR3_wr+0x70>)
 8004046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	79ba      	ldrb	r2, [r7, #6]
 800404e:	2101      	movs	r1, #1
 8004050:	fa01 f202 	lsl.w	r2, r1, r2
 8004054:	4013      	ands	r3, r2
}
 8004056:	4618      	mov	r0, r3
 8004058:	3708      	adds	r7, #8
 800405a:	46bd      	mov	sp, r7
 800405c:	bc90      	pop	{r4, r7}
 800405e:	4770      	bx	lr
 8004060:	2000011c 	.word	0x2000011c

08004064 <DMA1_Channel_CCR_wr>:
uint32_t DMA1_Channel_CCR_wr(uint8_t DMA1_Channel_ON, uint8_t field, uint32_t set, bool wr)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	603a      	str	r2, [r7, #0]
 800406c:	461a      	mov	r2, r3
 800406e:	4603      	mov	r3, r0
 8004070:	71fb      	strb	r3, [r7, #7]
 8004072:	460b      	mov	r3, r1
 8004074:	71bb      	strb	r3, [r7, #6]
 8004076:	4613      	mov	r3, r2
 8004078:	717b      	strb	r3, [r7, #5]
	return wr ? *DMA1_Channel_CCR[DMA1_Channel_ON].bytes = (*DMA1_Channel_CCR[DMA1_Channel_ON].bytes & ~(1 << field)) | (set << field) : *DMA1_Channel_CCR[DMA1_Channel_ON].bytes & (SETBIT << field);
 800407a:	797b      	ldrb	r3, [r7, #5]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d016      	beq.n	80040ae <DMA1_Channel_CCR_wr+0x4a>
 8004080:	79fb      	ldrb	r3, [r7, #7]
 8004082:	4a13      	ldr	r2, [pc, #76]	; (80040d0 <DMA1_Channel_CCR_wr+0x6c>)
 8004084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	79ba      	ldrb	r2, [r7, #6]
 800408c:	2101      	movs	r1, #1
 800408e:	fa01 f202 	lsl.w	r2, r1, r2
 8004092:	43d2      	mvns	r2, r2
 8004094:	ea03 0102 	and.w	r1, r3, r2
 8004098:	79bb      	ldrb	r3, [r7, #6]
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	fa02 f303 	lsl.w	r3, r2, r3
 80040a0:	79fa      	ldrb	r2, [r7, #7]
 80040a2:	480b      	ldr	r0, [pc, #44]	; (80040d0 <DMA1_Channel_CCR_wr+0x6c>)
 80040a4:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80040a8:	430b      	orrs	r3, r1
 80040aa:	6013      	str	r3, [r2, #0]
 80040ac:	e009      	b.n	80040c2 <DMA1_Channel_CCR_wr+0x5e>
 80040ae:	79fb      	ldrb	r3, [r7, #7]
 80040b0:	4a07      	ldr	r2, [pc, #28]	; (80040d0 <DMA1_Channel_CCR_wr+0x6c>)
 80040b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	79ba      	ldrb	r2, [r7, #6]
 80040ba:	2101      	movs	r1, #1
 80040bc:	fa01 f202 	lsl.w	r2, r1, r2
 80040c0:	4013      	ands	r3, r2
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	370c      	adds	r7, #12
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	20000104 	.word	0x20000104

080040d4 <GPIO_OTYPER_wr>:
uint32_t GPIO_OTYPER_wr(uint8_t port, uint8_t field, uint8_t set, bool wr)
{
 80040d4:	b490      	push	{r4, r7}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	4604      	mov	r4, r0
 80040dc:	4608      	mov	r0, r1
 80040de:	4611      	mov	r1, r2
 80040e0:	461a      	mov	r2, r3
 80040e2:	4623      	mov	r3, r4
 80040e4:	71fb      	strb	r3, [r7, #7]
 80040e6:	4603      	mov	r3, r0
 80040e8:	71bb      	strb	r3, [r7, #6]
 80040ea:	460b      	mov	r3, r1
 80040ec:	717b      	strb	r3, [r7, #5]
 80040ee:	4613      	mov	r3, r2
 80040f0:	713b      	strb	r3, [r7, #4]
	return wr ? *GPIO_OTYPER[port].bytes = (*GPIO_OTYPER[port].bytes & ~(1 << field)) | (set << field) : *GPIO_OTYPER[port].bytes & (SETBIT << field);
 80040f2:	793b      	ldrb	r3, [r7, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d016      	beq.n	8004126 <GPIO_OTYPER_wr+0x52>
 80040f8:	79fb      	ldrb	r3, [r7, #7]
 80040fa:	4a12      	ldr	r2, [pc, #72]	; (8004144 <GPIO_OTYPER_wr+0x70>)
 80040fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	79ba      	ldrb	r2, [r7, #6]
 8004104:	2101      	movs	r1, #1
 8004106:	fa01 f202 	lsl.w	r2, r1, r2
 800410a:	43d2      	mvns	r2, r2
 800410c:	4013      	ands	r3, r2
 800410e:	7979      	ldrb	r1, [r7, #5]
 8004110:	79ba      	ldrb	r2, [r7, #6]
 8004112:	fa01 f202 	lsl.w	r2, r1, r2
 8004116:	4610      	mov	r0, r2
 8004118:	79fa      	ldrb	r2, [r7, #7]
 800411a:	490a      	ldr	r1, [pc, #40]	; (8004144 <GPIO_OTYPER_wr+0x70>)
 800411c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004120:	4303      	orrs	r3, r0
 8004122:	6013      	str	r3, [r2, #0]
 8004124:	e009      	b.n	800413a <GPIO_OTYPER_wr+0x66>
 8004126:	79fb      	ldrb	r3, [r7, #7]
 8004128:	4a06      	ldr	r2, [pc, #24]	; (8004144 <GPIO_OTYPER_wr+0x70>)
 800412a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	79ba      	ldrb	r2, [r7, #6]
 8004132:	2101      	movs	r1, #1
 8004134:	fa01 f202 	lsl.w	r2, r1, r2
 8004138:	4013      	ands	r3, r2
}
 800413a:	4618      	mov	r0, r3
 800413c:	3708      	adds	r7, #8
 800413e:	46bd      	mov	sp, r7
 8004140:	bc90      	pop	{r4, r7}
 8004142:	4770      	bx	lr
 8004144:	20000058 	.word	0x20000058

08004148 <I2C_ISR_r>:
uint32_t I2C_ISR_r(uint8_t I2C_ON, uint8_t field)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	4603      	mov	r3, r0
 8004150:	460a      	mov	r2, r1
 8004152:	71fb      	strb	r3, [r7, #7]
 8004154:	4613      	mov	r3, r2
 8004156:	71bb      	strb	r3, [r7, #6]
	return *I2C_ISR[I2C_ON].bytes & (SETBIT << field);
 8004158:	79fb      	ldrb	r3, [r7, #7]
 800415a:	4a07      	ldr	r2, [pc, #28]	; (8004178 <I2C_ISR_r+0x30>)
 800415c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	79ba      	ldrb	r2, [r7, #6]
 8004164:	2101      	movs	r1, #1
 8004166:	fa01 f202 	lsl.w	r2, r1, r2
 800416a:	4013      	ands	r3, r2
	// 	return I2C_ISR[I2C_ON].I_ISR->ADDCODE; // check this
}
 800416c:	4618      	mov	r0, r3
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr
 8004178:	200000f8 	.word	0x200000f8

0800417c <I2C_CR2_wr>:
uint32_t I2C_CR2_wr(uint8_t I2C_ON, uint8_t field, uint32_t set, bool wr)
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	603a      	str	r2, [r7, #0]
 8004184:	461a      	mov	r2, r3
 8004186:	4603      	mov	r3, r0
 8004188:	71fb      	strb	r3, [r7, #7]
 800418a:	460b      	mov	r3, r1
 800418c:	71bb      	strb	r3, [r7, #6]
 800418e:	4613      	mov	r3, r2
 8004190:	717b      	strb	r3, [r7, #5]
	if ((field == SADD07) || (field == NBYTES))
 8004192:	79bb      	ldrb	r3, [r7, #6]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d002      	beq.n	800419e <I2C_CR2_wr+0x22>
 8004198:	79bb      	ldrb	r3, [r7, #6]
 800419a:	2b10      	cmp	r3, #16
 800419c:	d127      	bne.n	80041ee <I2C_CR2_wr+0x72>
	{
		for (int i = field; i < field + 8; i++)
 800419e:	79bb      	ldrb	r3, [r7, #6]
 80041a0:	60fb      	str	r3, [r7, #12]
 80041a2:	e01d      	b.n	80041e0 <I2C_CR2_wr+0x64>
		{
			*I2C_CR2[I2C_ON].bytes = (*I2C_CR2[I2C_ON].bytes & ~(1 << i)) | ((set << field) & (1 << i));
 80041a4:	79fb      	ldrb	r3, [r7, #7]
 80041a6:	4a27      	ldr	r2, [pc, #156]	; (8004244 <I2C_CR2_wr+0xc8>)
 80041a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2101      	movs	r1, #1
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	fa01 f202 	lsl.w	r2, r1, r2
 80041b6:	43d2      	mvns	r2, r2
 80041b8:	ea03 0102 	and.w	r1, r3, r2
 80041bc:	79bb      	ldrb	r3, [r7, #6]
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	fa02 f303 	lsl.w	r3, r2, r3
 80041c4:	2001      	movs	r0, #1
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	fa00 f202 	lsl.w	r2, r0, r2
 80041cc:	401a      	ands	r2, r3
 80041ce:	79fb      	ldrb	r3, [r7, #7]
 80041d0:	481c      	ldr	r0, [pc, #112]	; (8004244 <I2C_CR2_wr+0xc8>)
 80041d2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80041d6:	430a      	orrs	r2, r1
 80041d8:	601a      	str	r2, [r3, #0]
		for (int i = field; i < field + 8; i++)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	3301      	adds	r3, #1
 80041de:	60fb      	str	r3, [r7, #12]
 80041e0:	79bb      	ldrb	r3, [r7, #6]
 80041e2:	3307      	adds	r3, #7
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	dddc      	ble.n	80041a4 <I2C_CR2_wr+0x28>
		}
		return 0;
 80041ea:	2300      	movs	r3, #0
 80041ec:	e023      	b.n	8004236 <I2C_CR2_wr+0xba>
		// TODO: read address
	}
	return wr ? *I2C_CR2[I2C_ON].bytes = (*I2C_CR2[I2C_ON].bytes & ~(1 << field)) | (set << field) : *I2C_CR2[I2C_ON].bytes & (SETBIT << field);
 80041ee:	797b      	ldrb	r3, [r7, #5]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d016      	beq.n	8004222 <I2C_CR2_wr+0xa6>
 80041f4:	79fb      	ldrb	r3, [r7, #7]
 80041f6:	4a13      	ldr	r2, [pc, #76]	; (8004244 <I2C_CR2_wr+0xc8>)
 80041f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	79ba      	ldrb	r2, [r7, #6]
 8004200:	2101      	movs	r1, #1
 8004202:	fa01 f202 	lsl.w	r2, r1, r2
 8004206:	43d2      	mvns	r2, r2
 8004208:	ea03 0102 	and.w	r1, r3, r2
 800420c:	79bb      	ldrb	r3, [r7, #6]
 800420e:	683a      	ldr	r2, [r7, #0]
 8004210:	fa02 f303 	lsl.w	r3, r2, r3
 8004214:	79fa      	ldrb	r2, [r7, #7]
 8004216:	480b      	ldr	r0, [pc, #44]	; (8004244 <I2C_CR2_wr+0xc8>)
 8004218:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800421c:	430b      	orrs	r3, r1
 800421e:	6013      	str	r3, [r2, #0]
 8004220:	e009      	b.n	8004236 <I2C_CR2_wr+0xba>
 8004222:	79fb      	ldrb	r3, [r7, #7]
 8004224:	4a07      	ldr	r2, [pc, #28]	; (8004244 <I2C_CR2_wr+0xc8>)
 8004226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	79ba      	ldrb	r2, [r7, #6]
 800422e:	2101      	movs	r1, #1
 8004230:	fa01 f202 	lsl.w	r2, r1, r2
 8004234:	4013      	ands	r3, r2
}
 8004236:	4618      	mov	r0, r3
 8004238:	3714      	adds	r7, #20
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	200000ec 	.word	0x200000ec

08004248 <I2C_CR1_wr>:
uint32_t I2C_CR1_wr(uint8_t I2C_ON, uint8_t field, uint8_t set, bool wr)
{
 8004248:	b490      	push	{r4, r7}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	4604      	mov	r4, r0
 8004250:	4608      	mov	r0, r1
 8004252:	4611      	mov	r1, r2
 8004254:	461a      	mov	r2, r3
 8004256:	4623      	mov	r3, r4
 8004258:	71fb      	strb	r3, [r7, #7]
 800425a:	4603      	mov	r3, r0
 800425c:	71bb      	strb	r3, [r7, #6]
 800425e:	460b      	mov	r3, r1
 8004260:	717b      	strb	r3, [r7, #5]
 8004262:	4613      	mov	r3, r2
 8004264:	713b      	strb	r3, [r7, #4]
	return wr ? *I2C_CR1[I2C_ON].bytes = (*I2C_CR1[I2C_ON].bytes & ~(1 << field)) | (set << field) : *I2C_CR1[I2C_ON].bytes & (SETBIT << field);
 8004266:	793b      	ldrb	r3, [r7, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d016      	beq.n	800429a <I2C_CR1_wr+0x52>
 800426c:	79fb      	ldrb	r3, [r7, #7]
 800426e:	4a12      	ldr	r2, [pc, #72]	; (80042b8 <I2C_CR1_wr+0x70>)
 8004270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	79ba      	ldrb	r2, [r7, #6]
 8004278:	2101      	movs	r1, #1
 800427a:	fa01 f202 	lsl.w	r2, r1, r2
 800427e:	43d2      	mvns	r2, r2
 8004280:	4013      	ands	r3, r2
 8004282:	7979      	ldrb	r1, [r7, #5]
 8004284:	79ba      	ldrb	r2, [r7, #6]
 8004286:	fa01 f202 	lsl.w	r2, r1, r2
 800428a:	4610      	mov	r0, r2
 800428c:	79fa      	ldrb	r2, [r7, #7]
 800428e:	490a      	ldr	r1, [pc, #40]	; (80042b8 <I2C_CR1_wr+0x70>)
 8004290:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004294:	4303      	orrs	r3, r0
 8004296:	6013      	str	r3, [r2, #0]
 8004298:	e009      	b.n	80042ae <I2C_CR1_wr+0x66>
 800429a:	79fb      	ldrb	r3, [r7, #7]
 800429c:	4a06      	ldr	r2, [pc, #24]	; (80042b8 <I2C_CR1_wr+0x70>)
 800429e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	79ba      	ldrb	r2, [r7, #6]
 80042a6:	2101      	movs	r1, #1
 80042a8:	fa01 f202 	lsl.w	r2, r1, r2
 80042ac:	4013      	ands	r3, r2
	// check DNF
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bc90      	pop	{r4, r7}
 80042b6:	4770      	bx	lr
 80042b8:	200000e0 	.word	0x200000e0

080042bc <I2C_TXDR_w>:
void I2C_TXDR_w(uint8_t I2C_ON, uint8_t data)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	4603      	mov	r3, r0
 80042c4:	460a      	mov	r2, r1
 80042c6:	71fb      	strb	r3, [r7, #7]
 80042c8:	4613      	mov	r3, r2
 80042ca:	71bb      	strb	r3, [r7, #6]
	*I2C_TXDR[I2C_ON].TXDATA = data;
 80042cc:	79fb      	ldrb	r3, [r7, #7]
 80042ce:	4a05      	ldr	r2, [pc, #20]	; (80042e4 <I2C_TXDR_w+0x28>)
 80042d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042d4:	79ba      	ldrb	r2, [r7, #6]
 80042d6:	601a      	str	r2, [r3, #0]
}
 80042d8:	bf00      	nop
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr
 80042e4:	200000c8 	.word	0x200000c8

080042e8 <I2C_RXDR_r>:

uint32_t I2C_RXDR_r(uint8_t I2C_ON)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	4603      	mov	r3, r0
 80042f0:	71fb      	strb	r3, [r7, #7]
	return *I2C_RXDR[I2C_ON].RXDATA;
 80042f2:	79fb      	ldrb	r3, [r7, #7]
 80042f4:	4a04      	ldr	r2, [pc, #16]	; (8004308 <I2C_RXDR_r+0x20>)
 80042f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042fa:	681b      	ldr	r3, [r3, #0]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr
 8004308:	200000d4 	.word	0x200000d4

0800430c <I2C_TIMINGR_w>:

void I2C_TIMINGR_w(uint8_t I2C_ON, uint32_t data)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	4603      	mov	r3, r0
 8004314:	6039      	str	r1, [r7, #0]
 8004316:	71fb      	strb	r3, [r7, #7]
	*I2C_TIMINGR[I2C_ON].I_TIMINGR = data;
 8004318:	79fb      	ldrb	r3, [r7, #7]
 800431a:	4a05      	ldr	r2, [pc, #20]	; (8004330 <I2C_TIMINGR_w+0x24>)
 800431c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004320:	683a      	ldr	r2, [r7, #0]
 8004322:	601a      	str	r2, [r3, #0]
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	200000bc 	.word	0x200000bc

08004334 <USART_TDR_w>:
uint8_t USART_RDR_r(uint8_t USART_ON)
{
	return (char)USART_RDR[USART_ON].U_RDR->RDR;
}
void USART_TDR_w(uint8_t USART_ON, char data)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	4603      	mov	r3, r0
 800433c:	460a      	mov	r2, r1
 800433e:	71fb      	strb	r3, [r7, #7]
 8004340:	4613      	mov	r3, r2
 8004342:	71bb      	strb	r3, [r7, #6]
	USART_TDR[USART_ON].U_TDR->TDR = data;
 8004344:	79fb      	ldrb	r3, [r7, #7]
 8004346:	4a06      	ldr	r2, [pc, #24]	; (8004360 <USART_TDR_w+0x2c>)
 8004348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800434c:	79ba      	ldrb	r2, [r7, #6]
 800434e:	b292      	uxth	r2, r2
 8004350:	801a      	strh	r2, [r3, #0]
}
 8004352:	bf00      	nop
 8004354:	370c      	adds	r7, #12
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	200000b0 	.word	0x200000b0

08004364 <USART_ISR_r>:
uint8_t USART_ISR_r(uint8_t USART_ON, uint8_t field)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	4603      	mov	r3, r0
 800436c:	460a      	mov	r2, r1
 800436e:	71fb      	strb	r3, [r7, #7]
 8004370:	4613      	mov	r3, r2
 8004372:	71bb      	strb	r3, [r7, #6]
	return *USART_ISR[USART_ON].bytes & (SETBIT << field);
 8004374:	79fb      	ldrb	r3, [r7, #7]
 8004376:	4a09      	ldr	r2, [pc, #36]	; (800439c <USART_ISR_r+0x38>)
 8004378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	b2da      	uxtb	r2, r3
 8004380:	79bb      	ldrb	r3, [r7, #6]
 8004382:	2101      	movs	r1, #1
 8004384:	fa01 f303 	lsl.w	r3, r1, r3
 8004388:	b2db      	uxtb	r3, r3
 800438a:	4013      	ands	r3, r2
 800438c:	b2db      	uxtb	r3, r3
}
 800438e:	4618      	mov	r0, r3
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	200000a4 	.word	0x200000a4

080043a0 <USART_CR1_wr>:

uint32_t USART_CR1_wr(uint8_t USART_ON, uint8_t field, uint8_t set, bool wr)
{
 80043a0:	b490      	push	{r4, r7}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	4604      	mov	r4, r0
 80043a8:	4608      	mov	r0, r1
 80043aa:	4611      	mov	r1, r2
 80043ac:	461a      	mov	r2, r3
 80043ae:	4623      	mov	r3, r4
 80043b0:	71fb      	strb	r3, [r7, #7]
 80043b2:	4603      	mov	r3, r0
 80043b4:	71bb      	strb	r3, [r7, #6]
 80043b6:	460b      	mov	r3, r1
 80043b8:	717b      	strb	r3, [r7, #5]
 80043ba:	4613      	mov	r3, r2
 80043bc:	713b      	strb	r3, [r7, #4]
	return wr ? *USART_CR1[USART_ON].bytes = (*USART_CR1[USART_ON].bytes & ~(1 << field)) | (set << field) : *USART_CR1[USART_ON].bytes & (SETBIT << field);
 80043be:	793b      	ldrb	r3, [r7, #4]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d016      	beq.n	80043f2 <USART_CR1_wr+0x52>
 80043c4:	79fb      	ldrb	r3, [r7, #7]
 80043c6:	4a12      	ldr	r2, [pc, #72]	; (8004410 <USART_CR1_wr+0x70>)
 80043c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	79ba      	ldrb	r2, [r7, #6]
 80043d0:	2101      	movs	r1, #1
 80043d2:	fa01 f202 	lsl.w	r2, r1, r2
 80043d6:	43d2      	mvns	r2, r2
 80043d8:	4013      	ands	r3, r2
 80043da:	7979      	ldrb	r1, [r7, #5]
 80043dc:	79ba      	ldrb	r2, [r7, #6]
 80043de:	fa01 f202 	lsl.w	r2, r1, r2
 80043e2:	4610      	mov	r0, r2
 80043e4:	79fa      	ldrb	r2, [r7, #7]
 80043e6:	490a      	ldr	r1, [pc, #40]	; (8004410 <USART_CR1_wr+0x70>)
 80043e8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80043ec:	4303      	orrs	r3, r0
 80043ee:	6013      	str	r3, [r2, #0]
 80043f0:	e009      	b.n	8004406 <USART_CR1_wr+0x66>
 80043f2:	79fb      	ldrb	r3, [r7, #7]
 80043f4:	4a06      	ldr	r2, [pc, #24]	; (8004410 <USART_CR1_wr+0x70>)
 80043f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	79ba      	ldrb	r2, [r7, #6]
 80043fe:	2101      	movs	r1, #1
 8004400:	fa01 f202 	lsl.w	r2, r1, r2
 8004404:	4013      	ands	r3, r2
	// case DEDT:
	// 	USART_CR1[USART_ON].U_CR1->DEDT = set;
	// 	break;
	// case DEAT:
	// 	USART_CR1[USART_ON].U_CR1->DEAT = set;
}
 8004406:	4618      	mov	r0, r3
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bc90      	pop	{r4, r7}
 800440e:	4770      	bx	lr
 8004410:	20000098 	.word	0x20000098

08004414 <USART_BRR_w>:
void USART_BRR_w(uint8_t USART_ON, uint16_t baud_rate)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	4603      	mov	r3, r0
 800441c:	460a      	mov	r2, r1
 800441e:	71fb      	strb	r3, [r7, #7]
 8004420:	4613      	mov	r3, r2
 8004422:	80bb      	strh	r3, [r7, #4]
	*USART_BRR[USART_ON].bytes = baud_rate;
 8004424:	79fb      	ldrb	r3, [r7, #7]
 8004426:	4a05      	ldr	r2, [pc, #20]	; (800443c <USART_BRR_w+0x28>)
 8004428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800442c:	88ba      	ldrh	r2, [r7, #4]
 800442e:	601a      	str	r2, [r3, #0]
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr
 800443c:	2000008c 	.word	0x2000008c

08004440 <RCC_APB1ENR1_wr>:
uint32_t RCC_APB1ENR1_wr(uint8_t field, uint8_t set, bool wr)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	4603      	mov	r3, r0
 8004448:	71fb      	strb	r3, [r7, #7]
 800444a:	460b      	mov	r3, r1
 800444c:	71bb      	strb	r3, [r7, #6]
 800444e:	4613      	mov	r3, r2
 8004450:	717b      	strb	r3, [r7, #5]
	return wr ? *RCC_APB1ENR1.bytes = (*RCC_APB1ENR1.bytes & ~(1 << field)) | (set << field) : *RCC_APB1ENR1.bytes & (SETBIT << field);
 8004452:	797b      	ldrb	r3, [r7, #5]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d012      	beq.n	800447e <RCC_APB1ENR1_wr+0x3e>
 8004458:	4b10      	ldr	r3, [pc, #64]	; (800449c <RCC_APB1ENR1_wr+0x5c>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	79fa      	ldrb	r2, [r7, #7]
 8004460:	2101      	movs	r1, #1
 8004462:	fa01 f202 	lsl.w	r2, r1, r2
 8004466:	43d2      	mvns	r2, r2
 8004468:	4013      	ands	r3, r2
 800446a:	79b9      	ldrb	r1, [r7, #6]
 800446c:	79fa      	ldrb	r2, [r7, #7]
 800446e:	fa01 f202 	lsl.w	r2, r1, r2
 8004472:	4611      	mov	r1, r2
 8004474:	4a09      	ldr	r2, [pc, #36]	; (800449c <RCC_APB1ENR1_wr+0x5c>)
 8004476:	6812      	ldr	r2, [r2, #0]
 8004478:	430b      	orrs	r3, r1
 800447a:	6013      	str	r3, [r2, #0]
 800447c:	e007      	b.n	800448e <RCC_APB1ENR1_wr+0x4e>
 800447e:	4b07      	ldr	r3, [pc, #28]	; (800449c <RCC_APB1ENR1_wr+0x5c>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	79fa      	ldrb	r2, [r7, #7]
 8004486:	2101      	movs	r1, #1
 8004488:	fa01 f202 	lsl.w	r2, r1, r2
 800448c:	4013      	ands	r3, r2
}
 800448e:	4618      	mov	r0, r3
 8004490:	370c      	adds	r7, #12
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	20000080 	.word	0x20000080

080044a0 <RCC_AHB2ENR_wr>:
uint32_t RCC_AHB2ENR_wr(uint8_t field, uint8_t set, bool wr)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	4603      	mov	r3, r0
 80044a8:	71fb      	strb	r3, [r7, #7]
 80044aa:	460b      	mov	r3, r1
 80044ac:	71bb      	strb	r3, [r7, #6]
 80044ae:	4613      	mov	r3, r2
 80044b0:	717b      	strb	r3, [r7, #5]
	return wr ? *RCC_AHB2ENR.bytes = (*RCC_AHB2ENR.bytes & ~(1 << field)) | (set << field) : *RCC_AHB2ENR.bytes & (SETBIT << field);
 80044b2:	797b      	ldrb	r3, [r7, #5]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d012      	beq.n	80044de <RCC_AHB2ENR_wr+0x3e>
 80044b8:	4b10      	ldr	r3, [pc, #64]	; (80044fc <RCC_AHB2ENR_wr+0x5c>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	79fa      	ldrb	r2, [r7, #7]
 80044c0:	2101      	movs	r1, #1
 80044c2:	fa01 f202 	lsl.w	r2, r1, r2
 80044c6:	43d2      	mvns	r2, r2
 80044c8:	4013      	ands	r3, r2
 80044ca:	79b9      	ldrb	r1, [r7, #6]
 80044cc:	79fa      	ldrb	r2, [r7, #7]
 80044ce:	fa01 f202 	lsl.w	r2, r1, r2
 80044d2:	4611      	mov	r1, r2
 80044d4:	4a09      	ldr	r2, [pc, #36]	; (80044fc <RCC_AHB2ENR_wr+0x5c>)
 80044d6:	6812      	ldr	r2, [r2, #0]
 80044d8:	430b      	orrs	r3, r1
 80044da:	6013      	str	r3, [r2, #0]
 80044dc:	e007      	b.n	80044ee <RCC_AHB2ENR_wr+0x4e>
 80044de:	4b07      	ldr	r3, [pc, #28]	; (80044fc <RCC_AHB2ENR_wr+0x5c>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	79fa      	ldrb	r2, [r7, #7]
 80044e6:	2101      	movs	r1, #1
 80044e8:	fa01 f202 	lsl.w	r2, r1, r2
 80044ec:	4013      	ands	r3, r2
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	370c      	adds	r7, #12
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	2000007c 	.word	0x2000007c

08004500 <GPIO_AFR_w>:
void GPIO_AFR_w(uint8_t port, uint8_t field, uint32_t AF, bool is_high)
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	603a      	str	r2, [r7, #0]
 8004508:	461a      	mov	r2, r3
 800450a:	4603      	mov	r3, r0
 800450c:	71fb      	strb	r3, [r7, #7]
 800450e:	460b      	mov	r3, r1
 8004510:	71bb      	strb	r3, [r7, #6]
 8004512:	4613      	mov	r3, r2
 8004514:	717b      	strb	r3, [r7, #5]
	if (is_high)
 8004516:	797b      	ldrb	r3, [r7, #5]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d002      	beq.n	8004522 <GPIO_AFR_w+0x22>
		port += PORT_END;
 800451c:	79fb      	ldrb	r3, [r7, #7]
 800451e:	3303      	adds	r3, #3
 8004520:	71fb      	strb	r3, [r7, #7]

	for (int i = field; i < field + 4; i++)
 8004522:	79bb      	ldrb	r3, [r7, #6]
 8004524:	60fb      	str	r3, [r7, #12]
 8004526:	e01d      	b.n	8004564 <GPIO_AFR_w+0x64>
	{
		*GPIO_AFR[port].bytes = (*GPIO_AFR[port].bytes & ~(1 << i)) | ((AF << field) & (1 << i));
 8004528:	79fb      	ldrb	r3, [r7, #7]
 800452a:	4a14      	ldr	r2, [pc, #80]	; (800457c <GPIO_AFR_w+0x7c>)
 800452c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2101      	movs	r1, #1
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	fa01 f202 	lsl.w	r2, r1, r2
 800453a:	43d2      	mvns	r2, r2
 800453c:	ea03 0102 	and.w	r1, r3, r2
 8004540:	79bb      	ldrb	r3, [r7, #6]
 8004542:	683a      	ldr	r2, [r7, #0]
 8004544:	fa02 f303 	lsl.w	r3, r2, r3
 8004548:	2001      	movs	r0, #1
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	fa00 f202 	lsl.w	r2, r0, r2
 8004550:	401a      	ands	r2, r3
 8004552:	79fb      	ldrb	r3, [r7, #7]
 8004554:	4809      	ldr	r0, [pc, #36]	; (800457c <GPIO_AFR_w+0x7c>)
 8004556:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800455a:	430a      	orrs	r2, r1
 800455c:	601a      	str	r2, [r3, #0]
	for (int i = field; i < field + 4; i++)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	3301      	adds	r3, #1
 8004562:	60fb      	str	r3, [r7, #12]
 8004564:	79bb      	ldrb	r3, [r7, #6]
 8004566:	3303      	adds	r3, #3
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	429a      	cmp	r2, r3
 800456c:	dddc      	ble.n	8004528 <GPIO_AFR_w+0x28>
	}
}
 800456e:	bf00      	nop
 8004570:	bf00      	nop
 8004572:	3714      	adds	r7, #20
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr
 800457c:	20000064 	.word	0x20000064

08004580 <GPIO_BSRR_w>:
void GPIO_BSRR_w(uint8_t port, uint8_t field, uint8_t set)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	4603      	mov	r3, r0
 8004588:	71fb      	strb	r3, [r7, #7]
 800458a:	460b      	mov	r3, r1
 800458c:	71bb      	strb	r3, [r7, #6]
 800458e:	4613      	mov	r3, r2
 8004590:	717b      	strb	r3, [r7, #5]
	*GPIO_BSRR[port].bytes = (*GPIO_BSRR[port].bytes & ~(1 << field)) | (set << field);
 8004592:	79fb      	ldrb	r3, [r7, #7]
 8004594:	4a0d      	ldr	r2, [pc, #52]	; (80045cc <GPIO_BSRR_w+0x4c>)
 8004596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	79ba      	ldrb	r2, [r7, #6]
 800459e:	2101      	movs	r1, #1
 80045a0:	fa01 f202 	lsl.w	r2, r1, r2
 80045a4:	43d2      	mvns	r2, r2
 80045a6:	401a      	ands	r2, r3
 80045a8:	7979      	ldrb	r1, [r7, #5]
 80045aa:	79bb      	ldrb	r3, [r7, #6]
 80045ac:	fa01 f303 	lsl.w	r3, r1, r3
 80045b0:	4618      	mov	r0, r3
 80045b2:	79fb      	ldrb	r3, [r7, #7]
 80045b4:	4905      	ldr	r1, [pc, #20]	; (80045cc <GPIO_BSRR_w+0x4c>)
 80045b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80045ba:	4302      	orrs	r2, r0
 80045bc:	601a      	str	r2, [r3, #0]
}
 80045be:	bf00      	nop
 80045c0:	370c      	adds	r7, #12
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	2000004c 	.word	0x2000004c

080045d0 <GPIO_MODER_w>:

void GPIO_MODER_w(uint8_t port, uint8_t field, uint8_t mode)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	4603      	mov	r3, r0
 80045d8:	71fb      	strb	r3, [r7, #7]
 80045da:	460b      	mov	r3, r1
 80045dc:	71bb      	strb	r3, [r7, #6]
 80045de:	4613      	mov	r3, r2
 80045e0:	717b      	strb	r3, [r7, #5]
	switch (field)
 80045e2:	79bb      	ldrb	r3, [r7, #6]
 80045e4:	2b0f      	cmp	r3, #15
 80045e6:	f200 80f3 	bhi.w	80047d0 <GPIO_MODER_w+0x200>
 80045ea:	a201      	add	r2, pc, #4	; (adr r2, 80045f0 <GPIO_MODER_w+0x20>)
 80045ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f0:	08004631 	.word	0x08004631
 80045f4:	0800464b 	.word	0x0800464b
 80045f8:	08004665 	.word	0x08004665
 80045fc:	0800467f 	.word	0x0800467f
 8004600:	08004699 	.word	0x08004699
 8004604:	080046b3 	.word	0x080046b3
 8004608:	080046cd 	.word	0x080046cd
 800460c:	080046e7 	.word	0x080046e7
 8004610:	08004701 	.word	0x08004701
 8004614:	0800471b 	.word	0x0800471b
 8004618:	08004735 	.word	0x08004735
 800461c:	0800474f 	.word	0x0800474f
 8004620:	08004769 	.word	0x08004769
 8004624:	08004783 	.word	0x08004783
 8004628:	0800479d 	.word	0x0800479d
 800462c:	080047b7 	.word	0x080047b7
	{
	case MODE0:
		GPIO_MODER[port].MODE->MODE0 = mode;
 8004630:	79fb      	ldrb	r3, [r7, #7]
 8004632:	4a6a      	ldr	r2, [pc, #424]	; (80047dc <GPIO_MODER_w+0x20c>)
 8004634:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004638:	797b      	ldrb	r3, [r7, #5]
 800463a:	f003 0303 	and.w	r3, r3, #3
 800463e:	b2d9      	uxtb	r1, r3
 8004640:	7813      	ldrb	r3, [r2, #0]
 8004642:	f361 0301 	bfi	r3, r1, #0, #2
 8004646:	7013      	strb	r3, [r2, #0]
		break;
 8004648:	e0c2      	b.n	80047d0 <GPIO_MODER_w+0x200>
	case MODE1:
		GPIO_MODER[port].MODE->MODE1 = mode;
 800464a:	79fb      	ldrb	r3, [r7, #7]
 800464c:	4a63      	ldr	r2, [pc, #396]	; (80047dc <GPIO_MODER_w+0x20c>)
 800464e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004652:	797b      	ldrb	r3, [r7, #5]
 8004654:	f003 0303 	and.w	r3, r3, #3
 8004658:	b2d9      	uxtb	r1, r3
 800465a:	7813      	ldrb	r3, [r2, #0]
 800465c:	f361 0383 	bfi	r3, r1, #2, #2
 8004660:	7013      	strb	r3, [r2, #0]
		break;
 8004662:	e0b5      	b.n	80047d0 <GPIO_MODER_w+0x200>
	case MODE2:
		GPIO_MODER[port].MODE->MODE2 = mode;
 8004664:	79fb      	ldrb	r3, [r7, #7]
 8004666:	4a5d      	ldr	r2, [pc, #372]	; (80047dc <GPIO_MODER_w+0x20c>)
 8004668:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800466c:	797b      	ldrb	r3, [r7, #5]
 800466e:	f003 0303 	and.w	r3, r3, #3
 8004672:	b2d9      	uxtb	r1, r3
 8004674:	7813      	ldrb	r3, [r2, #0]
 8004676:	f361 1305 	bfi	r3, r1, #4, #2
 800467a:	7013      	strb	r3, [r2, #0]
		break;
 800467c:	e0a8      	b.n	80047d0 <GPIO_MODER_w+0x200>
	case MODE3:
		GPIO_MODER[port].MODE->MODE3 = mode;
 800467e:	79fb      	ldrb	r3, [r7, #7]
 8004680:	4a56      	ldr	r2, [pc, #344]	; (80047dc <GPIO_MODER_w+0x20c>)
 8004682:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004686:	797b      	ldrb	r3, [r7, #5]
 8004688:	f003 0303 	and.w	r3, r3, #3
 800468c:	b2d9      	uxtb	r1, r3
 800468e:	7813      	ldrb	r3, [r2, #0]
 8004690:	f361 1387 	bfi	r3, r1, #6, #2
 8004694:	7013      	strb	r3, [r2, #0]
		break;
 8004696:	e09b      	b.n	80047d0 <GPIO_MODER_w+0x200>
	case MODE4:
		GPIO_MODER[port].MODE->MODE4 = mode;
 8004698:	79fb      	ldrb	r3, [r7, #7]
 800469a:	4a50      	ldr	r2, [pc, #320]	; (80047dc <GPIO_MODER_w+0x20c>)
 800469c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80046a0:	797b      	ldrb	r3, [r7, #5]
 80046a2:	f003 0303 	and.w	r3, r3, #3
 80046a6:	b2d9      	uxtb	r1, r3
 80046a8:	7853      	ldrb	r3, [r2, #1]
 80046aa:	f361 0301 	bfi	r3, r1, #0, #2
 80046ae:	7053      	strb	r3, [r2, #1]
		break;
 80046b0:	e08e      	b.n	80047d0 <GPIO_MODER_w+0x200>
	case MODE5:
		GPIO_MODER[port].MODE->MODE5 = mode;
 80046b2:	79fb      	ldrb	r3, [r7, #7]
 80046b4:	4a49      	ldr	r2, [pc, #292]	; (80047dc <GPIO_MODER_w+0x20c>)
 80046b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80046ba:	797b      	ldrb	r3, [r7, #5]
 80046bc:	f003 0303 	and.w	r3, r3, #3
 80046c0:	b2d9      	uxtb	r1, r3
 80046c2:	7853      	ldrb	r3, [r2, #1]
 80046c4:	f361 0383 	bfi	r3, r1, #2, #2
 80046c8:	7053      	strb	r3, [r2, #1]
		break;
 80046ca:	e081      	b.n	80047d0 <GPIO_MODER_w+0x200>
	case MODE6:
		GPIO_MODER[port].MODE->MODE6 = mode;
 80046cc:	79fb      	ldrb	r3, [r7, #7]
 80046ce:	4a43      	ldr	r2, [pc, #268]	; (80047dc <GPIO_MODER_w+0x20c>)
 80046d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80046d4:	797b      	ldrb	r3, [r7, #5]
 80046d6:	f003 0303 	and.w	r3, r3, #3
 80046da:	b2d9      	uxtb	r1, r3
 80046dc:	7853      	ldrb	r3, [r2, #1]
 80046de:	f361 1305 	bfi	r3, r1, #4, #2
 80046e2:	7053      	strb	r3, [r2, #1]
		break;
 80046e4:	e074      	b.n	80047d0 <GPIO_MODER_w+0x200>
	case MODE7:
		GPIO_MODER[port].MODE->MODE7 = mode;
 80046e6:	79fb      	ldrb	r3, [r7, #7]
 80046e8:	4a3c      	ldr	r2, [pc, #240]	; (80047dc <GPIO_MODER_w+0x20c>)
 80046ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80046ee:	797b      	ldrb	r3, [r7, #5]
 80046f0:	f003 0303 	and.w	r3, r3, #3
 80046f4:	b2d9      	uxtb	r1, r3
 80046f6:	7853      	ldrb	r3, [r2, #1]
 80046f8:	f361 1387 	bfi	r3, r1, #6, #2
 80046fc:	7053      	strb	r3, [r2, #1]
		break;
 80046fe:	e067      	b.n	80047d0 <GPIO_MODER_w+0x200>
	case MODE8:
		GPIO_MODER[port].MODE->MODE8 = mode;
 8004700:	79fb      	ldrb	r3, [r7, #7]
 8004702:	4a36      	ldr	r2, [pc, #216]	; (80047dc <GPIO_MODER_w+0x20c>)
 8004704:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004708:	797b      	ldrb	r3, [r7, #5]
 800470a:	f003 0303 	and.w	r3, r3, #3
 800470e:	b2d9      	uxtb	r1, r3
 8004710:	7893      	ldrb	r3, [r2, #2]
 8004712:	f361 0301 	bfi	r3, r1, #0, #2
 8004716:	7093      	strb	r3, [r2, #2]
		break;
 8004718:	e05a      	b.n	80047d0 <GPIO_MODER_w+0x200>
	case MODE9:
		GPIO_MODER[port].MODE->MODE9 = mode;
 800471a:	79fb      	ldrb	r3, [r7, #7]
 800471c:	4a2f      	ldr	r2, [pc, #188]	; (80047dc <GPIO_MODER_w+0x20c>)
 800471e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004722:	797b      	ldrb	r3, [r7, #5]
 8004724:	f003 0303 	and.w	r3, r3, #3
 8004728:	b2d9      	uxtb	r1, r3
 800472a:	7893      	ldrb	r3, [r2, #2]
 800472c:	f361 0383 	bfi	r3, r1, #2, #2
 8004730:	7093      	strb	r3, [r2, #2]
		break;
 8004732:	e04d      	b.n	80047d0 <GPIO_MODER_w+0x200>
	case MODE10:
		GPIO_MODER[port].MODE->MODE10 = mode;
 8004734:	79fb      	ldrb	r3, [r7, #7]
 8004736:	4a29      	ldr	r2, [pc, #164]	; (80047dc <GPIO_MODER_w+0x20c>)
 8004738:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800473c:	797b      	ldrb	r3, [r7, #5]
 800473e:	f003 0303 	and.w	r3, r3, #3
 8004742:	b2d9      	uxtb	r1, r3
 8004744:	7893      	ldrb	r3, [r2, #2]
 8004746:	f361 1305 	bfi	r3, r1, #4, #2
 800474a:	7093      	strb	r3, [r2, #2]
		break;
 800474c:	e040      	b.n	80047d0 <GPIO_MODER_w+0x200>
	case MODE11:
		GPIO_MODER[port].MODE->MODE11 = mode;
 800474e:	79fb      	ldrb	r3, [r7, #7]
 8004750:	4a22      	ldr	r2, [pc, #136]	; (80047dc <GPIO_MODER_w+0x20c>)
 8004752:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004756:	797b      	ldrb	r3, [r7, #5]
 8004758:	f003 0303 	and.w	r3, r3, #3
 800475c:	b2d9      	uxtb	r1, r3
 800475e:	7893      	ldrb	r3, [r2, #2]
 8004760:	f361 1387 	bfi	r3, r1, #6, #2
 8004764:	7093      	strb	r3, [r2, #2]
		break;
 8004766:	e033      	b.n	80047d0 <GPIO_MODER_w+0x200>
	case MODE12:
		GPIO_MODER[port].MODE->MODE12 = mode;
 8004768:	79fb      	ldrb	r3, [r7, #7]
 800476a:	4a1c      	ldr	r2, [pc, #112]	; (80047dc <GPIO_MODER_w+0x20c>)
 800476c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004770:	797b      	ldrb	r3, [r7, #5]
 8004772:	f003 0303 	and.w	r3, r3, #3
 8004776:	b2d9      	uxtb	r1, r3
 8004778:	78d3      	ldrb	r3, [r2, #3]
 800477a:	f361 0301 	bfi	r3, r1, #0, #2
 800477e:	70d3      	strb	r3, [r2, #3]
		break;
 8004780:	e026      	b.n	80047d0 <GPIO_MODER_w+0x200>
	case MODE13:
		GPIO_MODER[port].MODE->MODE13 = mode;
 8004782:	79fb      	ldrb	r3, [r7, #7]
 8004784:	4a15      	ldr	r2, [pc, #84]	; (80047dc <GPIO_MODER_w+0x20c>)
 8004786:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800478a:	797b      	ldrb	r3, [r7, #5]
 800478c:	f003 0303 	and.w	r3, r3, #3
 8004790:	b2d9      	uxtb	r1, r3
 8004792:	78d3      	ldrb	r3, [r2, #3]
 8004794:	f361 0383 	bfi	r3, r1, #2, #2
 8004798:	70d3      	strb	r3, [r2, #3]
		break;
 800479a:	e019      	b.n	80047d0 <GPIO_MODER_w+0x200>
	case MODE14:
		GPIO_MODER[port].MODE->MODE14 = mode;
 800479c:	79fb      	ldrb	r3, [r7, #7]
 800479e:	4a0f      	ldr	r2, [pc, #60]	; (80047dc <GPIO_MODER_w+0x20c>)
 80047a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80047a4:	797b      	ldrb	r3, [r7, #5]
 80047a6:	f003 0303 	and.w	r3, r3, #3
 80047aa:	b2d9      	uxtb	r1, r3
 80047ac:	78d3      	ldrb	r3, [r2, #3]
 80047ae:	f361 1305 	bfi	r3, r1, #4, #2
 80047b2:	70d3      	strb	r3, [r2, #3]
		break;
 80047b4:	e00c      	b.n	80047d0 <GPIO_MODER_w+0x200>
	case MODE15:
		GPIO_MODER[port].MODE->MODE15 = mode;
 80047b6:	79fb      	ldrb	r3, [r7, #7]
 80047b8:	4a08      	ldr	r2, [pc, #32]	; (80047dc <GPIO_MODER_w+0x20c>)
 80047ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80047be:	797b      	ldrb	r3, [r7, #5]
 80047c0:	f003 0303 	and.w	r3, r3, #3
 80047c4:	b2d9      	uxtb	r1, r3
 80047c6:	78d3      	ldrb	r3, [r2, #3]
 80047c8:	f361 1387 	bfi	r3, r1, #6, #2
 80047cc:	70d3      	strb	r3, [r2, #3]
		break;
 80047ce:	bf00      	nop
	}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr
 80047dc:	20000040 	.word	0x20000040

080047e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80047e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004818 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80047e4:	f7ff f84e 	bl	8003884 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80047e8:	480c      	ldr	r0, [pc, #48]	; (800481c <LoopForever+0x6>)
  ldr r1, =_edata
 80047ea:	490d      	ldr	r1, [pc, #52]	; (8004820 <LoopForever+0xa>)
  ldr r2, =_sidata
 80047ec:	4a0d      	ldr	r2, [pc, #52]	; (8004824 <LoopForever+0xe>)
  movs r3, #0
 80047ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80047f0:	e002      	b.n	80047f8 <LoopCopyDataInit>

080047f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80047f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80047f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80047f6:	3304      	adds	r3, #4

080047f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80047f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80047fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80047fc:	d3f9      	bcc.n	80047f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80047fe:	4a0a      	ldr	r2, [pc, #40]	; (8004828 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004800:	4c0a      	ldr	r4, [pc, #40]	; (800482c <LoopForever+0x16>)
  movs r3, #0
 8004802:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004804:	e001      	b.n	800480a <LoopFillZerobss>

08004806 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004806:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004808:	3204      	adds	r2, #4

0800480a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800480a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800480c:	d3fb      	bcc.n	8004806 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800480e:	f004 f80f 	bl	8008830 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004812:	f7fd f9d9 	bl	8001bc8 <main>

08004816 <LoopForever>:

LoopForever:
    b LoopForever
 8004816:	e7fe      	b.n	8004816 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004818:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800481c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004820:	200003bc 	.word	0x200003bc
  ldr r2, =_sidata
 8004824:	0800c280 	.word	0x0800c280
  ldr r2, =_sbss
 8004828:	200003c0 	.word	0x200003c0
  ldr r4, =_ebss
 800482c:	20001518 	.word	0x20001518

08004830 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004830:	e7fe      	b.n	8004830 <ADC1_2_IRQHandler>

08004832 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004832:	b580      	push	{r7, lr}
 8004834:	b082      	sub	sp, #8
 8004836:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004838:	2300      	movs	r3, #0
 800483a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800483c:	2003      	movs	r0, #3
 800483e:	f000 f8de 	bl	80049fe <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004842:	2000      	movs	r0, #0
 8004844:	f7fe ff16 	bl	8003674 <HAL_InitTick>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d002      	beq.n	8004854 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	71fb      	strb	r3, [r7, #7]
 8004852:	e001      	b.n	8004858 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004854:	f7fe feea 	bl	800362c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004858:	79fb      	ldrb	r3, [r7, #7]
}
 800485a:	4618      	mov	r0, r3
 800485c:	3708      	adds	r7, #8
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
	...

08004864 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004864:	b480      	push	{r7}
 8004866:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004868:	4b06      	ldr	r3, [pc, #24]	; (8004884 <HAL_IncTick+0x20>)
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	461a      	mov	r2, r3
 800486e:	4b06      	ldr	r3, [pc, #24]	; (8004888 <HAL_IncTick+0x24>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4413      	add	r3, r2
 8004874:	4a04      	ldr	r2, [pc, #16]	; (8004888 <HAL_IncTick+0x24>)
 8004876:	6013      	str	r3, [r2, #0]
}
 8004878:	bf00      	nop
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	200001e0 	.word	0x200001e0
 8004888:	2000070c 	.word	0x2000070c

0800488c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800488c:	b480      	push	{r7}
 800488e:	af00      	add	r7, sp, #0
  return uwTick;
 8004890:	4b03      	ldr	r3, [pc, #12]	; (80048a0 <HAL_GetTick+0x14>)
 8004892:	681b      	ldr	r3, [r3, #0]
}
 8004894:	4618      	mov	r0, r3
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	2000070c 	.word	0x2000070c

080048a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f003 0307 	and.w	r3, r3, #7
 80048b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048b4:	4b0c      	ldr	r3, [pc, #48]	; (80048e8 <__NVIC_SetPriorityGrouping+0x44>)
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048ba:	68ba      	ldr	r2, [r7, #8]
 80048bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80048c0:	4013      	ands	r3, r2
 80048c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80048d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048d6:	4a04      	ldr	r2, [pc, #16]	; (80048e8 <__NVIC_SetPriorityGrouping+0x44>)
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	60d3      	str	r3, [r2, #12]
}
 80048dc:	bf00      	nop
 80048de:	3714      	adds	r7, #20
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr
 80048e8:	e000ed00 	.word	0xe000ed00

080048ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80048ec:	b480      	push	{r7}
 80048ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048f0:	4b04      	ldr	r3, [pc, #16]	; (8004904 <__NVIC_GetPriorityGrouping+0x18>)
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	0a1b      	lsrs	r3, r3, #8
 80048f6:	f003 0307 	and.w	r3, r3, #7
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr
 8004904:	e000ed00 	.word	0xe000ed00

08004908 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	4603      	mov	r3, r0
 8004910:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004916:	2b00      	cmp	r3, #0
 8004918:	db0b      	blt.n	8004932 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800491a:	79fb      	ldrb	r3, [r7, #7]
 800491c:	f003 021f 	and.w	r2, r3, #31
 8004920:	4907      	ldr	r1, [pc, #28]	; (8004940 <__NVIC_EnableIRQ+0x38>)
 8004922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004926:	095b      	lsrs	r3, r3, #5
 8004928:	2001      	movs	r0, #1
 800492a:	fa00 f202 	lsl.w	r2, r0, r2
 800492e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004932:	bf00      	nop
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	e000e100 	.word	0xe000e100

08004944 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	4603      	mov	r3, r0
 800494c:	6039      	str	r1, [r7, #0]
 800494e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004954:	2b00      	cmp	r3, #0
 8004956:	db0a      	blt.n	800496e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	b2da      	uxtb	r2, r3
 800495c:	490c      	ldr	r1, [pc, #48]	; (8004990 <__NVIC_SetPriority+0x4c>)
 800495e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004962:	0112      	lsls	r2, r2, #4
 8004964:	b2d2      	uxtb	r2, r2
 8004966:	440b      	add	r3, r1
 8004968:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800496c:	e00a      	b.n	8004984 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	b2da      	uxtb	r2, r3
 8004972:	4908      	ldr	r1, [pc, #32]	; (8004994 <__NVIC_SetPriority+0x50>)
 8004974:	79fb      	ldrb	r3, [r7, #7]
 8004976:	f003 030f 	and.w	r3, r3, #15
 800497a:	3b04      	subs	r3, #4
 800497c:	0112      	lsls	r2, r2, #4
 800497e:	b2d2      	uxtb	r2, r2
 8004980:	440b      	add	r3, r1
 8004982:	761a      	strb	r2, [r3, #24]
}
 8004984:	bf00      	nop
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr
 8004990:	e000e100 	.word	0xe000e100
 8004994:	e000ed00 	.word	0xe000ed00

08004998 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004998:	b480      	push	{r7}
 800499a:	b089      	sub	sp, #36	; 0x24
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f003 0307 	and.w	r3, r3, #7
 80049aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	f1c3 0307 	rsb	r3, r3, #7
 80049b2:	2b04      	cmp	r3, #4
 80049b4:	bf28      	it	cs
 80049b6:	2304      	movcs	r3, #4
 80049b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	3304      	adds	r3, #4
 80049be:	2b06      	cmp	r3, #6
 80049c0:	d902      	bls.n	80049c8 <NVIC_EncodePriority+0x30>
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	3b03      	subs	r3, #3
 80049c6:	e000      	b.n	80049ca <NVIC_EncodePriority+0x32>
 80049c8:	2300      	movs	r3, #0
 80049ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	fa02 f303 	lsl.w	r3, r2, r3
 80049d6:	43da      	mvns	r2, r3
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	401a      	ands	r2, r3
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	fa01 f303 	lsl.w	r3, r1, r3
 80049ea:	43d9      	mvns	r1, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049f0:	4313      	orrs	r3, r2
         );
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3724      	adds	r7, #36	; 0x24
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr

080049fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b082      	sub	sp, #8
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f7ff ff4c 	bl	80048a4 <__NVIC_SetPriorityGrouping>
}
 8004a0c:	bf00      	nop
 8004a0e:	3708      	adds	r7, #8
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b086      	sub	sp, #24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
 8004a20:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004a22:	2300      	movs	r3, #0
 8004a24:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004a26:	f7ff ff61 	bl	80048ec <__NVIC_GetPriorityGrouping>
 8004a2a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	68b9      	ldr	r1, [r7, #8]
 8004a30:	6978      	ldr	r0, [r7, #20]
 8004a32:	f7ff ffb1 	bl	8004998 <NVIC_EncodePriority>
 8004a36:	4602      	mov	r2, r0
 8004a38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a3c:	4611      	mov	r1, r2
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7ff ff80 	bl	8004944 <__NVIC_SetPriority>
}
 8004a44:	bf00      	nop
 8004a46:	3718      	adds	r7, #24
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	4603      	mov	r3, r0
 8004a54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7ff ff54 	bl	8004908 <__NVIC_EnableIRQ>
}
 8004a60:	bf00      	nop
 8004a62:	3708      	adds	r7, #8
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004a6c:	4b04      	ldr	r3, [pc, #16]	; (8004a80 <HAL_PWREx_GetVoltageRange+0x18>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	40007000 	.word	0x40007000

08004a84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b085      	sub	sp, #20
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a92:	d130      	bne.n	8004af6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a94:	4b23      	ldr	r3, [pc, #140]	; (8004b24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aa0:	d038      	beq.n	8004b14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004aa2:	4b20      	ldr	r3, [pc, #128]	; (8004b24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004aaa:	4a1e      	ldr	r2, [pc, #120]	; (8004b24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004aac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ab0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ab2:	4b1d      	ldr	r3, [pc, #116]	; (8004b28 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2232      	movs	r2, #50	; 0x32
 8004ab8:	fb02 f303 	mul.w	r3, r2, r3
 8004abc:	4a1b      	ldr	r2, [pc, #108]	; (8004b2c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004abe:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac2:	0c9b      	lsrs	r3, r3, #18
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ac8:	e002      	b.n	8004ad0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	3b01      	subs	r3, #1
 8004ace:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ad0:	4b14      	ldr	r3, [pc, #80]	; (8004b24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004adc:	d102      	bne.n	8004ae4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1f2      	bne.n	8004aca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ae4:	4b0f      	ldr	r3, [pc, #60]	; (8004b24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ae6:	695b      	ldr	r3, [r3, #20]
 8004ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004af0:	d110      	bne.n	8004b14 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e00f      	b.n	8004b16 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004af6:	4b0b      	ldr	r3, [pc, #44]	; (8004b24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004afe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b02:	d007      	beq.n	8004b14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004b04:	4b07      	ldr	r3, [pc, #28]	; (8004b24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b0c:	4a05      	ldr	r2, [pc, #20]	; (8004b24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b12:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3714      	adds	r7, #20
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	40007000 	.word	0x40007000
 8004b28:	2000003c 	.word	0x2000003c
 8004b2c:	431bde83 	.word	0x431bde83

08004b30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b088      	sub	sp, #32
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d101      	bne.n	8004b42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e3ca      	b.n	80052d8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b42:	4b97      	ldr	r3, [pc, #604]	; (8004da0 <HAL_RCC_OscConfig+0x270>)
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f003 030c 	and.w	r3, r3, #12
 8004b4a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b4c:	4b94      	ldr	r3, [pc, #592]	; (8004da0 <HAL_RCC_OscConfig+0x270>)
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	f003 0303 	and.w	r3, r3, #3
 8004b54:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0310 	and.w	r3, r3, #16
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f000 80e4 	beq.w	8004d2c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d007      	beq.n	8004b7a <HAL_RCC_OscConfig+0x4a>
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	2b0c      	cmp	r3, #12
 8004b6e:	f040 808b 	bne.w	8004c88 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	f040 8087 	bne.w	8004c88 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b7a:	4b89      	ldr	r3, [pc, #548]	; (8004da0 <HAL_RCC_OscConfig+0x270>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d005      	beq.n	8004b92 <HAL_RCC_OscConfig+0x62>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e3a2      	b.n	80052d8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a1a      	ldr	r2, [r3, #32]
 8004b96:	4b82      	ldr	r3, [pc, #520]	; (8004da0 <HAL_RCC_OscConfig+0x270>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0308 	and.w	r3, r3, #8
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d004      	beq.n	8004bac <HAL_RCC_OscConfig+0x7c>
 8004ba2:	4b7f      	ldr	r3, [pc, #508]	; (8004da0 <HAL_RCC_OscConfig+0x270>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004baa:	e005      	b.n	8004bb8 <HAL_RCC_OscConfig+0x88>
 8004bac:	4b7c      	ldr	r3, [pc, #496]	; (8004da0 <HAL_RCC_OscConfig+0x270>)
 8004bae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bb2:	091b      	lsrs	r3, r3, #4
 8004bb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d223      	bcs.n	8004c04 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a1b      	ldr	r3, [r3, #32]
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f000 fd71 	bl	80056a8 <RCC_SetFlashLatencyFromMSIRange>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d001      	beq.n	8004bd0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e383      	b.n	80052d8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bd0:	4b73      	ldr	r3, [pc, #460]	; (8004da0 <HAL_RCC_OscConfig+0x270>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a72      	ldr	r2, [pc, #456]	; (8004da0 <HAL_RCC_OscConfig+0x270>)
 8004bd6:	f043 0308 	orr.w	r3, r3, #8
 8004bda:	6013      	str	r3, [r2, #0]
 8004bdc:	4b70      	ldr	r3, [pc, #448]	; (8004da0 <HAL_RCC_OscConfig+0x270>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a1b      	ldr	r3, [r3, #32]
 8004be8:	496d      	ldr	r1, [pc, #436]	; (8004da0 <HAL_RCC_OscConfig+0x270>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bee:	4b6c      	ldr	r3, [pc, #432]	; (8004da0 <HAL_RCC_OscConfig+0x270>)
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	69db      	ldr	r3, [r3, #28]
 8004bfa:	021b      	lsls	r3, r3, #8
 8004bfc:	4968      	ldr	r1, [pc, #416]	; (8004da0 <HAL_RCC_OscConfig+0x270>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	604b      	str	r3, [r1, #4]
 8004c02:	e025      	b.n	8004c50 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c04:	4b66      	ldr	r3, [pc, #408]	; (8004da0 <HAL_RCC_OscConfig+0x270>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a65      	ldr	r2, [pc, #404]	; (8004da0 <HAL_RCC_OscConfig+0x270>)
 8004c0a:	f043 0308 	orr.w	r3, r3, #8
 8004c0e:	6013      	str	r3, [r2, #0]
 8004c10:	4b63      	ldr	r3, [pc, #396]	; (8004da0 <HAL_RCC_OscConfig+0x270>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a1b      	ldr	r3, [r3, #32]
 8004c1c:	4960      	ldr	r1, [pc, #384]	; (8004da0 <HAL_RCC_OscConfig+0x270>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c22:	4b5f      	ldr	r3, [pc, #380]	; (8004da0 <HAL_RCC_OscConfig+0x270>)
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	021b      	lsls	r3, r3, #8
 8004c30:	495b      	ldr	r1, [pc, #364]	; (8004da0 <HAL_RCC_OscConfig+0x270>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d109      	bne.n	8004c50 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a1b      	ldr	r3, [r3, #32]
 8004c40:	4618      	mov	r0, r3
 8004c42:	f000 fd31 	bl	80056a8 <RCC_SetFlashLatencyFromMSIRange>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d001      	beq.n	8004c50 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e343      	b.n	80052d8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c50:	f000 fc4a 	bl	80054e8 <HAL_RCC_GetSysClockFreq>
 8004c54:	4602      	mov	r2, r0
 8004c56:	4b52      	ldr	r3, [pc, #328]	; (8004da0 <HAL_RCC_OscConfig+0x270>)
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	091b      	lsrs	r3, r3, #4
 8004c5c:	f003 030f 	and.w	r3, r3, #15
 8004c60:	4950      	ldr	r1, [pc, #320]	; (8004da4 <HAL_RCC_OscConfig+0x274>)
 8004c62:	5ccb      	ldrb	r3, [r1, r3]
 8004c64:	f003 031f 	and.w	r3, r3, #31
 8004c68:	fa22 f303 	lsr.w	r3, r2, r3
 8004c6c:	4a4e      	ldr	r2, [pc, #312]	; (8004da8 <HAL_RCC_OscConfig+0x278>)
 8004c6e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004c70:	4b4e      	ldr	r3, [pc, #312]	; (8004dac <HAL_RCC_OscConfig+0x27c>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4618      	mov	r0, r3
 8004c76:	f7fe fcfd 	bl	8003674 <HAL_InitTick>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004c7e:	7bfb      	ldrb	r3, [r7, #15]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d052      	beq.n	8004d2a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004c84:	7bfb      	ldrb	r3, [r7, #15]
 8004c86:	e327      	b.n	80052d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d032      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004c90:	4b43      	ldr	r3, [pc, #268]	; (8004da0 <HAL_RCC_OscConfig+0x270>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a42      	ldr	r2, [pc, #264]	; (8004da0 <HAL_RCC_OscConfig+0x270>)
 8004c96:	f043 0301 	orr.w	r3, r3, #1
 8004c9a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c9c:	f7ff fdf6 	bl	800488c <HAL_GetTick>
 8004ca0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ca2:	e008      	b.n	8004cb6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ca4:	f7ff fdf2 	bl	800488c <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e310      	b.n	80052d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004cb6:	4b3a      	ldr	r3, [pc, #232]	; (8004da0 <HAL_RCC_OscConfig+0x270>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d0f0      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004cc2:	4b37      	ldr	r3, [pc, #220]	; (8004da0 <HAL_RCC_OscConfig+0x270>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a36      	ldr	r2, [pc, #216]	; (8004da0 <HAL_RCC_OscConfig+0x270>)
 8004cc8:	f043 0308 	orr.w	r3, r3, #8
 8004ccc:	6013      	str	r3, [r2, #0]
 8004cce:	4b34      	ldr	r3, [pc, #208]	; (8004da0 <HAL_RCC_OscConfig+0x270>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	4931      	ldr	r1, [pc, #196]	; (8004da0 <HAL_RCC_OscConfig+0x270>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ce0:	4b2f      	ldr	r3, [pc, #188]	; (8004da0 <HAL_RCC_OscConfig+0x270>)
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	69db      	ldr	r3, [r3, #28]
 8004cec:	021b      	lsls	r3, r3, #8
 8004cee:	492c      	ldr	r1, [pc, #176]	; (8004da0 <HAL_RCC_OscConfig+0x270>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	604b      	str	r3, [r1, #4]
 8004cf4:	e01a      	b.n	8004d2c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004cf6:	4b2a      	ldr	r3, [pc, #168]	; (8004da0 <HAL_RCC_OscConfig+0x270>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a29      	ldr	r2, [pc, #164]	; (8004da0 <HAL_RCC_OscConfig+0x270>)
 8004cfc:	f023 0301 	bic.w	r3, r3, #1
 8004d00:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d02:	f7ff fdc3 	bl	800488c <HAL_GetTick>
 8004d06:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d08:	e008      	b.n	8004d1c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d0a:	f7ff fdbf 	bl	800488c <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d901      	bls.n	8004d1c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e2dd      	b.n	80052d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d1c:	4b20      	ldr	r3, [pc, #128]	; (8004da0 <HAL_RCC_OscConfig+0x270>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0302 	and.w	r3, r3, #2
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1f0      	bne.n	8004d0a <HAL_RCC_OscConfig+0x1da>
 8004d28:	e000      	b.n	8004d2c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d2a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d074      	beq.n	8004e22 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	2b08      	cmp	r3, #8
 8004d3c:	d005      	beq.n	8004d4a <HAL_RCC_OscConfig+0x21a>
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	2b0c      	cmp	r3, #12
 8004d42:	d10e      	bne.n	8004d62 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	2b03      	cmp	r3, #3
 8004d48:	d10b      	bne.n	8004d62 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d4a:	4b15      	ldr	r3, [pc, #84]	; (8004da0 <HAL_RCC_OscConfig+0x270>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d064      	beq.n	8004e20 <HAL_RCC_OscConfig+0x2f0>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d160      	bne.n	8004e20 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e2ba      	b.n	80052d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d6a:	d106      	bne.n	8004d7a <HAL_RCC_OscConfig+0x24a>
 8004d6c:	4b0c      	ldr	r3, [pc, #48]	; (8004da0 <HAL_RCC_OscConfig+0x270>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a0b      	ldr	r2, [pc, #44]	; (8004da0 <HAL_RCC_OscConfig+0x270>)
 8004d72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d76:	6013      	str	r3, [r2, #0]
 8004d78:	e026      	b.n	8004dc8 <HAL_RCC_OscConfig+0x298>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d82:	d115      	bne.n	8004db0 <HAL_RCC_OscConfig+0x280>
 8004d84:	4b06      	ldr	r3, [pc, #24]	; (8004da0 <HAL_RCC_OscConfig+0x270>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a05      	ldr	r2, [pc, #20]	; (8004da0 <HAL_RCC_OscConfig+0x270>)
 8004d8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d8e:	6013      	str	r3, [r2, #0]
 8004d90:	4b03      	ldr	r3, [pc, #12]	; (8004da0 <HAL_RCC_OscConfig+0x270>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a02      	ldr	r2, [pc, #8]	; (8004da0 <HAL_RCC_OscConfig+0x270>)
 8004d96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d9a:	6013      	str	r3, [r2, #0]
 8004d9c:	e014      	b.n	8004dc8 <HAL_RCC_OscConfig+0x298>
 8004d9e:	bf00      	nop
 8004da0:	40021000 	.word	0x40021000
 8004da4:	0800bde4 	.word	0x0800bde4
 8004da8:	2000003c 	.word	0x2000003c
 8004dac:	200001dc 	.word	0x200001dc
 8004db0:	4ba0      	ldr	r3, [pc, #640]	; (8005034 <HAL_RCC_OscConfig+0x504>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a9f      	ldr	r2, [pc, #636]	; (8005034 <HAL_RCC_OscConfig+0x504>)
 8004db6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dba:	6013      	str	r3, [r2, #0]
 8004dbc:	4b9d      	ldr	r3, [pc, #628]	; (8005034 <HAL_RCC_OscConfig+0x504>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a9c      	ldr	r2, [pc, #624]	; (8005034 <HAL_RCC_OscConfig+0x504>)
 8004dc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d013      	beq.n	8004df8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd0:	f7ff fd5c 	bl	800488c <HAL_GetTick>
 8004dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dd6:	e008      	b.n	8004dea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dd8:	f7ff fd58 	bl	800488c <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	2b64      	cmp	r3, #100	; 0x64
 8004de4:	d901      	bls.n	8004dea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e276      	b.n	80052d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dea:	4b92      	ldr	r3, [pc, #584]	; (8005034 <HAL_RCC_OscConfig+0x504>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d0f0      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x2a8>
 8004df6:	e014      	b.n	8004e22 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df8:	f7ff fd48 	bl	800488c <HAL_GetTick>
 8004dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004dfe:	e008      	b.n	8004e12 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e00:	f7ff fd44 	bl	800488c <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	2b64      	cmp	r3, #100	; 0x64
 8004e0c:	d901      	bls.n	8004e12 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e262      	b.n	80052d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e12:	4b88      	ldr	r3, [pc, #544]	; (8005034 <HAL_RCC_OscConfig+0x504>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1f0      	bne.n	8004e00 <HAL_RCC_OscConfig+0x2d0>
 8004e1e:	e000      	b.n	8004e22 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0302 	and.w	r3, r3, #2
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d060      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	2b04      	cmp	r3, #4
 8004e32:	d005      	beq.n	8004e40 <HAL_RCC_OscConfig+0x310>
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	2b0c      	cmp	r3, #12
 8004e38:	d119      	bne.n	8004e6e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d116      	bne.n	8004e6e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e40:	4b7c      	ldr	r3, [pc, #496]	; (8005034 <HAL_RCC_OscConfig+0x504>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d005      	beq.n	8004e58 <HAL_RCC_OscConfig+0x328>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d101      	bne.n	8004e58 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e23f      	b.n	80052d8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e58:	4b76      	ldr	r3, [pc, #472]	; (8005034 <HAL_RCC_OscConfig+0x504>)
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	061b      	lsls	r3, r3, #24
 8004e66:	4973      	ldr	r1, [pc, #460]	; (8005034 <HAL_RCC_OscConfig+0x504>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e6c:	e040      	b.n	8004ef0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d023      	beq.n	8004ebe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e76:	4b6f      	ldr	r3, [pc, #444]	; (8005034 <HAL_RCC_OscConfig+0x504>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a6e      	ldr	r2, [pc, #440]	; (8005034 <HAL_RCC_OscConfig+0x504>)
 8004e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e82:	f7ff fd03 	bl	800488c <HAL_GetTick>
 8004e86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e88:	e008      	b.n	8004e9c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e8a:	f7ff fcff 	bl	800488c <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d901      	bls.n	8004e9c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e21d      	b.n	80052d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e9c:	4b65      	ldr	r3, [pc, #404]	; (8005034 <HAL_RCC_OscConfig+0x504>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d0f0      	beq.n	8004e8a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ea8:	4b62      	ldr	r3, [pc, #392]	; (8005034 <HAL_RCC_OscConfig+0x504>)
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	061b      	lsls	r3, r3, #24
 8004eb6:	495f      	ldr	r1, [pc, #380]	; (8005034 <HAL_RCC_OscConfig+0x504>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	604b      	str	r3, [r1, #4]
 8004ebc:	e018      	b.n	8004ef0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ebe:	4b5d      	ldr	r3, [pc, #372]	; (8005034 <HAL_RCC_OscConfig+0x504>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a5c      	ldr	r2, [pc, #368]	; (8005034 <HAL_RCC_OscConfig+0x504>)
 8004ec4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ec8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eca:	f7ff fcdf 	bl	800488c <HAL_GetTick>
 8004ece:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ed0:	e008      	b.n	8004ee4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ed2:	f7ff fcdb 	bl	800488c <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d901      	bls.n	8004ee4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e1f9      	b.n	80052d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ee4:	4b53      	ldr	r3, [pc, #332]	; (8005034 <HAL_RCC_OscConfig+0x504>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1f0      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0308 	and.w	r3, r3, #8
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d03c      	beq.n	8004f76 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	695b      	ldr	r3, [r3, #20]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d01c      	beq.n	8004f3e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f04:	4b4b      	ldr	r3, [pc, #300]	; (8005034 <HAL_RCC_OscConfig+0x504>)
 8004f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f0a:	4a4a      	ldr	r2, [pc, #296]	; (8005034 <HAL_RCC_OscConfig+0x504>)
 8004f0c:	f043 0301 	orr.w	r3, r3, #1
 8004f10:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f14:	f7ff fcba 	bl	800488c <HAL_GetTick>
 8004f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f1a:	e008      	b.n	8004f2e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f1c:	f7ff fcb6 	bl	800488c <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d901      	bls.n	8004f2e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e1d4      	b.n	80052d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f2e:	4b41      	ldr	r3, [pc, #260]	; (8005034 <HAL_RCC_OscConfig+0x504>)
 8004f30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f34:	f003 0302 	and.w	r3, r3, #2
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d0ef      	beq.n	8004f1c <HAL_RCC_OscConfig+0x3ec>
 8004f3c:	e01b      	b.n	8004f76 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f3e:	4b3d      	ldr	r3, [pc, #244]	; (8005034 <HAL_RCC_OscConfig+0x504>)
 8004f40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f44:	4a3b      	ldr	r2, [pc, #236]	; (8005034 <HAL_RCC_OscConfig+0x504>)
 8004f46:	f023 0301 	bic.w	r3, r3, #1
 8004f4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f4e:	f7ff fc9d 	bl	800488c <HAL_GetTick>
 8004f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f54:	e008      	b.n	8004f68 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f56:	f7ff fc99 	bl	800488c <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d901      	bls.n	8004f68 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e1b7      	b.n	80052d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f68:	4b32      	ldr	r3, [pc, #200]	; (8005034 <HAL_RCC_OscConfig+0x504>)
 8004f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1ef      	bne.n	8004f56 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0304 	and.w	r3, r3, #4
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	f000 80a6 	beq.w	80050d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f84:	2300      	movs	r3, #0
 8004f86:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004f88:	4b2a      	ldr	r3, [pc, #168]	; (8005034 <HAL_RCC_OscConfig+0x504>)
 8004f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d10d      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f94:	4b27      	ldr	r3, [pc, #156]	; (8005034 <HAL_RCC_OscConfig+0x504>)
 8004f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f98:	4a26      	ldr	r2, [pc, #152]	; (8005034 <HAL_RCC_OscConfig+0x504>)
 8004f9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f9e:	6593      	str	r3, [r2, #88]	; 0x58
 8004fa0:	4b24      	ldr	r3, [pc, #144]	; (8005034 <HAL_RCC_OscConfig+0x504>)
 8004fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fa8:	60bb      	str	r3, [r7, #8]
 8004faa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fac:	2301      	movs	r3, #1
 8004fae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fb0:	4b21      	ldr	r3, [pc, #132]	; (8005038 <HAL_RCC_OscConfig+0x508>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d118      	bne.n	8004fee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fbc:	4b1e      	ldr	r3, [pc, #120]	; (8005038 <HAL_RCC_OscConfig+0x508>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a1d      	ldr	r2, [pc, #116]	; (8005038 <HAL_RCC_OscConfig+0x508>)
 8004fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fc6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fc8:	f7ff fc60 	bl	800488c <HAL_GetTick>
 8004fcc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fce:	e008      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fd0:	f7ff fc5c 	bl	800488c <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e17a      	b.n	80052d8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fe2:	4b15      	ldr	r3, [pc, #84]	; (8005038 <HAL_RCC_OscConfig+0x508>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d0f0      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d108      	bne.n	8005008 <HAL_RCC_OscConfig+0x4d8>
 8004ff6:	4b0f      	ldr	r3, [pc, #60]	; (8005034 <HAL_RCC_OscConfig+0x504>)
 8004ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ffc:	4a0d      	ldr	r2, [pc, #52]	; (8005034 <HAL_RCC_OscConfig+0x504>)
 8004ffe:	f043 0301 	orr.w	r3, r3, #1
 8005002:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005006:	e029      	b.n	800505c <HAL_RCC_OscConfig+0x52c>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	2b05      	cmp	r3, #5
 800500e:	d115      	bne.n	800503c <HAL_RCC_OscConfig+0x50c>
 8005010:	4b08      	ldr	r3, [pc, #32]	; (8005034 <HAL_RCC_OscConfig+0x504>)
 8005012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005016:	4a07      	ldr	r2, [pc, #28]	; (8005034 <HAL_RCC_OscConfig+0x504>)
 8005018:	f043 0304 	orr.w	r3, r3, #4
 800501c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005020:	4b04      	ldr	r3, [pc, #16]	; (8005034 <HAL_RCC_OscConfig+0x504>)
 8005022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005026:	4a03      	ldr	r2, [pc, #12]	; (8005034 <HAL_RCC_OscConfig+0x504>)
 8005028:	f043 0301 	orr.w	r3, r3, #1
 800502c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005030:	e014      	b.n	800505c <HAL_RCC_OscConfig+0x52c>
 8005032:	bf00      	nop
 8005034:	40021000 	.word	0x40021000
 8005038:	40007000 	.word	0x40007000
 800503c:	4b9c      	ldr	r3, [pc, #624]	; (80052b0 <HAL_RCC_OscConfig+0x780>)
 800503e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005042:	4a9b      	ldr	r2, [pc, #620]	; (80052b0 <HAL_RCC_OscConfig+0x780>)
 8005044:	f023 0301 	bic.w	r3, r3, #1
 8005048:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800504c:	4b98      	ldr	r3, [pc, #608]	; (80052b0 <HAL_RCC_OscConfig+0x780>)
 800504e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005052:	4a97      	ldr	r2, [pc, #604]	; (80052b0 <HAL_RCC_OscConfig+0x780>)
 8005054:	f023 0304 	bic.w	r3, r3, #4
 8005058:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d016      	beq.n	8005092 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005064:	f7ff fc12 	bl	800488c <HAL_GetTick>
 8005068:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800506a:	e00a      	b.n	8005082 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800506c:	f7ff fc0e 	bl	800488c <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	f241 3288 	movw	r2, #5000	; 0x1388
 800507a:	4293      	cmp	r3, r2
 800507c:	d901      	bls.n	8005082 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e12a      	b.n	80052d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005082:	4b8b      	ldr	r3, [pc, #556]	; (80052b0 <HAL_RCC_OscConfig+0x780>)
 8005084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005088:	f003 0302 	and.w	r3, r3, #2
 800508c:	2b00      	cmp	r3, #0
 800508e:	d0ed      	beq.n	800506c <HAL_RCC_OscConfig+0x53c>
 8005090:	e015      	b.n	80050be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005092:	f7ff fbfb 	bl	800488c <HAL_GetTick>
 8005096:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005098:	e00a      	b.n	80050b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800509a:	f7ff fbf7 	bl	800488c <HAL_GetTick>
 800509e:	4602      	mov	r2, r0
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d901      	bls.n	80050b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e113      	b.n	80052d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050b0:	4b7f      	ldr	r3, [pc, #508]	; (80052b0 <HAL_RCC_OscConfig+0x780>)
 80050b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b6:	f003 0302 	and.w	r3, r3, #2
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1ed      	bne.n	800509a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050be:	7ffb      	ldrb	r3, [r7, #31]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d105      	bne.n	80050d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050c4:	4b7a      	ldr	r3, [pc, #488]	; (80052b0 <HAL_RCC_OscConfig+0x780>)
 80050c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c8:	4a79      	ldr	r2, [pc, #484]	; (80052b0 <HAL_RCC_OscConfig+0x780>)
 80050ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050ce:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f000 80fe 	beq.w	80052d6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050de:	2b02      	cmp	r3, #2
 80050e0:	f040 80d0 	bne.w	8005284 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80050e4:	4b72      	ldr	r3, [pc, #456]	; (80052b0 <HAL_RCC_OscConfig+0x780>)
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	f003 0203 	and.w	r2, r3, #3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d130      	bne.n	800515a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005102:	3b01      	subs	r3, #1
 8005104:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005106:	429a      	cmp	r2, r3
 8005108:	d127      	bne.n	800515a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005114:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005116:	429a      	cmp	r2, r3
 8005118:	d11f      	bne.n	800515a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005124:	2a07      	cmp	r2, #7
 8005126:	bf14      	ite	ne
 8005128:	2201      	movne	r2, #1
 800512a:	2200      	moveq	r2, #0
 800512c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800512e:	4293      	cmp	r3, r2
 8005130:	d113      	bne.n	800515a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800513c:	085b      	lsrs	r3, r3, #1
 800513e:	3b01      	subs	r3, #1
 8005140:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005142:	429a      	cmp	r2, r3
 8005144:	d109      	bne.n	800515a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005150:	085b      	lsrs	r3, r3, #1
 8005152:	3b01      	subs	r3, #1
 8005154:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005156:	429a      	cmp	r2, r3
 8005158:	d06e      	beq.n	8005238 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	2b0c      	cmp	r3, #12
 800515e:	d069      	beq.n	8005234 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005160:	4b53      	ldr	r3, [pc, #332]	; (80052b0 <HAL_RCC_OscConfig+0x780>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d105      	bne.n	8005178 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800516c:	4b50      	ldr	r3, [pc, #320]	; (80052b0 <HAL_RCC_OscConfig+0x780>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005174:	2b00      	cmp	r3, #0
 8005176:	d001      	beq.n	800517c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e0ad      	b.n	80052d8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800517c:	4b4c      	ldr	r3, [pc, #304]	; (80052b0 <HAL_RCC_OscConfig+0x780>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a4b      	ldr	r2, [pc, #300]	; (80052b0 <HAL_RCC_OscConfig+0x780>)
 8005182:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005186:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005188:	f7ff fb80 	bl	800488c <HAL_GetTick>
 800518c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800518e:	e008      	b.n	80051a2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005190:	f7ff fb7c 	bl	800488c <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	2b02      	cmp	r3, #2
 800519c:	d901      	bls.n	80051a2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	e09a      	b.n	80052d8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051a2:	4b43      	ldr	r3, [pc, #268]	; (80052b0 <HAL_RCC_OscConfig+0x780>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1f0      	bne.n	8005190 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051ae:	4b40      	ldr	r3, [pc, #256]	; (80052b0 <HAL_RCC_OscConfig+0x780>)
 80051b0:	68da      	ldr	r2, [r3, #12]
 80051b2:	4b40      	ldr	r3, [pc, #256]	; (80052b4 <HAL_RCC_OscConfig+0x784>)
 80051b4:	4013      	ands	r3, r2
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80051be:	3a01      	subs	r2, #1
 80051c0:	0112      	lsls	r2, r2, #4
 80051c2:	4311      	orrs	r1, r2
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80051c8:	0212      	lsls	r2, r2, #8
 80051ca:	4311      	orrs	r1, r2
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80051d0:	0852      	lsrs	r2, r2, #1
 80051d2:	3a01      	subs	r2, #1
 80051d4:	0552      	lsls	r2, r2, #21
 80051d6:	4311      	orrs	r1, r2
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80051dc:	0852      	lsrs	r2, r2, #1
 80051de:	3a01      	subs	r2, #1
 80051e0:	0652      	lsls	r2, r2, #25
 80051e2:	4311      	orrs	r1, r2
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80051e8:	0912      	lsrs	r2, r2, #4
 80051ea:	0452      	lsls	r2, r2, #17
 80051ec:	430a      	orrs	r2, r1
 80051ee:	4930      	ldr	r1, [pc, #192]	; (80052b0 <HAL_RCC_OscConfig+0x780>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80051f4:	4b2e      	ldr	r3, [pc, #184]	; (80052b0 <HAL_RCC_OscConfig+0x780>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a2d      	ldr	r2, [pc, #180]	; (80052b0 <HAL_RCC_OscConfig+0x780>)
 80051fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005200:	4b2b      	ldr	r3, [pc, #172]	; (80052b0 <HAL_RCC_OscConfig+0x780>)
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	4a2a      	ldr	r2, [pc, #168]	; (80052b0 <HAL_RCC_OscConfig+0x780>)
 8005206:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800520a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800520c:	f7ff fb3e 	bl	800488c <HAL_GetTick>
 8005210:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005212:	e008      	b.n	8005226 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005214:	f7ff fb3a 	bl	800488c <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	2b02      	cmp	r3, #2
 8005220:	d901      	bls.n	8005226 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e058      	b.n	80052d8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005226:	4b22      	ldr	r3, [pc, #136]	; (80052b0 <HAL_RCC_OscConfig+0x780>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d0f0      	beq.n	8005214 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005232:	e050      	b.n	80052d6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e04f      	b.n	80052d8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005238:	4b1d      	ldr	r3, [pc, #116]	; (80052b0 <HAL_RCC_OscConfig+0x780>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d148      	bne.n	80052d6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005244:	4b1a      	ldr	r3, [pc, #104]	; (80052b0 <HAL_RCC_OscConfig+0x780>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a19      	ldr	r2, [pc, #100]	; (80052b0 <HAL_RCC_OscConfig+0x780>)
 800524a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800524e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005250:	4b17      	ldr	r3, [pc, #92]	; (80052b0 <HAL_RCC_OscConfig+0x780>)
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	4a16      	ldr	r2, [pc, #88]	; (80052b0 <HAL_RCC_OscConfig+0x780>)
 8005256:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800525a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800525c:	f7ff fb16 	bl	800488c <HAL_GetTick>
 8005260:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005262:	e008      	b.n	8005276 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005264:	f7ff fb12 	bl	800488c <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	2b02      	cmp	r3, #2
 8005270:	d901      	bls.n	8005276 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e030      	b.n	80052d8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005276:	4b0e      	ldr	r3, [pc, #56]	; (80052b0 <HAL_RCC_OscConfig+0x780>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800527e:	2b00      	cmp	r3, #0
 8005280:	d0f0      	beq.n	8005264 <HAL_RCC_OscConfig+0x734>
 8005282:	e028      	b.n	80052d6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	2b0c      	cmp	r3, #12
 8005288:	d023      	beq.n	80052d2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800528a:	4b09      	ldr	r3, [pc, #36]	; (80052b0 <HAL_RCC_OscConfig+0x780>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a08      	ldr	r2, [pc, #32]	; (80052b0 <HAL_RCC_OscConfig+0x780>)
 8005290:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005294:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005296:	f7ff faf9 	bl	800488c <HAL_GetTick>
 800529a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800529c:	e00c      	b.n	80052b8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800529e:	f7ff faf5 	bl	800488c <HAL_GetTick>
 80052a2:	4602      	mov	r2, r0
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d905      	bls.n	80052b8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e013      	b.n	80052d8 <HAL_RCC_OscConfig+0x7a8>
 80052b0:	40021000 	.word	0x40021000
 80052b4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052b8:	4b09      	ldr	r3, [pc, #36]	; (80052e0 <HAL_RCC_OscConfig+0x7b0>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1ec      	bne.n	800529e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80052c4:	4b06      	ldr	r3, [pc, #24]	; (80052e0 <HAL_RCC_OscConfig+0x7b0>)
 80052c6:	68da      	ldr	r2, [r3, #12]
 80052c8:	4905      	ldr	r1, [pc, #20]	; (80052e0 <HAL_RCC_OscConfig+0x7b0>)
 80052ca:	4b06      	ldr	r3, [pc, #24]	; (80052e4 <HAL_RCC_OscConfig+0x7b4>)
 80052cc:	4013      	ands	r3, r2
 80052ce:	60cb      	str	r3, [r1, #12]
 80052d0:	e001      	b.n	80052d6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e000      	b.n	80052d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3720      	adds	r7, #32
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	40021000 	.word	0x40021000
 80052e4:	feeefffc 	.word	0xfeeefffc

080052e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d101      	bne.n	80052fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e0e7      	b.n	80054cc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052fc:	4b75      	ldr	r3, [pc, #468]	; (80054d4 <HAL_RCC_ClockConfig+0x1ec>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0307 	and.w	r3, r3, #7
 8005304:	683a      	ldr	r2, [r7, #0]
 8005306:	429a      	cmp	r2, r3
 8005308:	d910      	bls.n	800532c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800530a:	4b72      	ldr	r3, [pc, #456]	; (80054d4 <HAL_RCC_ClockConfig+0x1ec>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f023 0207 	bic.w	r2, r3, #7
 8005312:	4970      	ldr	r1, [pc, #448]	; (80054d4 <HAL_RCC_ClockConfig+0x1ec>)
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	4313      	orrs	r3, r2
 8005318:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800531a:	4b6e      	ldr	r3, [pc, #440]	; (80054d4 <HAL_RCC_ClockConfig+0x1ec>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0307 	and.w	r3, r3, #7
 8005322:	683a      	ldr	r2, [r7, #0]
 8005324:	429a      	cmp	r2, r3
 8005326:	d001      	beq.n	800532c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e0cf      	b.n	80054cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0302 	and.w	r3, r3, #2
 8005334:	2b00      	cmp	r3, #0
 8005336:	d010      	beq.n	800535a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	689a      	ldr	r2, [r3, #8]
 800533c:	4b66      	ldr	r3, [pc, #408]	; (80054d8 <HAL_RCC_ClockConfig+0x1f0>)
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005344:	429a      	cmp	r2, r3
 8005346:	d908      	bls.n	800535a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005348:	4b63      	ldr	r3, [pc, #396]	; (80054d8 <HAL_RCC_ClockConfig+0x1f0>)
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	4960      	ldr	r1, [pc, #384]	; (80054d8 <HAL_RCC_ClockConfig+0x1f0>)
 8005356:	4313      	orrs	r3, r2
 8005358:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0301 	and.w	r3, r3, #1
 8005362:	2b00      	cmp	r3, #0
 8005364:	d04c      	beq.n	8005400 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	2b03      	cmp	r3, #3
 800536c:	d107      	bne.n	800537e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800536e:	4b5a      	ldr	r3, [pc, #360]	; (80054d8 <HAL_RCC_ClockConfig+0x1f0>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d121      	bne.n	80053be <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e0a6      	b.n	80054cc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	2b02      	cmp	r3, #2
 8005384:	d107      	bne.n	8005396 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005386:	4b54      	ldr	r3, [pc, #336]	; (80054d8 <HAL_RCC_ClockConfig+0x1f0>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d115      	bne.n	80053be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e09a      	b.n	80054cc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d107      	bne.n	80053ae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800539e:	4b4e      	ldr	r3, [pc, #312]	; (80054d8 <HAL_RCC_ClockConfig+0x1f0>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d109      	bne.n	80053be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e08e      	b.n	80054cc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053ae:	4b4a      	ldr	r3, [pc, #296]	; (80054d8 <HAL_RCC_ClockConfig+0x1f0>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e086      	b.n	80054cc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80053be:	4b46      	ldr	r3, [pc, #280]	; (80054d8 <HAL_RCC_ClockConfig+0x1f0>)
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f023 0203 	bic.w	r2, r3, #3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	4943      	ldr	r1, [pc, #268]	; (80054d8 <HAL_RCC_ClockConfig+0x1f0>)
 80053cc:	4313      	orrs	r3, r2
 80053ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053d0:	f7ff fa5c 	bl	800488c <HAL_GetTick>
 80053d4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053d6:	e00a      	b.n	80053ee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053d8:	f7ff fa58 	bl	800488c <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e06e      	b.n	80054cc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ee:	4b3a      	ldr	r3, [pc, #232]	; (80054d8 <HAL_RCC_ClockConfig+0x1f0>)
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f003 020c 	and.w	r2, r3, #12
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d1eb      	bne.n	80053d8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0302 	and.w	r3, r3, #2
 8005408:	2b00      	cmp	r3, #0
 800540a:	d010      	beq.n	800542e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	689a      	ldr	r2, [r3, #8]
 8005410:	4b31      	ldr	r3, [pc, #196]	; (80054d8 <HAL_RCC_ClockConfig+0x1f0>)
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005418:	429a      	cmp	r2, r3
 800541a:	d208      	bcs.n	800542e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800541c:	4b2e      	ldr	r3, [pc, #184]	; (80054d8 <HAL_RCC_ClockConfig+0x1f0>)
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	492b      	ldr	r1, [pc, #172]	; (80054d8 <HAL_RCC_ClockConfig+0x1f0>)
 800542a:	4313      	orrs	r3, r2
 800542c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800542e:	4b29      	ldr	r3, [pc, #164]	; (80054d4 <HAL_RCC_ClockConfig+0x1ec>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0307 	and.w	r3, r3, #7
 8005436:	683a      	ldr	r2, [r7, #0]
 8005438:	429a      	cmp	r2, r3
 800543a:	d210      	bcs.n	800545e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800543c:	4b25      	ldr	r3, [pc, #148]	; (80054d4 <HAL_RCC_ClockConfig+0x1ec>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f023 0207 	bic.w	r2, r3, #7
 8005444:	4923      	ldr	r1, [pc, #140]	; (80054d4 <HAL_RCC_ClockConfig+0x1ec>)
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	4313      	orrs	r3, r2
 800544a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800544c:	4b21      	ldr	r3, [pc, #132]	; (80054d4 <HAL_RCC_ClockConfig+0x1ec>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0307 	and.w	r3, r3, #7
 8005454:	683a      	ldr	r2, [r7, #0]
 8005456:	429a      	cmp	r2, r3
 8005458:	d001      	beq.n	800545e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e036      	b.n	80054cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0304 	and.w	r3, r3, #4
 8005466:	2b00      	cmp	r3, #0
 8005468:	d008      	beq.n	800547c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800546a:	4b1b      	ldr	r3, [pc, #108]	; (80054d8 <HAL_RCC_ClockConfig+0x1f0>)
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	4918      	ldr	r1, [pc, #96]	; (80054d8 <HAL_RCC_ClockConfig+0x1f0>)
 8005478:	4313      	orrs	r3, r2
 800547a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0308 	and.w	r3, r3, #8
 8005484:	2b00      	cmp	r3, #0
 8005486:	d009      	beq.n	800549c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005488:	4b13      	ldr	r3, [pc, #76]	; (80054d8 <HAL_RCC_ClockConfig+0x1f0>)
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	00db      	lsls	r3, r3, #3
 8005496:	4910      	ldr	r1, [pc, #64]	; (80054d8 <HAL_RCC_ClockConfig+0x1f0>)
 8005498:	4313      	orrs	r3, r2
 800549a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800549c:	f000 f824 	bl	80054e8 <HAL_RCC_GetSysClockFreq>
 80054a0:	4602      	mov	r2, r0
 80054a2:	4b0d      	ldr	r3, [pc, #52]	; (80054d8 <HAL_RCC_ClockConfig+0x1f0>)
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	091b      	lsrs	r3, r3, #4
 80054a8:	f003 030f 	and.w	r3, r3, #15
 80054ac:	490b      	ldr	r1, [pc, #44]	; (80054dc <HAL_RCC_ClockConfig+0x1f4>)
 80054ae:	5ccb      	ldrb	r3, [r1, r3]
 80054b0:	f003 031f 	and.w	r3, r3, #31
 80054b4:	fa22 f303 	lsr.w	r3, r2, r3
 80054b8:	4a09      	ldr	r2, [pc, #36]	; (80054e0 <HAL_RCC_ClockConfig+0x1f8>)
 80054ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80054bc:	4b09      	ldr	r3, [pc, #36]	; (80054e4 <HAL_RCC_ClockConfig+0x1fc>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7fe f8d7 	bl	8003674 <HAL_InitTick>
 80054c6:	4603      	mov	r3, r0
 80054c8:	72fb      	strb	r3, [r7, #11]

  return status;
 80054ca:	7afb      	ldrb	r3, [r7, #11]
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3710      	adds	r7, #16
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	40022000 	.word	0x40022000
 80054d8:	40021000 	.word	0x40021000
 80054dc:	0800bde4 	.word	0x0800bde4
 80054e0:	2000003c 	.word	0x2000003c
 80054e4:	200001dc 	.word	0x200001dc

080054e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b089      	sub	sp, #36	; 0x24
 80054ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80054ee:	2300      	movs	r3, #0
 80054f0:	61fb      	str	r3, [r7, #28]
 80054f2:	2300      	movs	r3, #0
 80054f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054f6:	4b3e      	ldr	r3, [pc, #248]	; (80055f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f003 030c 	and.w	r3, r3, #12
 80054fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005500:	4b3b      	ldr	r3, [pc, #236]	; (80055f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	f003 0303 	and.w	r3, r3, #3
 8005508:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d005      	beq.n	800551c <HAL_RCC_GetSysClockFreq+0x34>
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	2b0c      	cmp	r3, #12
 8005514:	d121      	bne.n	800555a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d11e      	bne.n	800555a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800551c:	4b34      	ldr	r3, [pc, #208]	; (80055f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0308 	and.w	r3, r3, #8
 8005524:	2b00      	cmp	r3, #0
 8005526:	d107      	bne.n	8005538 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005528:	4b31      	ldr	r3, [pc, #196]	; (80055f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800552a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800552e:	0a1b      	lsrs	r3, r3, #8
 8005530:	f003 030f 	and.w	r3, r3, #15
 8005534:	61fb      	str	r3, [r7, #28]
 8005536:	e005      	b.n	8005544 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005538:	4b2d      	ldr	r3, [pc, #180]	; (80055f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	091b      	lsrs	r3, r3, #4
 800553e:	f003 030f 	and.w	r3, r3, #15
 8005542:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005544:	4a2b      	ldr	r2, [pc, #172]	; (80055f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800554c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10d      	bne.n	8005570 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005558:	e00a      	b.n	8005570 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	2b04      	cmp	r3, #4
 800555e:	d102      	bne.n	8005566 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005560:	4b25      	ldr	r3, [pc, #148]	; (80055f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005562:	61bb      	str	r3, [r7, #24]
 8005564:	e004      	b.n	8005570 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	2b08      	cmp	r3, #8
 800556a:	d101      	bne.n	8005570 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800556c:	4b23      	ldr	r3, [pc, #140]	; (80055fc <HAL_RCC_GetSysClockFreq+0x114>)
 800556e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	2b0c      	cmp	r3, #12
 8005574:	d134      	bne.n	80055e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005576:	4b1e      	ldr	r3, [pc, #120]	; (80055f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	f003 0303 	and.w	r3, r3, #3
 800557e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	2b02      	cmp	r3, #2
 8005584:	d003      	beq.n	800558e <HAL_RCC_GetSysClockFreq+0xa6>
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	2b03      	cmp	r3, #3
 800558a:	d003      	beq.n	8005594 <HAL_RCC_GetSysClockFreq+0xac>
 800558c:	e005      	b.n	800559a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800558e:	4b1a      	ldr	r3, [pc, #104]	; (80055f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005590:	617b      	str	r3, [r7, #20]
      break;
 8005592:	e005      	b.n	80055a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005594:	4b19      	ldr	r3, [pc, #100]	; (80055fc <HAL_RCC_GetSysClockFreq+0x114>)
 8005596:	617b      	str	r3, [r7, #20]
      break;
 8005598:	e002      	b.n	80055a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	617b      	str	r3, [r7, #20]
      break;
 800559e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055a0:	4b13      	ldr	r3, [pc, #76]	; (80055f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	091b      	lsrs	r3, r3, #4
 80055a6:	f003 0307 	and.w	r3, r3, #7
 80055aa:	3301      	adds	r3, #1
 80055ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80055ae:	4b10      	ldr	r3, [pc, #64]	; (80055f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	0a1b      	lsrs	r3, r3, #8
 80055b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	fb03 f202 	mul.w	r2, r3, r2
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80055c6:	4b0a      	ldr	r3, [pc, #40]	; (80055f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	0e5b      	lsrs	r3, r3, #25
 80055cc:	f003 0303 	and.w	r3, r3, #3
 80055d0:	3301      	adds	r3, #1
 80055d2:	005b      	lsls	r3, r3, #1
 80055d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	fbb2 f3f3 	udiv	r3, r2, r3
 80055de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80055e0:	69bb      	ldr	r3, [r7, #24]
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3724      	adds	r7, #36	; 0x24
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	40021000 	.word	0x40021000
 80055f4:	0800bdfc 	.word	0x0800bdfc
 80055f8:	00f42400 	.word	0x00f42400
 80055fc:	007a1200 	.word	0x007a1200

08005600 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005600:	b480      	push	{r7}
 8005602:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005604:	4b03      	ldr	r3, [pc, #12]	; (8005614 <HAL_RCC_GetHCLKFreq+0x14>)
 8005606:	681b      	ldr	r3, [r3, #0]
}
 8005608:	4618      	mov	r0, r3
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	2000003c 	.word	0x2000003c

08005618 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800561c:	f7ff fff0 	bl	8005600 <HAL_RCC_GetHCLKFreq>
 8005620:	4602      	mov	r2, r0
 8005622:	4b06      	ldr	r3, [pc, #24]	; (800563c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	0a1b      	lsrs	r3, r3, #8
 8005628:	f003 0307 	and.w	r3, r3, #7
 800562c:	4904      	ldr	r1, [pc, #16]	; (8005640 <HAL_RCC_GetPCLK1Freq+0x28>)
 800562e:	5ccb      	ldrb	r3, [r1, r3]
 8005630:	f003 031f 	and.w	r3, r3, #31
 8005634:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005638:	4618      	mov	r0, r3
 800563a:	bd80      	pop	{r7, pc}
 800563c:	40021000 	.word	0x40021000
 8005640:	0800bdf4 	.word	0x0800bdf4

08005644 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	220f      	movs	r2, #15
 8005652:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005654:	4b12      	ldr	r3, [pc, #72]	; (80056a0 <HAL_RCC_GetClockConfig+0x5c>)
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f003 0203 	and.w	r2, r3, #3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005660:	4b0f      	ldr	r3, [pc, #60]	; (80056a0 <HAL_RCC_GetClockConfig+0x5c>)
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800566c:	4b0c      	ldr	r3, [pc, #48]	; (80056a0 <HAL_RCC_GetClockConfig+0x5c>)
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005678:	4b09      	ldr	r3, [pc, #36]	; (80056a0 <HAL_RCC_GetClockConfig+0x5c>)
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	08db      	lsrs	r3, r3, #3
 800567e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005686:	4b07      	ldr	r3, [pc, #28]	; (80056a4 <HAL_RCC_GetClockConfig+0x60>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0207 	and.w	r2, r3, #7
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	601a      	str	r2, [r3, #0]
}
 8005692:	bf00      	nop
 8005694:	370c      	adds	r7, #12
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	40021000 	.word	0x40021000
 80056a4:	40022000 	.word	0x40022000

080056a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b086      	sub	sp, #24
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80056b0:	2300      	movs	r3, #0
 80056b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80056b4:	4b2a      	ldr	r3, [pc, #168]	; (8005760 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d003      	beq.n	80056c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80056c0:	f7ff f9d2 	bl	8004a68 <HAL_PWREx_GetVoltageRange>
 80056c4:	6178      	str	r0, [r7, #20]
 80056c6:	e014      	b.n	80056f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80056c8:	4b25      	ldr	r3, [pc, #148]	; (8005760 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056cc:	4a24      	ldr	r2, [pc, #144]	; (8005760 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056d2:	6593      	str	r3, [r2, #88]	; 0x58
 80056d4:	4b22      	ldr	r3, [pc, #136]	; (8005760 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056dc:	60fb      	str	r3, [r7, #12]
 80056de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80056e0:	f7ff f9c2 	bl	8004a68 <HAL_PWREx_GetVoltageRange>
 80056e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80056e6:	4b1e      	ldr	r3, [pc, #120]	; (8005760 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ea:	4a1d      	ldr	r2, [pc, #116]	; (8005760 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056f0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056f8:	d10b      	bne.n	8005712 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2b80      	cmp	r3, #128	; 0x80
 80056fe:	d919      	bls.n	8005734 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2ba0      	cmp	r3, #160	; 0xa0
 8005704:	d902      	bls.n	800570c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005706:	2302      	movs	r3, #2
 8005708:	613b      	str	r3, [r7, #16]
 800570a:	e013      	b.n	8005734 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800570c:	2301      	movs	r3, #1
 800570e:	613b      	str	r3, [r7, #16]
 8005710:	e010      	b.n	8005734 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2b80      	cmp	r3, #128	; 0x80
 8005716:	d902      	bls.n	800571e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005718:	2303      	movs	r3, #3
 800571a:	613b      	str	r3, [r7, #16]
 800571c:	e00a      	b.n	8005734 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2b80      	cmp	r3, #128	; 0x80
 8005722:	d102      	bne.n	800572a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005724:	2302      	movs	r3, #2
 8005726:	613b      	str	r3, [r7, #16]
 8005728:	e004      	b.n	8005734 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2b70      	cmp	r3, #112	; 0x70
 800572e:	d101      	bne.n	8005734 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005730:	2301      	movs	r3, #1
 8005732:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005734:	4b0b      	ldr	r3, [pc, #44]	; (8005764 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f023 0207 	bic.w	r2, r3, #7
 800573c:	4909      	ldr	r1, [pc, #36]	; (8005764 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	4313      	orrs	r3, r2
 8005742:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005744:	4b07      	ldr	r3, [pc, #28]	; (8005764 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0307 	and.w	r3, r3, #7
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	429a      	cmp	r2, r3
 8005750:	d001      	beq.n	8005756 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e000      	b.n	8005758 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005756:	2300      	movs	r3, #0
}
 8005758:	4618      	mov	r0, r3
 800575a:	3718      	adds	r7, #24
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	40021000 	.word	0x40021000
 8005764:	40022000 	.word	0x40022000

08005768 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d101      	bne.n	800577a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e049      	b.n	800580e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b00      	cmp	r3, #0
 8005784:	d106      	bne.n	8005794 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 f841 	bl	8005816 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2202      	movs	r2, #2
 8005798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	3304      	adds	r3, #4
 80057a4:	4619      	mov	r1, r3
 80057a6:	4610      	mov	r0, r2
 80057a8:	f000 f9f8 	bl	8005b9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3708      	adds	r7, #8
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005816:	b480      	push	{r7}
 8005818:	b083      	sub	sp, #12
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800581e:	bf00      	nop
 8005820:	370c      	adds	r7, #12
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr
	...

0800582c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800582c:	b480      	push	{r7}
 800582e:	b085      	sub	sp, #20
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800583a:	b2db      	uxtb	r3, r3
 800583c:	2b01      	cmp	r3, #1
 800583e:	d001      	beq.n	8005844 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e04f      	b.n	80058e4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2202      	movs	r2, #2
 8005848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68da      	ldr	r2, [r3, #12]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f042 0201 	orr.w	r2, r2, #1
 800585a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a23      	ldr	r2, [pc, #140]	; (80058f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d01d      	beq.n	80058a2 <HAL_TIM_Base_Start_IT+0x76>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800586e:	d018      	beq.n	80058a2 <HAL_TIM_Base_Start_IT+0x76>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a1f      	ldr	r2, [pc, #124]	; (80058f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d013      	beq.n	80058a2 <HAL_TIM_Base_Start_IT+0x76>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a1e      	ldr	r2, [pc, #120]	; (80058f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d00e      	beq.n	80058a2 <HAL_TIM_Base_Start_IT+0x76>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a1c      	ldr	r2, [pc, #112]	; (80058fc <HAL_TIM_Base_Start_IT+0xd0>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d009      	beq.n	80058a2 <HAL_TIM_Base_Start_IT+0x76>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a1b      	ldr	r2, [pc, #108]	; (8005900 <HAL_TIM_Base_Start_IT+0xd4>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d004      	beq.n	80058a2 <HAL_TIM_Base_Start_IT+0x76>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a19      	ldr	r2, [pc, #100]	; (8005904 <HAL_TIM_Base_Start_IT+0xd8>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d115      	bne.n	80058ce <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	689a      	ldr	r2, [r3, #8]
 80058a8:	4b17      	ldr	r3, [pc, #92]	; (8005908 <HAL_TIM_Base_Start_IT+0xdc>)
 80058aa:	4013      	ands	r3, r2
 80058ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2b06      	cmp	r3, #6
 80058b2:	d015      	beq.n	80058e0 <HAL_TIM_Base_Start_IT+0xb4>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058ba:	d011      	beq.n	80058e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f042 0201 	orr.w	r2, r2, #1
 80058ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058cc:	e008      	b.n	80058e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f042 0201 	orr.w	r2, r2, #1
 80058dc:	601a      	str	r2, [r3, #0]
 80058de:	e000      	b.n	80058e2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058e0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3714      	adds	r7, #20
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr
 80058f0:	40012c00 	.word	0x40012c00
 80058f4:	40000400 	.word	0x40000400
 80058f8:	40000800 	.word	0x40000800
 80058fc:	40000c00 	.word	0x40000c00
 8005900:	40013400 	.word	0x40013400
 8005904:	40014000 	.word	0x40014000
 8005908:	00010007 	.word	0x00010007

0800590c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	f003 0302 	and.w	r3, r3, #2
 800591e:	2b02      	cmp	r3, #2
 8005920:	d122      	bne.n	8005968 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	f003 0302 	and.w	r3, r3, #2
 800592c:	2b02      	cmp	r3, #2
 800592e:	d11b      	bne.n	8005968 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f06f 0202 	mvn.w	r2, #2
 8005938:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2201      	movs	r2, #1
 800593e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	f003 0303 	and.w	r3, r3, #3
 800594a:	2b00      	cmp	r3, #0
 800594c:	d003      	beq.n	8005956 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 f905 	bl	8005b5e <HAL_TIM_IC_CaptureCallback>
 8005954:	e005      	b.n	8005962 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 f8f7 	bl	8005b4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 f908 	bl	8005b72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	f003 0304 	and.w	r3, r3, #4
 8005972:	2b04      	cmp	r3, #4
 8005974:	d122      	bne.n	80059bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	f003 0304 	and.w	r3, r3, #4
 8005980:	2b04      	cmp	r3, #4
 8005982:	d11b      	bne.n	80059bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f06f 0204 	mvn.w	r2, #4
 800598c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2202      	movs	r2, #2
 8005992:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d003      	beq.n	80059aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 f8db 	bl	8005b5e <HAL_TIM_IC_CaptureCallback>
 80059a8:	e005      	b.n	80059b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 f8cd 	bl	8005b4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 f8de 	bl	8005b72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	f003 0308 	and.w	r3, r3, #8
 80059c6:	2b08      	cmp	r3, #8
 80059c8:	d122      	bne.n	8005a10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	f003 0308 	and.w	r3, r3, #8
 80059d4:	2b08      	cmp	r3, #8
 80059d6:	d11b      	bne.n	8005a10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f06f 0208 	mvn.w	r2, #8
 80059e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2204      	movs	r2, #4
 80059e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	69db      	ldr	r3, [r3, #28]
 80059ee:	f003 0303 	and.w	r3, r3, #3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d003      	beq.n	80059fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 f8b1 	bl	8005b5e <HAL_TIM_IC_CaptureCallback>
 80059fc:	e005      	b.n	8005a0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 f8a3 	bl	8005b4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 f8b4 	bl	8005b72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	f003 0310 	and.w	r3, r3, #16
 8005a1a:	2b10      	cmp	r3, #16
 8005a1c:	d122      	bne.n	8005a64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	f003 0310 	and.w	r3, r3, #16
 8005a28:	2b10      	cmp	r3, #16
 8005a2a:	d11b      	bne.n	8005a64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f06f 0210 	mvn.w	r2, #16
 8005a34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2208      	movs	r2, #8
 8005a3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	69db      	ldr	r3, [r3, #28]
 8005a42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d003      	beq.n	8005a52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 f887 	bl	8005b5e <HAL_TIM_IC_CaptureCallback>
 8005a50:	e005      	b.n	8005a5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 f879 	bl	8005b4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 f88a 	bl	8005b72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	f003 0301 	and.w	r3, r3, #1
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d10e      	bne.n	8005a90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	f003 0301 	and.w	r3, r3, #1
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d107      	bne.n	8005a90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f06f 0201 	mvn.w	r2, #1
 8005a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f7fc f984 	bl	8001d98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a9a:	2b80      	cmp	r3, #128	; 0x80
 8005a9c:	d10e      	bne.n	8005abc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aa8:	2b80      	cmp	r3, #128	; 0x80
 8005aaa:	d107      	bne.n	8005abc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 f914 	bl	8005ce4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ac6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005aca:	d10e      	bne.n	8005aea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ad6:	2b80      	cmp	r3, #128	; 0x80
 8005ad8:	d107      	bne.n	8005aea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005ae2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 f907 	bl	8005cf8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af4:	2b40      	cmp	r3, #64	; 0x40
 8005af6:	d10e      	bne.n	8005b16 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b02:	2b40      	cmp	r3, #64	; 0x40
 8005b04:	d107      	bne.n	8005b16 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 f838 	bl	8005b86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	f003 0320 	and.w	r3, r3, #32
 8005b20:	2b20      	cmp	r3, #32
 8005b22:	d10e      	bne.n	8005b42 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	f003 0320 	and.w	r3, r3, #32
 8005b2e:	2b20      	cmp	r3, #32
 8005b30:	d107      	bne.n	8005b42 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f06f 0220 	mvn.w	r2, #32
 8005b3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 f8c7 	bl	8005cd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b42:	bf00      	nop
 8005b44:	3708      	adds	r7, #8
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b4a:	b480      	push	{r7}
 8005b4c:	b083      	sub	sp, #12
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b52:	bf00      	nop
 8005b54:	370c      	adds	r7, #12
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr

08005b5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b5e:	b480      	push	{r7}
 8005b60:	b083      	sub	sp, #12
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b66:	bf00      	nop
 8005b68:	370c      	adds	r7, #12
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr

08005b72 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b72:	b480      	push	{r7}
 8005b74:	b083      	sub	sp, #12
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b7a:	bf00      	nop
 8005b7c:	370c      	adds	r7, #12
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr

08005b86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b86:	b480      	push	{r7}
 8005b88:	b083      	sub	sp, #12
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b8e:	bf00      	nop
 8005b90:	370c      	adds	r7, #12
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
	...

08005b9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b085      	sub	sp, #20
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a40      	ldr	r2, [pc, #256]	; (8005cb0 <TIM_Base_SetConfig+0x114>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d013      	beq.n	8005bdc <TIM_Base_SetConfig+0x40>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bba:	d00f      	beq.n	8005bdc <TIM_Base_SetConfig+0x40>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a3d      	ldr	r2, [pc, #244]	; (8005cb4 <TIM_Base_SetConfig+0x118>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d00b      	beq.n	8005bdc <TIM_Base_SetConfig+0x40>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a3c      	ldr	r2, [pc, #240]	; (8005cb8 <TIM_Base_SetConfig+0x11c>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d007      	beq.n	8005bdc <TIM_Base_SetConfig+0x40>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a3b      	ldr	r2, [pc, #236]	; (8005cbc <TIM_Base_SetConfig+0x120>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d003      	beq.n	8005bdc <TIM_Base_SetConfig+0x40>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a3a      	ldr	r2, [pc, #232]	; (8005cc0 <TIM_Base_SetConfig+0x124>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d108      	bne.n	8005bee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a2f      	ldr	r2, [pc, #188]	; (8005cb0 <TIM_Base_SetConfig+0x114>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d01f      	beq.n	8005c36 <TIM_Base_SetConfig+0x9a>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bfc:	d01b      	beq.n	8005c36 <TIM_Base_SetConfig+0x9a>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a2c      	ldr	r2, [pc, #176]	; (8005cb4 <TIM_Base_SetConfig+0x118>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d017      	beq.n	8005c36 <TIM_Base_SetConfig+0x9a>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a2b      	ldr	r2, [pc, #172]	; (8005cb8 <TIM_Base_SetConfig+0x11c>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d013      	beq.n	8005c36 <TIM_Base_SetConfig+0x9a>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a2a      	ldr	r2, [pc, #168]	; (8005cbc <TIM_Base_SetConfig+0x120>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d00f      	beq.n	8005c36 <TIM_Base_SetConfig+0x9a>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a29      	ldr	r2, [pc, #164]	; (8005cc0 <TIM_Base_SetConfig+0x124>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d00b      	beq.n	8005c36 <TIM_Base_SetConfig+0x9a>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a28      	ldr	r2, [pc, #160]	; (8005cc4 <TIM_Base_SetConfig+0x128>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d007      	beq.n	8005c36 <TIM_Base_SetConfig+0x9a>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a27      	ldr	r2, [pc, #156]	; (8005cc8 <TIM_Base_SetConfig+0x12c>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d003      	beq.n	8005c36 <TIM_Base_SetConfig+0x9a>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a26      	ldr	r2, [pc, #152]	; (8005ccc <TIM_Base_SetConfig+0x130>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d108      	bne.n	8005c48 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	695b      	ldr	r3, [r3, #20]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	689a      	ldr	r2, [r3, #8]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a10      	ldr	r2, [pc, #64]	; (8005cb0 <TIM_Base_SetConfig+0x114>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d00f      	beq.n	8005c94 <TIM_Base_SetConfig+0xf8>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a12      	ldr	r2, [pc, #72]	; (8005cc0 <TIM_Base_SetConfig+0x124>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d00b      	beq.n	8005c94 <TIM_Base_SetConfig+0xf8>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a11      	ldr	r2, [pc, #68]	; (8005cc4 <TIM_Base_SetConfig+0x128>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d007      	beq.n	8005c94 <TIM_Base_SetConfig+0xf8>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a10      	ldr	r2, [pc, #64]	; (8005cc8 <TIM_Base_SetConfig+0x12c>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d003      	beq.n	8005c94 <TIM_Base_SetConfig+0xf8>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a0f      	ldr	r2, [pc, #60]	; (8005ccc <TIM_Base_SetConfig+0x130>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d103      	bne.n	8005c9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	691a      	ldr	r2, [r3, #16]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	615a      	str	r2, [r3, #20]
}
 8005ca2:	bf00      	nop
 8005ca4:	3714      	adds	r7, #20
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	40012c00 	.word	0x40012c00
 8005cb4:	40000400 	.word	0x40000400
 8005cb8:	40000800 	.word	0x40000800
 8005cbc:	40000c00 	.word	0x40000c00
 8005cc0:	40013400 	.word	0x40013400
 8005cc4:	40014000 	.word	0x40014000
 8005cc8:	40014400 	.word	0x40014400
 8005ccc:	40014800 	.word	0x40014800

08005cd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005cd8:	bf00      	nop
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cec:	bf00      	nop
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005d00:	bf00      	nop
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005d0c:	b480      	push	{r7}
 8005d0e:	b085      	sub	sp, #20
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	4a07      	ldr	r2, [pc, #28]	; (8005d38 <vApplicationGetIdleTaskMemory+0x2c>)
 8005d1c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	4a06      	ldr	r2, [pc, #24]	; (8005d3c <vApplicationGetIdleTaskMemory+0x30>)
 8005d22:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2280      	movs	r2, #128	; 0x80
 8005d28:	601a      	str	r2, [r3, #0]
}
 8005d2a:	bf00      	nop
 8005d2c:	3714      	adds	r7, #20
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	20000710 	.word	0x20000710
 8005d3c:	200007cc 	.word	0x200007cc

08005d40 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005d40:	b480      	push	{r7}
 8005d42:	b085      	sub	sp, #20
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	4a07      	ldr	r2, [pc, #28]	; (8005d6c <vApplicationGetTimerTaskMemory+0x2c>)
 8005d50:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	4a06      	ldr	r2, [pc, #24]	; (8005d70 <vApplicationGetTimerTaskMemory+0x30>)
 8005d56:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d5e:	601a      	str	r2, [r3, #0]
}
 8005d60:	bf00      	nop
 8005d62:	3714      	adds	r7, #20
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr
 8005d6c:	200009cc 	.word	0x200009cc
 8005d70:	20000a88 	.word	0x20000a88

08005d74 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f103 0208 	add.w	r2, r3, #8
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d8c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f103 0208 	add.w	r2, r3, #8
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f103 0208 	add.w	r2, r3, #8
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005da8:	bf00      	nop
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005dc2:	bf00      	nop
 8005dc4:	370c      	adds	r7, #12
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr

08005dce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005dce:	b480      	push	{r7}
 8005dd0:	b085      	sub	sp, #20
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
 8005dd6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	689a      	ldr	r2, [r3, #8]
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	683a      	ldr	r2, [r7, #0]
 8005df2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	683a      	ldr	r2, [r7, #0]
 8005df8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	1c5a      	adds	r2, r3, #1
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	601a      	str	r2, [r3, #0]
}
 8005e0a:	bf00      	nop
 8005e0c:	3714      	adds	r7, #20
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr

08005e16 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e16:	b480      	push	{r7}
 8005e18:	b085      	sub	sp, #20
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
 8005e1e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e2c:	d103      	bne.n	8005e36 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	60fb      	str	r3, [r7, #12]
 8005e34:	e00c      	b.n	8005e50 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	3308      	adds	r3, #8
 8005e3a:	60fb      	str	r3, [r7, #12]
 8005e3c:	e002      	b.n	8005e44 <vListInsert+0x2e>
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	60fb      	str	r3, [r7, #12]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68ba      	ldr	r2, [r7, #8]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d2f6      	bcs.n	8005e3e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	685a      	ldr	r2, [r3, #4]
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	683a      	ldr	r2, [r7, #0]
 8005e5e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	683a      	ldr	r2, [r7, #0]
 8005e6a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	1c5a      	adds	r2, r3, #1
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	601a      	str	r2, [r3, #0]
}
 8005e7c:	bf00      	nop
 8005e7e:	3714      	adds	r7, #20
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	6892      	ldr	r2, [r2, #8]
 8005e9e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	6852      	ldr	r2, [r2, #4]
 8005ea8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d103      	bne.n	8005ebc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	689a      	ldr	r2, [r3, #8]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	1e5a      	subs	r2, r3, #1
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3714      	adds	r7, #20
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d10a      	bne.n	8005f06 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef4:	f383 8811 	msr	BASEPRI, r3
 8005ef8:	f3bf 8f6f 	isb	sy
 8005efc:	f3bf 8f4f 	dsb	sy
 8005f00:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005f02:	bf00      	nop
 8005f04:	e7fe      	b.n	8005f04 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005f06:	f002 f9cd 	bl	80082a4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f12:	68f9      	ldr	r1, [r7, #12]
 8005f14:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005f16:	fb01 f303 	mul.w	r3, r1, r3
 8005f1a:	441a      	add	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2200      	movs	r2, #0
 8005f24:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f36:	3b01      	subs	r3, #1
 8005f38:	68f9      	ldr	r1, [r7, #12]
 8005f3a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005f3c:	fb01 f303 	mul.w	r3, r1, r3
 8005f40:	441a      	add	r2, r3
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	22ff      	movs	r2, #255	; 0xff
 8005f4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	22ff      	movs	r2, #255	; 0xff
 8005f52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d114      	bne.n	8005f86 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d01a      	beq.n	8005f9a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	3310      	adds	r3, #16
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f001 fab7 	bl	80074dc <xTaskRemoveFromEventList>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d012      	beq.n	8005f9a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005f74:	4b0c      	ldr	r3, [pc, #48]	; (8005fa8 <xQueueGenericReset+0xcc>)
 8005f76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f7a:	601a      	str	r2, [r3, #0]
 8005f7c:	f3bf 8f4f 	dsb	sy
 8005f80:	f3bf 8f6f 	isb	sy
 8005f84:	e009      	b.n	8005f9a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	3310      	adds	r3, #16
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7ff fef2 	bl	8005d74 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	3324      	adds	r3, #36	; 0x24
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7ff feed 	bl	8005d74 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005f9a:	f002 f9b3 	bl	8008304 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005f9e:	2301      	movs	r3, #1
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3710      	adds	r7, #16
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	e000ed04 	.word	0xe000ed04

08005fac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b08e      	sub	sp, #56	; 0x38
 8005fb0:	af02      	add	r7, sp, #8
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	607a      	str	r2, [r7, #4]
 8005fb8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d10a      	bne.n	8005fd6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc4:	f383 8811 	msr	BASEPRI, r3
 8005fc8:	f3bf 8f6f 	isb	sy
 8005fcc:	f3bf 8f4f 	dsb	sy
 8005fd0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005fd2:	bf00      	nop
 8005fd4:	e7fe      	b.n	8005fd4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d10a      	bne.n	8005ff2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe0:	f383 8811 	msr	BASEPRI, r3
 8005fe4:	f3bf 8f6f 	isb	sy
 8005fe8:	f3bf 8f4f 	dsb	sy
 8005fec:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005fee:	bf00      	nop
 8005ff0:	e7fe      	b.n	8005ff0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d002      	beq.n	8005ffe <xQueueGenericCreateStatic+0x52>
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d001      	beq.n	8006002 <xQueueGenericCreateStatic+0x56>
 8005ffe:	2301      	movs	r3, #1
 8006000:	e000      	b.n	8006004 <xQueueGenericCreateStatic+0x58>
 8006002:	2300      	movs	r3, #0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d10a      	bne.n	800601e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800600c:	f383 8811 	msr	BASEPRI, r3
 8006010:	f3bf 8f6f 	isb	sy
 8006014:	f3bf 8f4f 	dsb	sy
 8006018:	623b      	str	r3, [r7, #32]
}
 800601a:	bf00      	nop
 800601c:	e7fe      	b.n	800601c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d102      	bne.n	800602a <xQueueGenericCreateStatic+0x7e>
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d101      	bne.n	800602e <xQueueGenericCreateStatic+0x82>
 800602a:	2301      	movs	r3, #1
 800602c:	e000      	b.n	8006030 <xQueueGenericCreateStatic+0x84>
 800602e:	2300      	movs	r3, #0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d10a      	bne.n	800604a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006038:	f383 8811 	msr	BASEPRI, r3
 800603c:	f3bf 8f6f 	isb	sy
 8006040:	f3bf 8f4f 	dsb	sy
 8006044:	61fb      	str	r3, [r7, #28]
}
 8006046:	bf00      	nop
 8006048:	e7fe      	b.n	8006048 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800604a:	2350      	movs	r3, #80	; 0x50
 800604c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	2b50      	cmp	r3, #80	; 0x50
 8006052:	d00a      	beq.n	800606a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006058:	f383 8811 	msr	BASEPRI, r3
 800605c:	f3bf 8f6f 	isb	sy
 8006060:	f3bf 8f4f 	dsb	sy
 8006064:	61bb      	str	r3, [r7, #24]
}
 8006066:	bf00      	nop
 8006068:	e7fe      	b.n	8006068 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800606e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006070:	2b00      	cmp	r3, #0
 8006072:	d00d      	beq.n	8006090 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006076:	2201      	movs	r2, #1
 8006078:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800607c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006082:	9300      	str	r3, [sp, #0]
 8006084:	4613      	mov	r3, r2
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	68b9      	ldr	r1, [r7, #8]
 800608a:	68f8      	ldr	r0, [r7, #12]
 800608c:	f000 f843 	bl	8006116 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006092:	4618      	mov	r0, r3
 8006094:	3730      	adds	r7, #48	; 0x30
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800609a:	b580      	push	{r7, lr}
 800609c:	b08a      	sub	sp, #40	; 0x28
 800609e:	af02      	add	r7, sp, #8
 80060a0:	60f8      	str	r0, [r7, #12]
 80060a2:	60b9      	str	r1, [r7, #8]
 80060a4:	4613      	mov	r3, r2
 80060a6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d10a      	bne.n	80060c4 <xQueueGenericCreate+0x2a>
	__asm volatile
 80060ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b2:	f383 8811 	msr	BASEPRI, r3
 80060b6:	f3bf 8f6f 	isb	sy
 80060ba:	f3bf 8f4f 	dsb	sy
 80060be:	613b      	str	r3, [r7, #16]
}
 80060c0:	bf00      	nop
 80060c2:	e7fe      	b.n	80060c2 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d102      	bne.n	80060d0 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80060ca:	2300      	movs	r3, #0
 80060cc:	61fb      	str	r3, [r7, #28]
 80060ce:	e004      	b.n	80060da <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	68ba      	ldr	r2, [r7, #8]
 80060d4:	fb02 f303 	mul.w	r3, r2, r3
 80060d8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	3350      	adds	r3, #80	; 0x50
 80060de:	4618      	mov	r0, r3
 80060e0:	f002 fa91 	bl	8008606 <pvPortMalloc>
 80060e4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00f      	beq.n	800610c <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	3350      	adds	r3, #80	; 0x50
 80060f0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80060fa:	79fa      	ldrb	r2, [r7, #7]
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	9300      	str	r3, [sp, #0]
 8006100:	4613      	mov	r3, r2
 8006102:	697a      	ldr	r2, [r7, #20]
 8006104:	68b9      	ldr	r1, [r7, #8]
 8006106:	68f8      	ldr	r0, [r7, #12]
 8006108:	f000 f805 	bl	8006116 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800610c:	69bb      	ldr	r3, [r7, #24]
	}
 800610e:	4618      	mov	r0, r3
 8006110:	3720      	adds	r7, #32
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}

08006116 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006116:	b580      	push	{r7, lr}
 8006118:	b084      	sub	sp, #16
 800611a:	af00      	add	r7, sp, #0
 800611c:	60f8      	str	r0, [r7, #12]
 800611e:	60b9      	str	r1, [r7, #8]
 8006120:	607a      	str	r2, [r7, #4]
 8006122:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d103      	bne.n	8006132 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	69ba      	ldr	r2, [r7, #24]
 800612e:	601a      	str	r2, [r3, #0]
 8006130:	e002      	b.n	8006138 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	68ba      	ldr	r2, [r7, #8]
 8006142:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006144:	2101      	movs	r1, #1
 8006146:	69b8      	ldr	r0, [r7, #24]
 8006148:	f7ff fec8 	bl	8005edc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	78fa      	ldrb	r2, [r7, #3]
 8006150:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006154:	bf00      	nop
 8006156:	3710      	adds	r7, #16
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b08e      	sub	sp, #56	; 0x38
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]
 8006168:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800616a:	2300      	movs	r3, #0
 800616c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006174:	2b00      	cmp	r3, #0
 8006176:	d10a      	bne.n	800618e <xQueueGenericSend+0x32>
	__asm volatile
 8006178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800617c:	f383 8811 	msr	BASEPRI, r3
 8006180:	f3bf 8f6f 	isb	sy
 8006184:	f3bf 8f4f 	dsb	sy
 8006188:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800618a:	bf00      	nop
 800618c:	e7fe      	b.n	800618c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d103      	bne.n	800619c <xQueueGenericSend+0x40>
 8006194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006198:	2b00      	cmp	r3, #0
 800619a:	d101      	bne.n	80061a0 <xQueueGenericSend+0x44>
 800619c:	2301      	movs	r3, #1
 800619e:	e000      	b.n	80061a2 <xQueueGenericSend+0x46>
 80061a0:	2300      	movs	r3, #0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d10a      	bne.n	80061bc <xQueueGenericSend+0x60>
	__asm volatile
 80061a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061aa:	f383 8811 	msr	BASEPRI, r3
 80061ae:	f3bf 8f6f 	isb	sy
 80061b2:	f3bf 8f4f 	dsb	sy
 80061b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80061b8:	bf00      	nop
 80061ba:	e7fe      	b.n	80061ba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d103      	bne.n	80061ca <xQueueGenericSend+0x6e>
 80061c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d101      	bne.n	80061ce <xQueueGenericSend+0x72>
 80061ca:	2301      	movs	r3, #1
 80061cc:	e000      	b.n	80061d0 <xQueueGenericSend+0x74>
 80061ce:	2300      	movs	r3, #0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d10a      	bne.n	80061ea <xQueueGenericSend+0x8e>
	__asm volatile
 80061d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d8:	f383 8811 	msr	BASEPRI, r3
 80061dc:	f3bf 8f6f 	isb	sy
 80061e0:	f3bf 8f4f 	dsb	sy
 80061e4:	623b      	str	r3, [r7, #32]
}
 80061e6:	bf00      	nop
 80061e8:	e7fe      	b.n	80061e8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061ea:	f001 fb3f 	bl	800786c <xTaskGetSchedulerState>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d102      	bne.n	80061fa <xQueueGenericSend+0x9e>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d101      	bne.n	80061fe <xQueueGenericSend+0xa2>
 80061fa:	2301      	movs	r3, #1
 80061fc:	e000      	b.n	8006200 <xQueueGenericSend+0xa4>
 80061fe:	2300      	movs	r3, #0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d10a      	bne.n	800621a <xQueueGenericSend+0xbe>
	__asm volatile
 8006204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006208:	f383 8811 	msr	BASEPRI, r3
 800620c:	f3bf 8f6f 	isb	sy
 8006210:	f3bf 8f4f 	dsb	sy
 8006214:	61fb      	str	r3, [r7, #28]
}
 8006216:	bf00      	nop
 8006218:	e7fe      	b.n	8006218 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800621a:	f002 f843 	bl	80082a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800621e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006220:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006226:	429a      	cmp	r2, r3
 8006228:	d302      	bcc.n	8006230 <xQueueGenericSend+0xd4>
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	2b02      	cmp	r3, #2
 800622e:	d129      	bne.n	8006284 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006230:	683a      	ldr	r2, [r7, #0]
 8006232:	68b9      	ldr	r1, [r7, #8]
 8006234:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006236:	f000 fa07 	bl	8006648 <prvCopyDataToQueue>
 800623a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800623c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006240:	2b00      	cmp	r3, #0
 8006242:	d010      	beq.n	8006266 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006246:	3324      	adds	r3, #36	; 0x24
 8006248:	4618      	mov	r0, r3
 800624a:	f001 f947 	bl	80074dc <xTaskRemoveFromEventList>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d013      	beq.n	800627c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006254:	4b3f      	ldr	r3, [pc, #252]	; (8006354 <xQueueGenericSend+0x1f8>)
 8006256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800625a:	601a      	str	r2, [r3, #0]
 800625c:	f3bf 8f4f 	dsb	sy
 8006260:	f3bf 8f6f 	isb	sy
 8006264:	e00a      	b.n	800627c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006268:	2b00      	cmp	r3, #0
 800626a:	d007      	beq.n	800627c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800626c:	4b39      	ldr	r3, [pc, #228]	; (8006354 <xQueueGenericSend+0x1f8>)
 800626e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006272:	601a      	str	r2, [r3, #0]
 8006274:	f3bf 8f4f 	dsb	sy
 8006278:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800627c:	f002 f842 	bl	8008304 <vPortExitCritical>
				return pdPASS;
 8006280:	2301      	movs	r3, #1
 8006282:	e063      	b.n	800634c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d103      	bne.n	8006292 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800628a:	f002 f83b 	bl	8008304 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800628e:	2300      	movs	r3, #0
 8006290:	e05c      	b.n	800634c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006294:	2b00      	cmp	r3, #0
 8006296:	d106      	bne.n	80062a6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006298:	f107 0314 	add.w	r3, r7, #20
 800629c:	4618      	mov	r0, r3
 800629e:	f001 f981 	bl	80075a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062a2:	2301      	movs	r3, #1
 80062a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80062a6:	f002 f82d 	bl	8008304 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80062aa:	f000 fee9 	bl	8007080 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80062ae:	f001 fff9 	bl	80082a4 <vPortEnterCritical>
 80062b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062b8:	b25b      	sxtb	r3, r3
 80062ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062be:	d103      	bne.n	80062c8 <xQueueGenericSend+0x16c>
 80062c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c2:	2200      	movs	r2, #0
 80062c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062ce:	b25b      	sxtb	r3, r3
 80062d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062d4:	d103      	bne.n	80062de <xQueueGenericSend+0x182>
 80062d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062de:	f002 f811 	bl	8008304 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062e2:	1d3a      	adds	r2, r7, #4
 80062e4:	f107 0314 	add.w	r3, r7, #20
 80062e8:	4611      	mov	r1, r2
 80062ea:	4618      	mov	r0, r3
 80062ec:	f001 f970 	bl	80075d0 <xTaskCheckForTimeOut>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d124      	bne.n	8006340 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80062f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062f8:	f000 fa9e 	bl	8006838 <prvIsQueueFull>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d018      	beq.n	8006334 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006304:	3310      	adds	r3, #16
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	4611      	mov	r1, r2
 800630a:	4618      	mov	r0, r3
 800630c:	f001 f896 	bl	800743c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006310:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006312:	f000 fa29 	bl	8006768 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006316:	f000 fec1 	bl	800709c <xTaskResumeAll>
 800631a:	4603      	mov	r3, r0
 800631c:	2b00      	cmp	r3, #0
 800631e:	f47f af7c 	bne.w	800621a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006322:	4b0c      	ldr	r3, [pc, #48]	; (8006354 <xQueueGenericSend+0x1f8>)
 8006324:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006328:	601a      	str	r2, [r3, #0]
 800632a:	f3bf 8f4f 	dsb	sy
 800632e:	f3bf 8f6f 	isb	sy
 8006332:	e772      	b.n	800621a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006334:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006336:	f000 fa17 	bl	8006768 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800633a:	f000 feaf 	bl	800709c <xTaskResumeAll>
 800633e:	e76c      	b.n	800621a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006340:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006342:	f000 fa11 	bl	8006768 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006346:	f000 fea9 	bl	800709c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800634a:	2300      	movs	r3, #0
		}
	}
}
 800634c:	4618      	mov	r0, r3
 800634e:	3738      	adds	r7, #56	; 0x38
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	e000ed04 	.word	0xe000ed04

08006358 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b08e      	sub	sp, #56	; 0x38
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	607a      	str	r2, [r7, #4]
 8006364:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800636a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636c:	2b00      	cmp	r3, #0
 800636e:	d10a      	bne.n	8006386 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006374:	f383 8811 	msr	BASEPRI, r3
 8006378:	f3bf 8f6f 	isb	sy
 800637c:	f3bf 8f4f 	dsb	sy
 8006380:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006382:	bf00      	nop
 8006384:	e7fe      	b.n	8006384 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d103      	bne.n	8006394 <xQueueGenericSendFromISR+0x3c>
 800638c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006390:	2b00      	cmp	r3, #0
 8006392:	d101      	bne.n	8006398 <xQueueGenericSendFromISR+0x40>
 8006394:	2301      	movs	r3, #1
 8006396:	e000      	b.n	800639a <xQueueGenericSendFromISR+0x42>
 8006398:	2300      	movs	r3, #0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d10a      	bne.n	80063b4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800639e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a2:	f383 8811 	msr	BASEPRI, r3
 80063a6:	f3bf 8f6f 	isb	sy
 80063aa:	f3bf 8f4f 	dsb	sy
 80063ae:	623b      	str	r3, [r7, #32]
}
 80063b0:	bf00      	nop
 80063b2:	e7fe      	b.n	80063b2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d103      	bne.n	80063c2 <xQueueGenericSendFromISR+0x6a>
 80063ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d101      	bne.n	80063c6 <xQueueGenericSendFromISR+0x6e>
 80063c2:	2301      	movs	r3, #1
 80063c4:	e000      	b.n	80063c8 <xQueueGenericSendFromISR+0x70>
 80063c6:	2300      	movs	r3, #0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d10a      	bne.n	80063e2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80063cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d0:	f383 8811 	msr	BASEPRI, r3
 80063d4:	f3bf 8f6f 	isb	sy
 80063d8:	f3bf 8f4f 	dsb	sy
 80063dc:	61fb      	str	r3, [r7, #28]
}
 80063de:	bf00      	nop
 80063e0:	e7fe      	b.n	80063e0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80063e2:	f002 f841 	bl	8008468 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80063e6:	f3ef 8211 	mrs	r2, BASEPRI
 80063ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ee:	f383 8811 	msr	BASEPRI, r3
 80063f2:	f3bf 8f6f 	isb	sy
 80063f6:	f3bf 8f4f 	dsb	sy
 80063fa:	61ba      	str	r2, [r7, #24]
 80063fc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80063fe:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006400:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006404:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800640a:	429a      	cmp	r2, r3
 800640c:	d302      	bcc.n	8006414 <xQueueGenericSendFromISR+0xbc>
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	2b02      	cmp	r3, #2
 8006412:	d12c      	bne.n	800646e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006416:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800641a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800641e:	683a      	ldr	r2, [r7, #0]
 8006420:	68b9      	ldr	r1, [r7, #8]
 8006422:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006424:	f000 f910 	bl	8006648 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006428:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800642c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006430:	d112      	bne.n	8006458 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006436:	2b00      	cmp	r3, #0
 8006438:	d016      	beq.n	8006468 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800643a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643c:	3324      	adds	r3, #36	; 0x24
 800643e:	4618      	mov	r0, r3
 8006440:	f001 f84c 	bl	80074dc <xTaskRemoveFromEventList>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d00e      	beq.n	8006468 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00b      	beq.n	8006468 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	601a      	str	r2, [r3, #0]
 8006456:	e007      	b.n	8006468 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006458:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800645c:	3301      	adds	r3, #1
 800645e:	b2db      	uxtb	r3, r3
 8006460:	b25a      	sxtb	r2, r3
 8006462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006464:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006468:	2301      	movs	r3, #1
 800646a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800646c:	e001      	b.n	8006472 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800646e:	2300      	movs	r3, #0
 8006470:	637b      	str	r3, [r7, #52]	; 0x34
 8006472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006474:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800647c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800647e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006480:	4618      	mov	r0, r3
 8006482:	3738      	adds	r7, #56	; 0x38
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b08c      	sub	sp, #48	; 0x30
 800648c:	af00      	add	r7, sp, #0
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	60b9      	str	r1, [r7, #8]
 8006492:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006494:	2300      	movs	r3, #0
 8006496:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800649c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d10a      	bne.n	80064b8 <xQueueReceive+0x30>
	__asm volatile
 80064a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a6:	f383 8811 	msr	BASEPRI, r3
 80064aa:	f3bf 8f6f 	isb	sy
 80064ae:	f3bf 8f4f 	dsb	sy
 80064b2:	623b      	str	r3, [r7, #32]
}
 80064b4:	bf00      	nop
 80064b6:	e7fe      	b.n	80064b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d103      	bne.n	80064c6 <xQueueReceive+0x3e>
 80064be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d101      	bne.n	80064ca <xQueueReceive+0x42>
 80064c6:	2301      	movs	r3, #1
 80064c8:	e000      	b.n	80064cc <xQueueReceive+0x44>
 80064ca:	2300      	movs	r3, #0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d10a      	bne.n	80064e6 <xQueueReceive+0x5e>
	__asm volatile
 80064d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d4:	f383 8811 	msr	BASEPRI, r3
 80064d8:	f3bf 8f6f 	isb	sy
 80064dc:	f3bf 8f4f 	dsb	sy
 80064e0:	61fb      	str	r3, [r7, #28]
}
 80064e2:	bf00      	nop
 80064e4:	e7fe      	b.n	80064e4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064e6:	f001 f9c1 	bl	800786c <xTaskGetSchedulerState>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d102      	bne.n	80064f6 <xQueueReceive+0x6e>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d101      	bne.n	80064fa <xQueueReceive+0x72>
 80064f6:	2301      	movs	r3, #1
 80064f8:	e000      	b.n	80064fc <xQueueReceive+0x74>
 80064fa:	2300      	movs	r3, #0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d10a      	bne.n	8006516 <xQueueReceive+0x8e>
	__asm volatile
 8006500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006504:	f383 8811 	msr	BASEPRI, r3
 8006508:	f3bf 8f6f 	isb	sy
 800650c:	f3bf 8f4f 	dsb	sy
 8006510:	61bb      	str	r3, [r7, #24]
}
 8006512:	bf00      	nop
 8006514:	e7fe      	b.n	8006514 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006516:	f001 fec5 	bl	80082a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800651a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800651e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006522:	2b00      	cmp	r3, #0
 8006524:	d01f      	beq.n	8006566 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006526:	68b9      	ldr	r1, [r7, #8]
 8006528:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800652a:	f000 f8f7 	bl	800671c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800652e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006530:	1e5a      	subs	r2, r3, #1
 8006532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006534:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d00f      	beq.n	800655e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800653e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006540:	3310      	adds	r3, #16
 8006542:	4618      	mov	r0, r3
 8006544:	f000 ffca 	bl	80074dc <xTaskRemoveFromEventList>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d007      	beq.n	800655e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800654e:	4b3d      	ldr	r3, [pc, #244]	; (8006644 <xQueueReceive+0x1bc>)
 8006550:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006554:	601a      	str	r2, [r3, #0]
 8006556:	f3bf 8f4f 	dsb	sy
 800655a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800655e:	f001 fed1 	bl	8008304 <vPortExitCritical>
				return pdPASS;
 8006562:	2301      	movs	r3, #1
 8006564:	e069      	b.n	800663a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d103      	bne.n	8006574 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800656c:	f001 feca 	bl	8008304 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006570:	2300      	movs	r3, #0
 8006572:	e062      	b.n	800663a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006576:	2b00      	cmp	r3, #0
 8006578:	d106      	bne.n	8006588 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800657a:	f107 0310 	add.w	r3, r7, #16
 800657e:	4618      	mov	r0, r3
 8006580:	f001 f810 	bl	80075a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006584:	2301      	movs	r3, #1
 8006586:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006588:	f001 febc 	bl	8008304 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800658c:	f000 fd78 	bl	8007080 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006590:	f001 fe88 	bl	80082a4 <vPortEnterCritical>
 8006594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006596:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800659a:	b25b      	sxtb	r3, r3
 800659c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065a0:	d103      	bne.n	80065aa <xQueueReceive+0x122>
 80065a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065b0:	b25b      	sxtb	r3, r3
 80065b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065b6:	d103      	bne.n	80065c0 <xQueueReceive+0x138>
 80065b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ba:	2200      	movs	r2, #0
 80065bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065c0:	f001 fea0 	bl	8008304 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80065c4:	1d3a      	adds	r2, r7, #4
 80065c6:	f107 0310 	add.w	r3, r7, #16
 80065ca:	4611      	mov	r1, r2
 80065cc:	4618      	mov	r0, r3
 80065ce:	f000 ffff 	bl	80075d0 <xTaskCheckForTimeOut>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d123      	bne.n	8006620 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065da:	f000 f917 	bl	800680c <prvIsQueueEmpty>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d017      	beq.n	8006614 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80065e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e6:	3324      	adds	r3, #36	; 0x24
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	4611      	mov	r1, r2
 80065ec:	4618      	mov	r0, r3
 80065ee:	f000 ff25 	bl	800743c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80065f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065f4:	f000 f8b8 	bl	8006768 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80065f8:	f000 fd50 	bl	800709c <xTaskResumeAll>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d189      	bne.n	8006516 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006602:	4b10      	ldr	r3, [pc, #64]	; (8006644 <xQueueReceive+0x1bc>)
 8006604:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006608:	601a      	str	r2, [r3, #0]
 800660a:	f3bf 8f4f 	dsb	sy
 800660e:	f3bf 8f6f 	isb	sy
 8006612:	e780      	b.n	8006516 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006614:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006616:	f000 f8a7 	bl	8006768 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800661a:	f000 fd3f 	bl	800709c <xTaskResumeAll>
 800661e:	e77a      	b.n	8006516 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006620:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006622:	f000 f8a1 	bl	8006768 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006626:	f000 fd39 	bl	800709c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800662a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800662c:	f000 f8ee 	bl	800680c <prvIsQueueEmpty>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	f43f af6f 	beq.w	8006516 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006638:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800663a:	4618      	mov	r0, r3
 800663c:	3730      	adds	r7, #48	; 0x30
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop
 8006644:	e000ed04 	.word	0xe000ed04

08006648 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b086      	sub	sp, #24
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006654:	2300      	movs	r3, #0
 8006656:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800665c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006662:	2b00      	cmp	r3, #0
 8006664:	d10d      	bne.n	8006682 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d14d      	bne.n	800670a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	4618      	mov	r0, r3
 8006674:	f001 f918 	bl	80078a8 <xTaskPriorityDisinherit>
 8006678:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	605a      	str	r2, [r3, #4]
 8006680:	e043      	b.n	800670a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d119      	bne.n	80066bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6898      	ldr	r0, [r3, #8]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006690:	461a      	mov	r2, r3
 8006692:	68b9      	ldr	r1, [r7, #8]
 8006694:	f002 f904 	bl	80088a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	689a      	ldr	r2, [r3, #8]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a0:	441a      	add	r2, r3
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	689a      	ldr	r2, [r3, #8]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d32b      	bcc.n	800670a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	609a      	str	r2, [r3, #8]
 80066ba:	e026      	b.n	800670a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	68d8      	ldr	r0, [r3, #12]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c4:	461a      	mov	r2, r3
 80066c6:	68b9      	ldr	r1, [r7, #8]
 80066c8:	f002 f8ea 	bl	80088a0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	68da      	ldr	r2, [r3, #12]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d4:	425b      	negs	r3, r3
 80066d6:	441a      	add	r2, r3
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	68da      	ldr	r2, [r3, #12]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d207      	bcs.n	80066f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	685a      	ldr	r2, [r3, #4]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f0:	425b      	negs	r3, r3
 80066f2:	441a      	add	r2, r3
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	d105      	bne.n	800670a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d002      	beq.n	800670a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	3b01      	subs	r3, #1
 8006708:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	1c5a      	adds	r2, r3, #1
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006712:	697b      	ldr	r3, [r7, #20]
}
 8006714:	4618      	mov	r0, r3
 8006716:	3718      	adds	r7, #24
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672a:	2b00      	cmp	r3, #0
 800672c:	d018      	beq.n	8006760 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	68da      	ldr	r2, [r3, #12]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006736:	441a      	add	r2, r3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	68da      	ldr	r2, [r3, #12]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	429a      	cmp	r2, r3
 8006746:	d303      	bcc.n	8006750 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	68d9      	ldr	r1, [r3, #12]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006758:	461a      	mov	r2, r3
 800675a:	6838      	ldr	r0, [r7, #0]
 800675c:	f002 f8a0 	bl	80088a0 <memcpy>
	}
}
 8006760:	bf00      	nop
 8006762:	3708      	adds	r7, #8
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006770:	f001 fd98 	bl	80082a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800677a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800677c:	e011      	b.n	80067a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006782:	2b00      	cmp	r3, #0
 8006784:	d012      	beq.n	80067ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	3324      	adds	r3, #36	; 0x24
 800678a:	4618      	mov	r0, r3
 800678c:	f000 fea6 	bl	80074dc <xTaskRemoveFromEventList>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d001      	beq.n	800679a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006796:	f000 ff7d 	bl	8007694 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800679a:	7bfb      	ldrb	r3, [r7, #15]
 800679c:	3b01      	subs	r3, #1
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	dce9      	bgt.n	800677e <prvUnlockQueue+0x16>
 80067aa:	e000      	b.n	80067ae <prvUnlockQueue+0x46>
					break;
 80067ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	22ff      	movs	r2, #255	; 0xff
 80067b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80067b6:	f001 fda5 	bl	8008304 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80067ba:	f001 fd73 	bl	80082a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067c6:	e011      	b.n	80067ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	691b      	ldr	r3, [r3, #16]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d012      	beq.n	80067f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	3310      	adds	r3, #16
 80067d4:	4618      	mov	r0, r3
 80067d6:	f000 fe81 	bl	80074dc <xTaskRemoveFromEventList>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d001      	beq.n	80067e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80067e0:	f000 ff58 	bl	8007694 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80067e4:	7bbb      	ldrb	r3, [r7, #14]
 80067e6:	3b01      	subs	r3, #1
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	dce9      	bgt.n	80067c8 <prvUnlockQueue+0x60>
 80067f4:	e000      	b.n	80067f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80067f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	22ff      	movs	r2, #255	; 0xff
 80067fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006800:	f001 fd80 	bl	8008304 <vPortExitCritical>
}
 8006804:	bf00      	nop
 8006806:	3710      	adds	r7, #16
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006814:	f001 fd46 	bl	80082a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800681c:	2b00      	cmp	r3, #0
 800681e:	d102      	bne.n	8006826 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006820:	2301      	movs	r3, #1
 8006822:	60fb      	str	r3, [r7, #12]
 8006824:	e001      	b.n	800682a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006826:	2300      	movs	r3, #0
 8006828:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800682a:	f001 fd6b 	bl	8008304 <vPortExitCritical>

	return xReturn;
 800682e:	68fb      	ldr	r3, [r7, #12]
}
 8006830:	4618      	mov	r0, r3
 8006832:	3710      	adds	r7, #16
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006840:	f001 fd30 	bl	80082a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800684c:	429a      	cmp	r2, r3
 800684e:	d102      	bne.n	8006856 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006850:	2301      	movs	r3, #1
 8006852:	60fb      	str	r3, [r7, #12]
 8006854:	e001      	b.n	800685a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006856:	2300      	movs	r3, #0
 8006858:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800685a:	f001 fd53 	bl	8008304 <vPortExitCritical>

	return xReturn;
 800685e:	68fb      	ldr	r3, [r7, #12]
}
 8006860:	4618      	mov	r0, r3
 8006862:	3710      	adds	r7, #16
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006868:	b480      	push	{r7}
 800686a:	b085      	sub	sp, #20
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006872:	2300      	movs	r3, #0
 8006874:	60fb      	str	r3, [r7, #12]
 8006876:	e014      	b.n	80068a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006878:	4a0f      	ldr	r2, [pc, #60]	; (80068b8 <vQueueAddToRegistry+0x50>)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d10b      	bne.n	800689c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006884:	490c      	ldr	r1, [pc, #48]	; (80068b8 <vQueueAddToRegistry+0x50>)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	683a      	ldr	r2, [r7, #0]
 800688a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800688e:	4a0a      	ldr	r2, [pc, #40]	; (80068b8 <vQueueAddToRegistry+0x50>)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	00db      	lsls	r3, r3, #3
 8006894:	4413      	add	r3, r2
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800689a:	e006      	b.n	80068aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	3301      	adds	r3, #1
 80068a0:	60fb      	str	r3, [r7, #12]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2b07      	cmp	r3, #7
 80068a6:	d9e7      	bls.n	8006878 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80068a8:	bf00      	nop
 80068aa:	bf00      	nop
 80068ac:	3714      	adds	r7, #20
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr
 80068b6:	bf00      	nop
 80068b8:	20000e88 	.word	0x20000e88

080068bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b086      	sub	sp, #24
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80068cc:	f001 fcea 	bl	80082a4 <vPortEnterCritical>
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068d6:	b25b      	sxtb	r3, r3
 80068d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068dc:	d103      	bne.n	80068e6 <vQueueWaitForMessageRestricted+0x2a>
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	2200      	movs	r2, #0
 80068e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068ec:	b25b      	sxtb	r3, r3
 80068ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068f2:	d103      	bne.n	80068fc <vQueueWaitForMessageRestricted+0x40>
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068fc:	f001 fd02 	bl	8008304 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006904:	2b00      	cmp	r3, #0
 8006906:	d106      	bne.n	8006916 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	3324      	adds	r3, #36	; 0x24
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	68b9      	ldr	r1, [r7, #8]
 8006910:	4618      	mov	r0, r3
 8006912:	f000 fdb7 	bl	8007484 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006916:	6978      	ldr	r0, [r7, #20]
 8006918:	f7ff ff26 	bl	8006768 <prvUnlockQueue>
	}
 800691c:	bf00      	nop
 800691e:	3718      	adds	r7, #24
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006924:	b580      	push	{r7, lr}
 8006926:	b08e      	sub	sp, #56	; 0x38
 8006928:	af04      	add	r7, sp, #16
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	607a      	str	r2, [r7, #4]
 8006930:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006934:	2b00      	cmp	r3, #0
 8006936:	d10a      	bne.n	800694e <xTaskCreateStatic+0x2a>
	__asm volatile
 8006938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693c:	f383 8811 	msr	BASEPRI, r3
 8006940:	f3bf 8f6f 	isb	sy
 8006944:	f3bf 8f4f 	dsb	sy
 8006948:	623b      	str	r3, [r7, #32]
}
 800694a:	bf00      	nop
 800694c:	e7fe      	b.n	800694c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800694e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006950:	2b00      	cmp	r3, #0
 8006952:	d10a      	bne.n	800696a <xTaskCreateStatic+0x46>
	__asm volatile
 8006954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006958:	f383 8811 	msr	BASEPRI, r3
 800695c:	f3bf 8f6f 	isb	sy
 8006960:	f3bf 8f4f 	dsb	sy
 8006964:	61fb      	str	r3, [r7, #28]
}
 8006966:	bf00      	nop
 8006968:	e7fe      	b.n	8006968 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800696a:	23bc      	movs	r3, #188	; 0xbc
 800696c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	2bbc      	cmp	r3, #188	; 0xbc
 8006972:	d00a      	beq.n	800698a <xTaskCreateStatic+0x66>
	__asm volatile
 8006974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006978:	f383 8811 	msr	BASEPRI, r3
 800697c:	f3bf 8f6f 	isb	sy
 8006980:	f3bf 8f4f 	dsb	sy
 8006984:	61bb      	str	r3, [r7, #24]
}
 8006986:	bf00      	nop
 8006988:	e7fe      	b.n	8006988 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800698a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800698c:	2b00      	cmp	r3, #0
 800698e:	d01e      	beq.n	80069ce <xTaskCreateStatic+0xaa>
 8006990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006992:	2b00      	cmp	r3, #0
 8006994:	d01b      	beq.n	80069ce <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006998:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800699a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800699e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80069a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a2:	2202      	movs	r2, #2
 80069a4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80069a8:	2300      	movs	r3, #0
 80069aa:	9303      	str	r3, [sp, #12]
 80069ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ae:	9302      	str	r3, [sp, #8]
 80069b0:	f107 0314 	add.w	r3, r7, #20
 80069b4:	9301      	str	r3, [sp, #4]
 80069b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b8:	9300      	str	r3, [sp, #0]
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	68b9      	ldr	r1, [r7, #8]
 80069c0:	68f8      	ldr	r0, [r7, #12]
 80069c2:	f000 f851 	bl	8006a68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80069c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069c8:	f000 f8ec 	bl	8006ba4 <prvAddNewTaskToReadyList>
 80069cc:	e001      	b.n	80069d2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80069ce:	2300      	movs	r3, #0
 80069d0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80069d2:	697b      	ldr	r3, [r7, #20]
	}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3728      	adds	r7, #40	; 0x28
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b08c      	sub	sp, #48	; 0x30
 80069e0:	af04      	add	r7, sp, #16
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	603b      	str	r3, [r7, #0]
 80069e8:	4613      	mov	r3, r2
 80069ea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069ec:	88fb      	ldrh	r3, [r7, #6]
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	4618      	mov	r0, r3
 80069f2:	f001 fe08 	bl	8008606 <pvPortMalloc>
 80069f6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00e      	beq.n	8006a1c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80069fe:	20bc      	movs	r0, #188	; 0xbc
 8006a00:	f001 fe01 	bl	8008606 <pvPortMalloc>
 8006a04:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d003      	beq.n	8006a14 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	697a      	ldr	r2, [r7, #20]
 8006a10:	631a      	str	r2, [r3, #48]	; 0x30
 8006a12:	e005      	b.n	8006a20 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006a14:	6978      	ldr	r0, [r7, #20]
 8006a16:	f001 fe04 	bl	8008622 <vPortFree>
 8006a1a:	e001      	b.n	8006a20 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d017      	beq.n	8006a56 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006a2e:	88fa      	ldrh	r2, [r7, #6]
 8006a30:	2300      	movs	r3, #0
 8006a32:	9303      	str	r3, [sp, #12]
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	9302      	str	r3, [sp, #8]
 8006a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a3a:	9301      	str	r3, [sp, #4]
 8006a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3e:	9300      	str	r3, [sp, #0]
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	68b9      	ldr	r1, [r7, #8]
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f000 f80f 	bl	8006a68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a4a:	69f8      	ldr	r0, [r7, #28]
 8006a4c:	f000 f8aa 	bl	8006ba4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006a50:	2301      	movs	r3, #1
 8006a52:	61bb      	str	r3, [r7, #24]
 8006a54:	e002      	b.n	8006a5c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006a56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a5a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006a5c:	69bb      	ldr	r3, [r7, #24]
	}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3720      	adds	r7, #32
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
	...

08006a68 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b088      	sub	sp, #32
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	60b9      	str	r1, [r7, #8]
 8006a72:	607a      	str	r2, [r7, #4]
 8006a74:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a78:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	461a      	mov	r2, r3
 8006a80:	21a5      	movs	r1, #165	; 0xa5
 8006a82:	f001 ff1b 	bl	80088bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006a90:	3b01      	subs	r3, #1
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	4413      	add	r3, r2
 8006a96:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	f023 0307 	bic.w	r3, r3, #7
 8006a9e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	f003 0307 	and.w	r3, r3, #7
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00a      	beq.n	8006ac0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aae:	f383 8811 	msr	BASEPRI, r3
 8006ab2:	f3bf 8f6f 	isb	sy
 8006ab6:	f3bf 8f4f 	dsb	sy
 8006aba:	617b      	str	r3, [r7, #20]
}
 8006abc:	bf00      	nop
 8006abe:	e7fe      	b.n	8006abe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	61fb      	str	r3, [r7, #28]
 8006ac4:	e012      	b.n	8006aec <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006ac6:	68ba      	ldr	r2, [r7, #8]
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	4413      	add	r3, r2
 8006acc:	7819      	ldrb	r1, [r3, #0]
 8006ace:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	4413      	add	r3, r2
 8006ad4:	3334      	adds	r3, #52	; 0x34
 8006ad6:	460a      	mov	r2, r1
 8006ad8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006ada:	68ba      	ldr	r2, [r7, #8]
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	4413      	add	r3, r2
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d006      	beq.n	8006af4 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	3301      	adds	r3, #1
 8006aea:	61fb      	str	r3, [r7, #28]
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	2b0f      	cmp	r3, #15
 8006af0:	d9e9      	bls.n	8006ac6 <prvInitialiseNewTask+0x5e>
 8006af2:	e000      	b.n	8006af6 <prvInitialiseNewTask+0x8e>
		{
			break;
 8006af4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af8:	2200      	movs	r2, #0
 8006afa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b00:	2b37      	cmp	r3, #55	; 0x37
 8006b02:	d901      	bls.n	8006b08 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006b04:	2337      	movs	r3, #55	; 0x37
 8006b06:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b0c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b12:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b16:	2200      	movs	r2, #0
 8006b18:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1c:	3304      	adds	r3, #4
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f7ff f948 	bl	8005db4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b26:	3318      	adds	r3, #24
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f7ff f943 	bl	8005db4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b32:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b36:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b42:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b46:	2200      	movs	r2, #0
 8006b48:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b56:	3354      	adds	r3, #84	; 0x54
 8006b58:	2260      	movs	r2, #96	; 0x60
 8006b5a:	2100      	movs	r1, #0
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f001 fead 	bl	80088bc <memset>
 8006b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b64:	4a0c      	ldr	r2, [pc, #48]	; (8006b98 <prvInitialiseNewTask+0x130>)
 8006b66:	659a      	str	r2, [r3, #88]	; 0x58
 8006b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6a:	4a0c      	ldr	r2, [pc, #48]	; (8006b9c <prvInitialiseNewTask+0x134>)
 8006b6c:	65da      	str	r2, [r3, #92]	; 0x5c
 8006b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b70:	4a0b      	ldr	r2, [pc, #44]	; (8006ba0 <prvInitialiseNewTask+0x138>)
 8006b72:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006b74:	683a      	ldr	r2, [r7, #0]
 8006b76:	68f9      	ldr	r1, [r7, #12]
 8006b78:	69b8      	ldr	r0, [r7, #24]
 8006b7a:	f001 fa69 	bl	8008050 <pxPortInitialiseStack>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b82:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d002      	beq.n	8006b90 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b8e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b90:	bf00      	nop
 8006b92:	3720      	adds	r7, #32
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	0800be4c 	.word	0x0800be4c
 8006b9c:	0800be6c 	.word	0x0800be6c
 8006ba0:	0800be2c 	.word	0x0800be2c

08006ba4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b082      	sub	sp, #8
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006bac:	f001 fb7a 	bl	80082a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006bb0:	4b2d      	ldr	r3, [pc, #180]	; (8006c68 <prvAddNewTaskToReadyList+0xc4>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	4a2c      	ldr	r2, [pc, #176]	; (8006c68 <prvAddNewTaskToReadyList+0xc4>)
 8006bb8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006bba:	4b2c      	ldr	r3, [pc, #176]	; (8006c6c <prvAddNewTaskToReadyList+0xc8>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d109      	bne.n	8006bd6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006bc2:	4a2a      	ldr	r2, [pc, #168]	; (8006c6c <prvAddNewTaskToReadyList+0xc8>)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006bc8:	4b27      	ldr	r3, [pc, #156]	; (8006c68 <prvAddNewTaskToReadyList+0xc4>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d110      	bne.n	8006bf2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006bd0:	f000 fd84 	bl	80076dc <prvInitialiseTaskLists>
 8006bd4:	e00d      	b.n	8006bf2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006bd6:	4b26      	ldr	r3, [pc, #152]	; (8006c70 <prvAddNewTaskToReadyList+0xcc>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d109      	bne.n	8006bf2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006bde:	4b23      	ldr	r3, [pc, #140]	; (8006c6c <prvAddNewTaskToReadyList+0xc8>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d802      	bhi.n	8006bf2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006bec:	4a1f      	ldr	r2, [pc, #124]	; (8006c6c <prvAddNewTaskToReadyList+0xc8>)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006bf2:	4b20      	ldr	r3, [pc, #128]	; (8006c74 <prvAddNewTaskToReadyList+0xd0>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	4a1e      	ldr	r2, [pc, #120]	; (8006c74 <prvAddNewTaskToReadyList+0xd0>)
 8006bfa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006bfc:	4b1d      	ldr	r3, [pc, #116]	; (8006c74 <prvAddNewTaskToReadyList+0xd0>)
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c08:	4b1b      	ldr	r3, [pc, #108]	; (8006c78 <prvAddNewTaskToReadyList+0xd4>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d903      	bls.n	8006c18 <prvAddNewTaskToReadyList+0x74>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c14:	4a18      	ldr	r2, [pc, #96]	; (8006c78 <prvAddNewTaskToReadyList+0xd4>)
 8006c16:	6013      	str	r3, [r2, #0]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	4413      	add	r3, r2
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	4a15      	ldr	r2, [pc, #84]	; (8006c7c <prvAddNewTaskToReadyList+0xd8>)
 8006c26:	441a      	add	r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	3304      	adds	r3, #4
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	4610      	mov	r0, r2
 8006c30:	f7ff f8cd 	bl	8005dce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006c34:	f001 fb66 	bl	8008304 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006c38:	4b0d      	ldr	r3, [pc, #52]	; (8006c70 <prvAddNewTaskToReadyList+0xcc>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d00e      	beq.n	8006c5e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006c40:	4b0a      	ldr	r3, [pc, #40]	; (8006c6c <prvAddNewTaskToReadyList+0xc8>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d207      	bcs.n	8006c5e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006c4e:	4b0c      	ldr	r3, [pc, #48]	; (8006c80 <prvAddNewTaskToReadyList+0xdc>)
 8006c50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c54:	601a      	str	r2, [r3, #0]
 8006c56:	f3bf 8f4f 	dsb	sy
 8006c5a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c5e:	bf00      	nop
 8006c60:	3708      	adds	r7, #8
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	2000139c 	.word	0x2000139c
 8006c6c:	20000ec8 	.word	0x20000ec8
 8006c70:	200013a8 	.word	0x200013a8
 8006c74:	200013b8 	.word	0x200013b8
 8006c78:	200013a4 	.word	0x200013a4
 8006c7c:	20000ecc 	.word	0x20000ecc
 8006c80:	e000ed04 	.word	0xe000ed04

08006c84 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b08a      	sub	sp, #40	; 0x28
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d10a      	bne.n	8006cae <vTaskDelayUntil+0x2a>
	__asm volatile
 8006c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9c:	f383 8811 	msr	BASEPRI, r3
 8006ca0:	f3bf 8f6f 	isb	sy
 8006ca4:	f3bf 8f4f 	dsb	sy
 8006ca8:	617b      	str	r3, [r7, #20]
}
 8006caa:	bf00      	nop
 8006cac:	e7fe      	b.n	8006cac <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d10a      	bne.n	8006cca <vTaskDelayUntil+0x46>
	__asm volatile
 8006cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb8:	f383 8811 	msr	BASEPRI, r3
 8006cbc:	f3bf 8f6f 	isb	sy
 8006cc0:	f3bf 8f4f 	dsb	sy
 8006cc4:	613b      	str	r3, [r7, #16]
}
 8006cc6:	bf00      	nop
 8006cc8:	e7fe      	b.n	8006cc8 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8006cca:	4b2a      	ldr	r3, [pc, #168]	; (8006d74 <vTaskDelayUntil+0xf0>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00a      	beq.n	8006ce8 <vTaskDelayUntil+0x64>
	__asm volatile
 8006cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd6:	f383 8811 	msr	BASEPRI, r3
 8006cda:	f3bf 8f6f 	isb	sy
 8006cde:	f3bf 8f4f 	dsb	sy
 8006ce2:	60fb      	str	r3, [r7, #12]
}
 8006ce4:	bf00      	nop
 8006ce6:	e7fe      	b.n	8006ce6 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8006ce8:	f000 f9ca 	bl	8007080 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8006cec:	4b22      	ldr	r3, [pc, #136]	; (8006d78 <vTaskDelayUntil+0xf4>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	683a      	ldr	r2, [r7, #0]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	6a3a      	ldr	r2, [r7, #32]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d20b      	bcs.n	8006d1e <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	69fa      	ldr	r2, [r7, #28]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d211      	bcs.n	8006d34 <vTaskDelayUntil+0xb0>
 8006d10:	69fa      	ldr	r2, [r7, #28]
 8006d12:	6a3b      	ldr	r3, [r7, #32]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d90d      	bls.n	8006d34 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8006d1c:	e00a      	b.n	8006d34 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	69fa      	ldr	r2, [r7, #28]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d303      	bcc.n	8006d30 <vTaskDelayUntil+0xac>
 8006d28:	69fa      	ldr	r2, [r7, #28]
 8006d2a:	6a3b      	ldr	r3, [r7, #32]
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d901      	bls.n	8006d34 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8006d30:	2301      	movs	r3, #1
 8006d32:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	69fa      	ldr	r2, [r7, #28]
 8006d38:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8006d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d006      	beq.n	8006d4e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8006d40:	69fa      	ldr	r2, [r7, #28]
 8006d42:	6a3b      	ldr	r3, [r7, #32]
 8006d44:	1ad3      	subs	r3, r2, r3
 8006d46:	2100      	movs	r1, #0
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f000 fe1b 	bl	8007984 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8006d4e:	f000 f9a5 	bl	800709c <xTaskResumeAll>
 8006d52:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d54:	69bb      	ldr	r3, [r7, #24]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d107      	bne.n	8006d6a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8006d5a:	4b08      	ldr	r3, [pc, #32]	; (8006d7c <vTaskDelayUntil+0xf8>)
 8006d5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d60:	601a      	str	r2, [r3, #0]
 8006d62:	f3bf 8f4f 	dsb	sy
 8006d66:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d6a:	bf00      	nop
 8006d6c:	3728      	adds	r7, #40	; 0x28
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	200013c4 	.word	0x200013c4
 8006d78:	200013a0 	.word	0x200013a0
 8006d7c:	e000ed04 	.word	0xe000ed04

08006d80 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006d88:	f001 fa8c 	bl	80082a4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d102      	bne.n	8006d98 <vTaskSuspend+0x18>
 8006d92:	4b30      	ldr	r3, [pc, #192]	; (8006e54 <vTaskSuspend+0xd4>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	e000      	b.n	8006d9a <vTaskSuspend+0x1a>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	3304      	adds	r3, #4
 8006da0:	4618      	mov	r0, r3
 8006da2:	f7ff f871 	bl	8005e88 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d004      	beq.n	8006db8 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	3318      	adds	r3, #24
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7ff f868 	bl	8005e88 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	3304      	adds	r3, #4
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	4826      	ldr	r0, [pc, #152]	; (8006e58 <vTaskSuspend+0xd8>)
 8006dc0:	f7ff f805 	bl	8005dce <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d103      	bne.n	8006dd8 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8006dd8:	f001 fa94 	bl	8008304 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8006ddc:	4b1f      	ldr	r3, [pc, #124]	; (8006e5c <vTaskSuspend+0xdc>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d005      	beq.n	8006df0 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8006de4:	f001 fa5e 	bl	80082a4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8006de8:	f000 fd1a 	bl	8007820 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8006dec:	f001 fa8a 	bl	8008304 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8006df0:	4b18      	ldr	r3, [pc, #96]	; (8006e54 <vTaskSuspend+0xd4>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	68fa      	ldr	r2, [r7, #12]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d127      	bne.n	8006e4a <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8006dfa:	4b18      	ldr	r3, [pc, #96]	; (8006e5c <vTaskSuspend+0xdc>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d017      	beq.n	8006e32 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8006e02:	4b17      	ldr	r3, [pc, #92]	; (8006e60 <vTaskSuspend+0xe0>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d00a      	beq.n	8006e20 <vTaskSuspend+0xa0>
	__asm volatile
 8006e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0e:	f383 8811 	msr	BASEPRI, r3
 8006e12:	f3bf 8f6f 	isb	sy
 8006e16:	f3bf 8f4f 	dsb	sy
 8006e1a:	60bb      	str	r3, [r7, #8]
}
 8006e1c:	bf00      	nop
 8006e1e:	e7fe      	b.n	8006e1e <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8006e20:	4b10      	ldr	r3, [pc, #64]	; (8006e64 <vTaskSuspend+0xe4>)
 8006e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e26:	601a      	str	r2, [r3, #0]
 8006e28:	f3bf 8f4f 	dsb	sy
 8006e2c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e30:	e00b      	b.n	8006e4a <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8006e32:	4b09      	ldr	r3, [pc, #36]	; (8006e58 <vTaskSuspend+0xd8>)
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	4b0c      	ldr	r3, [pc, #48]	; (8006e68 <vTaskSuspend+0xe8>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d103      	bne.n	8006e46 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8006e3e:	4b05      	ldr	r3, [pc, #20]	; (8006e54 <vTaskSuspend+0xd4>)
 8006e40:	2200      	movs	r2, #0
 8006e42:	601a      	str	r2, [r3, #0]
	}
 8006e44:	e001      	b.n	8006e4a <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8006e46:	f000 fa95 	bl	8007374 <vTaskSwitchContext>
	}
 8006e4a:	bf00      	nop
 8006e4c:	3710      	adds	r7, #16
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	20000ec8 	.word	0x20000ec8
 8006e58:	20001388 	.word	0x20001388
 8006e5c:	200013a8 	.word	0x200013a8
 8006e60:	200013c4 	.word	0x200013c4
 8006e64:	e000ed04 	.word	0xe000ed04
 8006e68:	2000139c 	.word	0x2000139c

08006e6c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b087      	sub	sp, #28
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8006e74:	2300      	movs	r3, #0
 8006e76:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d10a      	bne.n	8006e98 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8006e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e86:	f383 8811 	msr	BASEPRI, r3
 8006e8a:	f3bf 8f6f 	isb	sy
 8006e8e:	f3bf 8f4f 	dsb	sy
 8006e92:	60fb      	str	r3, [r7, #12]
}
 8006e94:	bf00      	nop
 8006e96:	e7fe      	b.n	8006e96 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	695b      	ldr	r3, [r3, #20]
 8006e9c:	4a0f      	ldr	r2, [pc, #60]	; (8006edc <prvTaskIsTaskSuspended+0x70>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d101      	bne.n	8006ea6 <prvTaskIsTaskSuspended+0x3a>
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e000      	b.n	8006ea8 <prvTaskIsTaskSuspended+0x3c>
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d00f      	beq.n	8006ecc <prvTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb0:	4a0b      	ldr	r2, [pc, #44]	; (8006ee0 <prvTaskIsTaskSuspended+0x74>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d00a      	beq.n	8006ecc <prvTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d101      	bne.n	8006ec2 <prvTaskIsTaskSuspended+0x56>
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e000      	b.n	8006ec4 <prvTaskIsTaskSuspended+0x58>
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d001      	beq.n	8006ecc <prvTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006ecc:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8006ece:	4618      	mov	r0, r3
 8006ed0:	371c      	adds	r7, #28
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr
 8006eda:	bf00      	nop
 8006edc:	20001388 	.word	0x20001388
 8006ee0:	2000135c 	.word	0x2000135c

08006ee4 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d10a      	bne.n	8006f0c <vTaskResume+0x28>
	__asm volatile
 8006ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006efa:	f383 8811 	msr	BASEPRI, r3
 8006efe:	f3bf 8f6f 	isb	sy
 8006f02:	f3bf 8f4f 	dsb	sy
 8006f06:	60bb      	str	r3, [r7, #8]
}
 8006f08:	bf00      	nop
 8006f0a:	e7fe      	b.n	8006f0a <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d03a      	beq.n	8006f88 <vTaskResume+0xa4>
 8006f12:	4b1f      	ldr	r3, [pc, #124]	; (8006f90 <vTaskResume+0xac>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68fa      	ldr	r2, [r7, #12]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d035      	beq.n	8006f88 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8006f1c:	f001 f9c2 	bl	80082a4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f7ff ffa3 	bl	8006e6c <prvTaskIsTaskSuspended>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d02b      	beq.n	8006f84 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	3304      	adds	r3, #4
 8006f30:	4618      	mov	r0, r3
 8006f32:	f7fe ffa9 	bl	8005e88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f3a:	4b16      	ldr	r3, [pc, #88]	; (8006f94 <vTaskResume+0xb0>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d903      	bls.n	8006f4a <vTaskResume+0x66>
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f46:	4a13      	ldr	r2, [pc, #76]	; (8006f94 <vTaskResume+0xb0>)
 8006f48:	6013      	str	r3, [r2, #0]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f4e:	4613      	mov	r3, r2
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	4413      	add	r3, r2
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	4a10      	ldr	r2, [pc, #64]	; (8006f98 <vTaskResume+0xb4>)
 8006f58:	441a      	add	r2, r3
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	3304      	adds	r3, #4
 8006f5e:	4619      	mov	r1, r3
 8006f60:	4610      	mov	r0, r2
 8006f62:	f7fe ff34 	bl	8005dce <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f6a:	4b09      	ldr	r3, [pc, #36]	; (8006f90 <vTaskResume+0xac>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d307      	bcc.n	8006f84 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8006f74:	4b09      	ldr	r3, [pc, #36]	; (8006f9c <vTaskResume+0xb8>)
 8006f76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f7a:	601a      	str	r2, [r3, #0]
 8006f7c:	f3bf 8f4f 	dsb	sy
 8006f80:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8006f84:	f001 f9be 	bl	8008304 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f88:	bf00      	nop
 8006f8a:	3710      	adds	r7, #16
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}
 8006f90:	20000ec8 	.word	0x20000ec8
 8006f94:	200013a4 	.word	0x200013a4
 8006f98:	20000ecc 	.word	0x20000ecc
 8006f9c:	e000ed04 	.word	0xe000ed04

08006fa0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b08a      	sub	sp, #40	; 0x28
 8006fa4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006faa:	2300      	movs	r3, #0
 8006fac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006fae:	463a      	mov	r2, r7
 8006fb0:	1d39      	adds	r1, r7, #4
 8006fb2:	f107 0308 	add.w	r3, r7, #8
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f7fe fea8 	bl	8005d0c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006fbc:	6839      	ldr	r1, [r7, #0]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	68ba      	ldr	r2, [r7, #8]
 8006fc2:	9202      	str	r2, [sp, #8]
 8006fc4:	9301      	str	r3, [sp, #4]
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	9300      	str	r3, [sp, #0]
 8006fca:	2300      	movs	r3, #0
 8006fcc:	460a      	mov	r2, r1
 8006fce:	4924      	ldr	r1, [pc, #144]	; (8007060 <vTaskStartScheduler+0xc0>)
 8006fd0:	4824      	ldr	r0, [pc, #144]	; (8007064 <vTaskStartScheduler+0xc4>)
 8006fd2:	f7ff fca7 	bl	8006924 <xTaskCreateStatic>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	4a23      	ldr	r2, [pc, #140]	; (8007068 <vTaskStartScheduler+0xc8>)
 8006fda:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006fdc:	4b22      	ldr	r3, [pc, #136]	; (8007068 <vTaskStartScheduler+0xc8>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d002      	beq.n	8006fea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	617b      	str	r3, [r7, #20]
 8006fe8:	e001      	b.n	8006fee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006fea:	2300      	movs	r3, #0
 8006fec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d102      	bne.n	8006ffa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006ff4:	f000 fd1a 	bl	8007a2c <xTimerCreateTimerTask>
 8006ff8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d11b      	bne.n	8007038 <vTaskStartScheduler+0x98>
	__asm volatile
 8007000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007004:	f383 8811 	msr	BASEPRI, r3
 8007008:	f3bf 8f6f 	isb	sy
 800700c:	f3bf 8f4f 	dsb	sy
 8007010:	613b      	str	r3, [r7, #16]
}
 8007012:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007014:	4b15      	ldr	r3, [pc, #84]	; (800706c <vTaskStartScheduler+0xcc>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	3354      	adds	r3, #84	; 0x54
 800701a:	4a15      	ldr	r2, [pc, #84]	; (8007070 <vTaskStartScheduler+0xd0>)
 800701c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800701e:	4b15      	ldr	r3, [pc, #84]	; (8007074 <vTaskStartScheduler+0xd4>)
 8007020:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007024:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007026:	4b14      	ldr	r3, [pc, #80]	; (8007078 <vTaskStartScheduler+0xd8>)
 8007028:	2201      	movs	r2, #1
 800702a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800702c:	4b13      	ldr	r3, [pc, #76]	; (800707c <vTaskStartScheduler+0xdc>)
 800702e:	2200      	movs	r2, #0
 8007030:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007032:	f001 f895 	bl	8008160 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007036:	e00e      	b.n	8007056 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800703e:	d10a      	bne.n	8007056 <vTaskStartScheduler+0xb6>
	__asm volatile
 8007040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007044:	f383 8811 	msr	BASEPRI, r3
 8007048:	f3bf 8f6f 	isb	sy
 800704c:	f3bf 8f4f 	dsb	sy
 8007050:	60fb      	str	r3, [r7, #12]
}
 8007052:	bf00      	nop
 8007054:	e7fe      	b.n	8007054 <vTaskStartScheduler+0xb4>
}
 8007056:	bf00      	nop
 8007058:	3718      	adds	r7, #24
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	0800bd7c 	.word	0x0800bd7c
 8007064:	080076ad 	.word	0x080076ad
 8007068:	200013c0 	.word	0x200013c0
 800706c:	20000ec8 	.word	0x20000ec8
 8007070:	200001ec 	.word	0x200001ec
 8007074:	200013bc 	.word	0x200013bc
 8007078:	200013a8 	.word	0x200013a8
 800707c:	200013a0 	.word	0x200013a0

08007080 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007080:	b480      	push	{r7}
 8007082:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007084:	4b04      	ldr	r3, [pc, #16]	; (8007098 <vTaskSuspendAll+0x18>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	3301      	adds	r3, #1
 800708a:	4a03      	ldr	r2, [pc, #12]	; (8007098 <vTaskSuspendAll+0x18>)
 800708c:	6013      	str	r3, [r2, #0]
}
 800708e:	bf00      	nop
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr
 8007098:	200013c4 	.word	0x200013c4

0800709c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80070a2:	2300      	movs	r3, #0
 80070a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80070a6:	2300      	movs	r3, #0
 80070a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80070aa:	4b42      	ldr	r3, [pc, #264]	; (80071b4 <xTaskResumeAll+0x118>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d10a      	bne.n	80070c8 <xTaskResumeAll+0x2c>
	__asm volatile
 80070b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b6:	f383 8811 	msr	BASEPRI, r3
 80070ba:	f3bf 8f6f 	isb	sy
 80070be:	f3bf 8f4f 	dsb	sy
 80070c2:	603b      	str	r3, [r7, #0]
}
 80070c4:	bf00      	nop
 80070c6:	e7fe      	b.n	80070c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80070c8:	f001 f8ec 	bl	80082a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80070cc:	4b39      	ldr	r3, [pc, #228]	; (80071b4 <xTaskResumeAll+0x118>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	3b01      	subs	r3, #1
 80070d2:	4a38      	ldr	r2, [pc, #224]	; (80071b4 <xTaskResumeAll+0x118>)
 80070d4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070d6:	4b37      	ldr	r3, [pc, #220]	; (80071b4 <xTaskResumeAll+0x118>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d162      	bne.n	80071a4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80070de:	4b36      	ldr	r3, [pc, #216]	; (80071b8 <xTaskResumeAll+0x11c>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d05e      	beq.n	80071a4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80070e6:	e02f      	b.n	8007148 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80070e8:	4b34      	ldr	r3, [pc, #208]	; (80071bc <xTaskResumeAll+0x120>)
 80070ea:	68db      	ldr	r3, [r3, #12]
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	3318      	adds	r3, #24
 80070f4:	4618      	mov	r0, r3
 80070f6:	f7fe fec7 	bl	8005e88 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	3304      	adds	r3, #4
 80070fe:	4618      	mov	r0, r3
 8007100:	f7fe fec2 	bl	8005e88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007108:	4b2d      	ldr	r3, [pc, #180]	; (80071c0 <xTaskResumeAll+0x124>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	429a      	cmp	r2, r3
 800710e:	d903      	bls.n	8007118 <xTaskResumeAll+0x7c>
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007114:	4a2a      	ldr	r2, [pc, #168]	; (80071c0 <xTaskResumeAll+0x124>)
 8007116:	6013      	str	r3, [r2, #0]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800711c:	4613      	mov	r3, r2
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	4413      	add	r3, r2
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	4a27      	ldr	r2, [pc, #156]	; (80071c4 <xTaskResumeAll+0x128>)
 8007126:	441a      	add	r2, r3
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	3304      	adds	r3, #4
 800712c:	4619      	mov	r1, r3
 800712e:	4610      	mov	r0, r2
 8007130:	f7fe fe4d 	bl	8005dce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007138:	4b23      	ldr	r3, [pc, #140]	; (80071c8 <xTaskResumeAll+0x12c>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800713e:	429a      	cmp	r2, r3
 8007140:	d302      	bcc.n	8007148 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007142:	4b22      	ldr	r3, [pc, #136]	; (80071cc <xTaskResumeAll+0x130>)
 8007144:	2201      	movs	r2, #1
 8007146:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007148:	4b1c      	ldr	r3, [pc, #112]	; (80071bc <xTaskResumeAll+0x120>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d1cb      	bne.n	80070e8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d001      	beq.n	800715a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007156:	f000 fb63 	bl	8007820 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800715a:	4b1d      	ldr	r3, [pc, #116]	; (80071d0 <xTaskResumeAll+0x134>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d010      	beq.n	8007188 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007166:	f000 f847 	bl	80071f8 <xTaskIncrementTick>
 800716a:	4603      	mov	r3, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d002      	beq.n	8007176 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007170:	4b16      	ldr	r3, [pc, #88]	; (80071cc <xTaskResumeAll+0x130>)
 8007172:	2201      	movs	r2, #1
 8007174:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	3b01      	subs	r3, #1
 800717a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d1f1      	bne.n	8007166 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8007182:	4b13      	ldr	r3, [pc, #76]	; (80071d0 <xTaskResumeAll+0x134>)
 8007184:	2200      	movs	r2, #0
 8007186:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007188:	4b10      	ldr	r3, [pc, #64]	; (80071cc <xTaskResumeAll+0x130>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d009      	beq.n	80071a4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007190:	2301      	movs	r3, #1
 8007192:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007194:	4b0f      	ldr	r3, [pc, #60]	; (80071d4 <xTaskResumeAll+0x138>)
 8007196:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800719a:	601a      	str	r2, [r3, #0]
 800719c:	f3bf 8f4f 	dsb	sy
 80071a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80071a4:	f001 f8ae 	bl	8008304 <vPortExitCritical>

	return xAlreadyYielded;
 80071a8:	68bb      	ldr	r3, [r7, #8]
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3710      	adds	r7, #16
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
 80071b2:	bf00      	nop
 80071b4:	200013c4 	.word	0x200013c4
 80071b8:	2000139c 	.word	0x2000139c
 80071bc:	2000135c 	.word	0x2000135c
 80071c0:	200013a4 	.word	0x200013a4
 80071c4:	20000ecc 	.word	0x20000ecc
 80071c8:	20000ec8 	.word	0x20000ec8
 80071cc:	200013b0 	.word	0x200013b0
 80071d0:	200013ac 	.word	0x200013ac
 80071d4:	e000ed04 	.word	0xe000ed04

080071d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80071de:	4b05      	ldr	r3, [pc, #20]	; (80071f4 <xTaskGetTickCount+0x1c>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80071e4:	687b      	ldr	r3, [r7, #4]
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	370c      	adds	r7, #12
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	200013a0 	.word	0x200013a0

080071f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b086      	sub	sp, #24
 80071fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80071fe:	2300      	movs	r3, #0
 8007200:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007202:	4b51      	ldr	r3, [pc, #324]	; (8007348 <xTaskIncrementTick+0x150>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	2b00      	cmp	r3, #0
 8007208:	f040 808e 	bne.w	8007328 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800720c:	4b4f      	ldr	r3, [pc, #316]	; (800734c <xTaskIncrementTick+0x154>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	3301      	adds	r3, #1
 8007212:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007214:	4a4d      	ldr	r2, [pc, #308]	; (800734c <xTaskIncrementTick+0x154>)
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d120      	bne.n	8007262 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007220:	4b4b      	ldr	r3, [pc, #300]	; (8007350 <xTaskIncrementTick+0x158>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d00a      	beq.n	8007240 <xTaskIncrementTick+0x48>
	__asm volatile
 800722a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800722e:	f383 8811 	msr	BASEPRI, r3
 8007232:	f3bf 8f6f 	isb	sy
 8007236:	f3bf 8f4f 	dsb	sy
 800723a:	603b      	str	r3, [r7, #0]
}
 800723c:	bf00      	nop
 800723e:	e7fe      	b.n	800723e <xTaskIncrementTick+0x46>
 8007240:	4b43      	ldr	r3, [pc, #268]	; (8007350 <xTaskIncrementTick+0x158>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	60fb      	str	r3, [r7, #12]
 8007246:	4b43      	ldr	r3, [pc, #268]	; (8007354 <xTaskIncrementTick+0x15c>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a41      	ldr	r2, [pc, #260]	; (8007350 <xTaskIncrementTick+0x158>)
 800724c:	6013      	str	r3, [r2, #0]
 800724e:	4a41      	ldr	r2, [pc, #260]	; (8007354 <xTaskIncrementTick+0x15c>)
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6013      	str	r3, [r2, #0]
 8007254:	4b40      	ldr	r3, [pc, #256]	; (8007358 <xTaskIncrementTick+0x160>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	3301      	adds	r3, #1
 800725a:	4a3f      	ldr	r2, [pc, #252]	; (8007358 <xTaskIncrementTick+0x160>)
 800725c:	6013      	str	r3, [r2, #0]
 800725e:	f000 fadf 	bl	8007820 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007262:	4b3e      	ldr	r3, [pc, #248]	; (800735c <xTaskIncrementTick+0x164>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	693a      	ldr	r2, [r7, #16]
 8007268:	429a      	cmp	r2, r3
 800726a:	d34e      	bcc.n	800730a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800726c:	4b38      	ldr	r3, [pc, #224]	; (8007350 <xTaskIncrementTick+0x158>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d101      	bne.n	800727a <xTaskIncrementTick+0x82>
 8007276:	2301      	movs	r3, #1
 8007278:	e000      	b.n	800727c <xTaskIncrementTick+0x84>
 800727a:	2300      	movs	r3, #0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d004      	beq.n	800728a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007280:	4b36      	ldr	r3, [pc, #216]	; (800735c <xTaskIncrementTick+0x164>)
 8007282:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007286:	601a      	str	r2, [r3, #0]
					break;
 8007288:	e03f      	b.n	800730a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800728a:	4b31      	ldr	r3, [pc, #196]	; (8007350 <xTaskIncrementTick+0x158>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	68db      	ldr	r3, [r3, #12]
 8007290:	68db      	ldr	r3, [r3, #12]
 8007292:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800729a:	693a      	ldr	r2, [r7, #16]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	429a      	cmp	r2, r3
 80072a0:	d203      	bcs.n	80072aa <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80072a2:	4a2e      	ldr	r2, [pc, #184]	; (800735c <xTaskIncrementTick+0x164>)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6013      	str	r3, [r2, #0]
						break;
 80072a8:	e02f      	b.n	800730a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	3304      	adds	r3, #4
 80072ae:	4618      	mov	r0, r3
 80072b0:	f7fe fdea 	bl	8005e88 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d004      	beq.n	80072c6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	3318      	adds	r3, #24
 80072c0:	4618      	mov	r0, r3
 80072c2:	f7fe fde1 	bl	8005e88 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ca:	4b25      	ldr	r3, [pc, #148]	; (8007360 <xTaskIncrementTick+0x168>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d903      	bls.n	80072da <xTaskIncrementTick+0xe2>
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d6:	4a22      	ldr	r2, [pc, #136]	; (8007360 <xTaskIncrementTick+0x168>)
 80072d8:	6013      	str	r3, [r2, #0]
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072de:	4613      	mov	r3, r2
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	4413      	add	r3, r2
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	4a1f      	ldr	r2, [pc, #124]	; (8007364 <xTaskIncrementTick+0x16c>)
 80072e8:	441a      	add	r2, r3
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	3304      	adds	r3, #4
 80072ee:	4619      	mov	r1, r3
 80072f0:	4610      	mov	r0, r2
 80072f2:	f7fe fd6c 	bl	8005dce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072fa:	4b1b      	ldr	r3, [pc, #108]	; (8007368 <xTaskIncrementTick+0x170>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007300:	429a      	cmp	r2, r3
 8007302:	d3b3      	bcc.n	800726c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007304:	2301      	movs	r3, #1
 8007306:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007308:	e7b0      	b.n	800726c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800730a:	4b17      	ldr	r3, [pc, #92]	; (8007368 <xTaskIncrementTick+0x170>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007310:	4914      	ldr	r1, [pc, #80]	; (8007364 <xTaskIncrementTick+0x16c>)
 8007312:	4613      	mov	r3, r2
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	4413      	add	r3, r2
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	440b      	add	r3, r1
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2b01      	cmp	r3, #1
 8007320:	d907      	bls.n	8007332 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007322:	2301      	movs	r3, #1
 8007324:	617b      	str	r3, [r7, #20]
 8007326:	e004      	b.n	8007332 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007328:	4b10      	ldr	r3, [pc, #64]	; (800736c <xTaskIncrementTick+0x174>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	3301      	adds	r3, #1
 800732e:	4a0f      	ldr	r2, [pc, #60]	; (800736c <xTaskIncrementTick+0x174>)
 8007330:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007332:	4b0f      	ldr	r3, [pc, #60]	; (8007370 <xTaskIncrementTick+0x178>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d001      	beq.n	800733e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800733a:	2301      	movs	r3, #1
 800733c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800733e:	697b      	ldr	r3, [r7, #20]
}
 8007340:	4618      	mov	r0, r3
 8007342:	3718      	adds	r7, #24
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}
 8007348:	200013c4 	.word	0x200013c4
 800734c:	200013a0 	.word	0x200013a0
 8007350:	20001354 	.word	0x20001354
 8007354:	20001358 	.word	0x20001358
 8007358:	200013b4 	.word	0x200013b4
 800735c:	200013bc 	.word	0x200013bc
 8007360:	200013a4 	.word	0x200013a4
 8007364:	20000ecc 	.word	0x20000ecc
 8007368:	20000ec8 	.word	0x20000ec8
 800736c:	200013ac 	.word	0x200013ac
 8007370:	200013b0 	.word	0x200013b0

08007374 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007374:	b480      	push	{r7}
 8007376:	b085      	sub	sp, #20
 8007378:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800737a:	4b2a      	ldr	r3, [pc, #168]	; (8007424 <vTaskSwitchContext+0xb0>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d003      	beq.n	800738a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007382:	4b29      	ldr	r3, [pc, #164]	; (8007428 <vTaskSwitchContext+0xb4>)
 8007384:	2201      	movs	r2, #1
 8007386:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007388:	e046      	b.n	8007418 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800738a:	4b27      	ldr	r3, [pc, #156]	; (8007428 <vTaskSwitchContext+0xb4>)
 800738c:	2200      	movs	r2, #0
 800738e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007390:	4b26      	ldr	r3, [pc, #152]	; (800742c <vTaskSwitchContext+0xb8>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	60fb      	str	r3, [r7, #12]
 8007396:	e010      	b.n	80073ba <vTaskSwitchContext+0x46>
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d10a      	bne.n	80073b4 <vTaskSwitchContext+0x40>
	__asm volatile
 800739e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a2:	f383 8811 	msr	BASEPRI, r3
 80073a6:	f3bf 8f6f 	isb	sy
 80073aa:	f3bf 8f4f 	dsb	sy
 80073ae:	607b      	str	r3, [r7, #4]
}
 80073b0:	bf00      	nop
 80073b2:	e7fe      	b.n	80073b2 <vTaskSwitchContext+0x3e>
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	3b01      	subs	r3, #1
 80073b8:	60fb      	str	r3, [r7, #12]
 80073ba:	491d      	ldr	r1, [pc, #116]	; (8007430 <vTaskSwitchContext+0xbc>)
 80073bc:	68fa      	ldr	r2, [r7, #12]
 80073be:	4613      	mov	r3, r2
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	4413      	add	r3, r2
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	440b      	add	r3, r1
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d0e4      	beq.n	8007398 <vTaskSwitchContext+0x24>
 80073ce:	68fa      	ldr	r2, [r7, #12]
 80073d0:	4613      	mov	r3, r2
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	4413      	add	r3, r2
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	4a15      	ldr	r2, [pc, #84]	; (8007430 <vTaskSwitchContext+0xbc>)
 80073da:	4413      	add	r3, r2
 80073dc:	60bb      	str	r3, [r7, #8]
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	685a      	ldr	r2, [r3, #4]
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	605a      	str	r2, [r3, #4]
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	685a      	ldr	r2, [r3, #4]
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	3308      	adds	r3, #8
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d104      	bne.n	80073fe <vTaskSwitchContext+0x8a>
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	685a      	ldr	r2, [r3, #4]
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	605a      	str	r2, [r3, #4]
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	4a0b      	ldr	r2, [pc, #44]	; (8007434 <vTaskSwitchContext+0xc0>)
 8007406:	6013      	str	r3, [r2, #0]
 8007408:	4a08      	ldr	r2, [pc, #32]	; (800742c <vTaskSwitchContext+0xb8>)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800740e:	4b09      	ldr	r3, [pc, #36]	; (8007434 <vTaskSwitchContext+0xc0>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	3354      	adds	r3, #84	; 0x54
 8007414:	4a08      	ldr	r2, [pc, #32]	; (8007438 <vTaskSwitchContext+0xc4>)
 8007416:	6013      	str	r3, [r2, #0]
}
 8007418:	bf00      	nop
 800741a:	3714      	adds	r7, #20
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr
 8007424:	200013c4 	.word	0x200013c4
 8007428:	200013b0 	.word	0x200013b0
 800742c:	200013a4 	.word	0x200013a4
 8007430:	20000ecc 	.word	0x20000ecc
 8007434:	20000ec8 	.word	0x20000ec8
 8007438:	200001ec 	.word	0x200001ec

0800743c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d10a      	bne.n	8007462 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800744c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007450:	f383 8811 	msr	BASEPRI, r3
 8007454:	f3bf 8f6f 	isb	sy
 8007458:	f3bf 8f4f 	dsb	sy
 800745c:	60fb      	str	r3, [r7, #12]
}
 800745e:	bf00      	nop
 8007460:	e7fe      	b.n	8007460 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007462:	4b07      	ldr	r3, [pc, #28]	; (8007480 <vTaskPlaceOnEventList+0x44>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	3318      	adds	r3, #24
 8007468:	4619      	mov	r1, r3
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f7fe fcd3 	bl	8005e16 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007470:	2101      	movs	r1, #1
 8007472:	6838      	ldr	r0, [r7, #0]
 8007474:	f000 fa86 	bl	8007984 <prvAddCurrentTaskToDelayedList>
}
 8007478:	bf00      	nop
 800747a:	3710      	adds	r7, #16
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}
 8007480:	20000ec8 	.word	0x20000ec8

08007484 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007484:	b580      	push	{r7, lr}
 8007486:	b086      	sub	sp, #24
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d10a      	bne.n	80074ac <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800749a:	f383 8811 	msr	BASEPRI, r3
 800749e:	f3bf 8f6f 	isb	sy
 80074a2:	f3bf 8f4f 	dsb	sy
 80074a6:	617b      	str	r3, [r7, #20]
}
 80074a8:	bf00      	nop
 80074aa:	e7fe      	b.n	80074aa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80074ac:	4b0a      	ldr	r3, [pc, #40]	; (80074d8 <vTaskPlaceOnEventListRestricted+0x54>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	3318      	adds	r3, #24
 80074b2:	4619      	mov	r1, r3
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	f7fe fc8a 	bl	8005dce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d002      	beq.n	80074c6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80074c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80074c4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80074c6:	6879      	ldr	r1, [r7, #4]
 80074c8:	68b8      	ldr	r0, [r7, #8]
 80074ca:	f000 fa5b 	bl	8007984 <prvAddCurrentTaskToDelayedList>
	}
 80074ce:	bf00      	nop
 80074d0:	3718      	adds	r7, #24
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	20000ec8 	.word	0x20000ec8

080074dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b086      	sub	sp, #24
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d10a      	bne.n	8007508 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80074f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f6:	f383 8811 	msr	BASEPRI, r3
 80074fa:	f3bf 8f6f 	isb	sy
 80074fe:	f3bf 8f4f 	dsb	sy
 8007502:	60fb      	str	r3, [r7, #12]
}
 8007504:	bf00      	nop
 8007506:	e7fe      	b.n	8007506 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	3318      	adds	r3, #24
 800750c:	4618      	mov	r0, r3
 800750e:	f7fe fcbb 	bl	8005e88 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007512:	4b1e      	ldr	r3, [pc, #120]	; (800758c <xTaskRemoveFromEventList+0xb0>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d11d      	bne.n	8007556 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	3304      	adds	r3, #4
 800751e:	4618      	mov	r0, r3
 8007520:	f7fe fcb2 	bl	8005e88 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007528:	4b19      	ldr	r3, [pc, #100]	; (8007590 <xTaskRemoveFromEventList+0xb4>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	429a      	cmp	r2, r3
 800752e:	d903      	bls.n	8007538 <xTaskRemoveFromEventList+0x5c>
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007534:	4a16      	ldr	r2, [pc, #88]	; (8007590 <xTaskRemoveFromEventList+0xb4>)
 8007536:	6013      	str	r3, [r2, #0]
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800753c:	4613      	mov	r3, r2
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	4413      	add	r3, r2
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	4a13      	ldr	r2, [pc, #76]	; (8007594 <xTaskRemoveFromEventList+0xb8>)
 8007546:	441a      	add	r2, r3
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	3304      	adds	r3, #4
 800754c:	4619      	mov	r1, r3
 800754e:	4610      	mov	r0, r2
 8007550:	f7fe fc3d 	bl	8005dce <vListInsertEnd>
 8007554:	e005      	b.n	8007562 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	3318      	adds	r3, #24
 800755a:	4619      	mov	r1, r3
 800755c:	480e      	ldr	r0, [pc, #56]	; (8007598 <xTaskRemoveFromEventList+0xbc>)
 800755e:	f7fe fc36 	bl	8005dce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007566:	4b0d      	ldr	r3, [pc, #52]	; (800759c <xTaskRemoveFromEventList+0xc0>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800756c:	429a      	cmp	r2, r3
 800756e:	d905      	bls.n	800757c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007570:	2301      	movs	r3, #1
 8007572:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007574:	4b0a      	ldr	r3, [pc, #40]	; (80075a0 <xTaskRemoveFromEventList+0xc4>)
 8007576:	2201      	movs	r2, #1
 8007578:	601a      	str	r2, [r3, #0]
 800757a:	e001      	b.n	8007580 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800757c:	2300      	movs	r3, #0
 800757e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007580:	697b      	ldr	r3, [r7, #20]
}
 8007582:	4618      	mov	r0, r3
 8007584:	3718      	adds	r7, #24
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	200013c4 	.word	0x200013c4
 8007590:	200013a4 	.word	0x200013a4
 8007594:	20000ecc 	.word	0x20000ecc
 8007598:	2000135c 	.word	0x2000135c
 800759c:	20000ec8 	.word	0x20000ec8
 80075a0:	200013b0 	.word	0x200013b0

080075a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80075ac:	4b06      	ldr	r3, [pc, #24]	; (80075c8 <vTaskInternalSetTimeOutState+0x24>)
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80075b4:	4b05      	ldr	r3, [pc, #20]	; (80075cc <vTaskInternalSetTimeOutState+0x28>)
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	605a      	str	r2, [r3, #4]
}
 80075bc:	bf00      	nop
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr
 80075c8:	200013b4 	.word	0x200013b4
 80075cc:	200013a0 	.word	0x200013a0

080075d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b088      	sub	sp, #32
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d10a      	bne.n	80075f6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80075e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e4:	f383 8811 	msr	BASEPRI, r3
 80075e8:	f3bf 8f6f 	isb	sy
 80075ec:	f3bf 8f4f 	dsb	sy
 80075f0:	613b      	str	r3, [r7, #16]
}
 80075f2:	bf00      	nop
 80075f4:	e7fe      	b.n	80075f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d10a      	bne.n	8007612 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80075fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007600:	f383 8811 	msr	BASEPRI, r3
 8007604:	f3bf 8f6f 	isb	sy
 8007608:	f3bf 8f4f 	dsb	sy
 800760c:	60fb      	str	r3, [r7, #12]
}
 800760e:	bf00      	nop
 8007610:	e7fe      	b.n	8007610 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007612:	f000 fe47 	bl	80082a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007616:	4b1d      	ldr	r3, [pc, #116]	; (800768c <xTaskCheckForTimeOut+0xbc>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	69ba      	ldr	r2, [r7, #24]
 8007622:	1ad3      	subs	r3, r2, r3
 8007624:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800762e:	d102      	bne.n	8007636 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007630:	2300      	movs	r3, #0
 8007632:	61fb      	str	r3, [r7, #28]
 8007634:	e023      	b.n	800767e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	4b15      	ldr	r3, [pc, #84]	; (8007690 <xTaskCheckForTimeOut+0xc0>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	429a      	cmp	r2, r3
 8007640:	d007      	beq.n	8007652 <xTaskCheckForTimeOut+0x82>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	69ba      	ldr	r2, [r7, #24]
 8007648:	429a      	cmp	r2, r3
 800764a:	d302      	bcc.n	8007652 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800764c:	2301      	movs	r3, #1
 800764e:	61fb      	str	r3, [r7, #28]
 8007650:	e015      	b.n	800767e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	697a      	ldr	r2, [r7, #20]
 8007658:	429a      	cmp	r2, r3
 800765a:	d20b      	bcs.n	8007674 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	1ad2      	subs	r2, r2, r3
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f7ff ff9b 	bl	80075a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800766e:	2300      	movs	r3, #0
 8007670:	61fb      	str	r3, [r7, #28]
 8007672:	e004      	b.n	800767e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	2200      	movs	r2, #0
 8007678:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800767a:	2301      	movs	r3, #1
 800767c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800767e:	f000 fe41 	bl	8008304 <vPortExitCritical>

	return xReturn;
 8007682:	69fb      	ldr	r3, [r7, #28]
}
 8007684:	4618      	mov	r0, r3
 8007686:	3720      	adds	r7, #32
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}
 800768c:	200013a0 	.word	0x200013a0
 8007690:	200013b4 	.word	0x200013b4

08007694 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007694:	b480      	push	{r7}
 8007696:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007698:	4b03      	ldr	r3, [pc, #12]	; (80076a8 <vTaskMissedYield+0x14>)
 800769a:	2201      	movs	r2, #1
 800769c:	601a      	str	r2, [r3, #0]
}
 800769e:	bf00      	nop
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr
 80076a8:	200013b0 	.word	0x200013b0

080076ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80076b4:	f000 f852 	bl	800775c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80076b8:	4b06      	ldr	r3, [pc, #24]	; (80076d4 <prvIdleTask+0x28>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d9f9      	bls.n	80076b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80076c0:	4b05      	ldr	r3, [pc, #20]	; (80076d8 <prvIdleTask+0x2c>)
 80076c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076c6:	601a      	str	r2, [r3, #0]
 80076c8:	f3bf 8f4f 	dsb	sy
 80076cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80076d0:	e7f0      	b.n	80076b4 <prvIdleTask+0x8>
 80076d2:	bf00      	nop
 80076d4:	20000ecc 	.word	0x20000ecc
 80076d8:	e000ed04 	.word	0xe000ed04

080076dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80076e2:	2300      	movs	r3, #0
 80076e4:	607b      	str	r3, [r7, #4]
 80076e6:	e00c      	b.n	8007702 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	4613      	mov	r3, r2
 80076ec:	009b      	lsls	r3, r3, #2
 80076ee:	4413      	add	r3, r2
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	4a12      	ldr	r2, [pc, #72]	; (800773c <prvInitialiseTaskLists+0x60>)
 80076f4:	4413      	add	r3, r2
 80076f6:	4618      	mov	r0, r3
 80076f8:	f7fe fb3c 	bl	8005d74 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	3301      	adds	r3, #1
 8007700:	607b      	str	r3, [r7, #4]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2b37      	cmp	r3, #55	; 0x37
 8007706:	d9ef      	bls.n	80076e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007708:	480d      	ldr	r0, [pc, #52]	; (8007740 <prvInitialiseTaskLists+0x64>)
 800770a:	f7fe fb33 	bl	8005d74 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800770e:	480d      	ldr	r0, [pc, #52]	; (8007744 <prvInitialiseTaskLists+0x68>)
 8007710:	f7fe fb30 	bl	8005d74 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007714:	480c      	ldr	r0, [pc, #48]	; (8007748 <prvInitialiseTaskLists+0x6c>)
 8007716:	f7fe fb2d 	bl	8005d74 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800771a:	480c      	ldr	r0, [pc, #48]	; (800774c <prvInitialiseTaskLists+0x70>)
 800771c:	f7fe fb2a 	bl	8005d74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007720:	480b      	ldr	r0, [pc, #44]	; (8007750 <prvInitialiseTaskLists+0x74>)
 8007722:	f7fe fb27 	bl	8005d74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007726:	4b0b      	ldr	r3, [pc, #44]	; (8007754 <prvInitialiseTaskLists+0x78>)
 8007728:	4a05      	ldr	r2, [pc, #20]	; (8007740 <prvInitialiseTaskLists+0x64>)
 800772a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800772c:	4b0a      	ldr	r3, [pc, #40]	; (8007758 <prvInitialiseTaskLists+0x7c>)
 800772e:	4a05      	ldr	r2, [pc, #20]	; (8007744 <prvInitialiseTaskLists+0x68>)
 8007730:	601a      	str	r2, [r3, #0]
}
 8007732:	bf00      	nop
 8007734:	3708      	adds	r7, #8
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	20000ecc 	.word	0x20000ecc
 8007740:	2000132c 	.word	0x2000132c
 8007744:	20001340 	.word	0x20001340
 8007748:	2000135c 	.word	0x2000135c
 800774c:	20001370 	.word	0x20001370
 8007750:	20001388 	.word	0x20001388
 8007754:	20001354 	.word	0x20001354
 8007758:	20001358 	.word	0x20001358

0800775c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b082      	sub	sp, #8
 8007760:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007762:	e019      	b.n	8007798 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007764:	f000 fd9e 	bl	80082a4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007768:	4b10      	ldr	r3, [pc, #64]	; (80077ac <prvCheckTasksWaitingTermination+0x50>)
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	68db      	ldr	r3, [r3, #12]
 800776e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	3304      	adds	r3, #4
 8007774:	4618      	mov	r0, r3
 8007776:	f7fe fb87 	bl	8005e88 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800777a:	4b0d      	ldr	r3, [pc, #52]	; (80077b0 <prvCheckTasksWaitingTermination+0x54>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	3b01      	subs	r3, #1
 8007780:	4a0b      	ldr	r2, [pc, #44]	; (80077b0 <prvCheckTasksWaitingTermination+0x54>)
 8007782:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007784:	4b0b      	ldr	r3, [pc, #44]	; (80077b4 <prvCheckTasksWaitingTermination+0x58>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	3b01      	subs	r3, #1
 800778a:	4a0a      	ldr	r2, [pc, #40]	; (80077b4 <prvCheckTasksWaitingTermination+0x58>)
 800778c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800778e:	f000 fdb9 	bl	8008304 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 f810 	bl	80077b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007798:	4b06      	ldr	r3, [pc, #24]	; (80077b4 <prvCheckTasksWaitingTermination+0x58>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d1e1      	bne.n	8007764 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80077a0:	bf00      	nop
 80077a2:	bf00      	nop
 80077a4:	3708      	adds	r7, #8
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop
 80077ac:	20001370 	.word	0x20001370
 80077b0:	2000139c 	.word	0x2000139c
 80077b4:	20001384 	.word	0x20001384

080077b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	3354      	adds	r3, #84	; 0x54
 80077c4:	4618      	mov	r0, r3
 80077c6:	f001 fdd9 	bl	800937c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d108      	bne.n	80077e6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d8:	4618      	mov	r0, r3
 80077da:	f000 ff22 	bl	8008622 <vPortFree>
				vPortFree( pxTCB );
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 ff1f 	bl	8008622 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80077e4:	e018      	b.n	8007818 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d103      	bne.n	80077f8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 ff16 	bl	8008622 <vPortFree>
	}
 80077f6:	e00f      	b.n	8007818 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80077fe:	2b02      	cmp	r3, #2
 8007800:	d00a      	beq.n	8007818 <prvDeleteTCB+0x60>
	__asm volatile
 8007802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007806:	f383 8811 	msr	BASEPRI, r3
 800780a:	f3bf 8f6f 	isb	sy
 800780e:	f3bf 8f4f 	dsb	sy
 8007812:	60fb      	str	r3, [r7, #12]
}
 8007814:	bf00      	nop
 8007816:	e7fe      	b.n	8007816 <prvDeleteTCB+0x5e>
	}
 8007818:	bf00      	nop
 800781a:	3710      	adds	r7, #16
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007826:	4b0f      	ldr	r3, [pc, #60]	; (8007864 <prvResetNextTaskUnblockTime+0x44>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d101      	bne.n	8007834 <prvResetNextTaskUnblockTime+0x14>
 8007830:	2301      	movs	r3, #1
 8007832:	e000      	b.n	8007836 <prvResetNextTaskUnblockTime+0x16>
 8007834:	2300      	movs	r3, #0
 8007836:	2b00      	cmp	r3, #0
 8007838:	d004      	beq.n	8007844 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800783a:	4b0b      	ldr	r3, [pc, #44]	; (8007868 <prvResetNextTaskUnblockTime+0x48>)
 800783c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007840:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007842:	e008      	b.n	8007856 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007844:	4b07      	ldr	r3, [pc, #28]	; (8007864 <prvResetNextTaskUnblockTime+0x44>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	4a05      	ldr	r2, [pc, #20]	; (8007868 <prvResetNextTaskUnblockTime+0x48>)
 8007854:	6013      	str	r3, [r2, #0]
}
 8007856:	bf00      	nop
 8007858:	370c      	adds	r7, #12
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr
 8007862:	bf00      	nop
 8007864:	20001354 	.word	0x20001354
 8007868:	200013bc 	.word	0x200013bc

0800786c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800786c:	b480      	push	{r7}
 800786e:	b083      	sub	sp, #12
 8007870:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007872:	4b0b      	ldr	r3, [pc, #44]	; (80078a0 <xTaskGetSchedulerState+0x34>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d102      	bne.n	8007880 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800787a:	2301      	movs	r3, #1
 800787c:	607b      	str	r3, [r7, #4]
 800787e:	e008      	b.n	8007892 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007880:	4b08      	ldr	r3, [pc, #32]	; (80078a4 <xTaskGetSchedulerState+0x38>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d102      	bne.n	800788e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007888:	2302      	movs	r3, #2
 800788a:	607b      	str	r3, [r7, #4]
 800788c:	e001      	b.n	8007892 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800788e:	2300      	movs	r3, #0
 8007890:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007892:	687b      	ldr	r3, [r7, #4]
	}
 8007894:	4618      	mov	r0, r3
 8007896:	370c      	adds	r7, #12
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr
 80078a0:	200013a8 	.word	0x200013a8
 80078a4:	200013c4 	.word	0x200013c4

080078a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b086      	sub	sp, #24
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80078b4:	2300      	movs	r3, #0
 80078b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d056      	beq.n	800796c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80078be:	4b2e      	ldr	r3, [pc, #184]	; (8007978 <xTaskPriorityDisinherit+0xd0>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	693a      	ldr	r2, [r7, #16]
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d00a      	beq.n	80078de <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80078c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078cc:	f383 8811 	msr	BASEPRI, r3
 80078d0:	f3bf 8f6f 	isb	sy
 80078d4:	f3bf 8f4f 	dsb	sy
 80078d8:	60fb      	str	r3, [r7, #12]
}
 80078da:	bf00      	nop
 80078dc:	e7fe      	b.n	80078dc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d10a      	bne.n	80078fc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80078e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ea:	f383 8811 	msr	BASEPRI, r3
 80078ee:	f3bf 8f6f 	isb	sy
 80078f2:	f3bf 8f4f 	dsb	sy
 80078f6:	60bb      	str	r3, [r7, #8]
}
 80078f8:	bf00      	nop
 80078fa:	e7fe      	b.n	80078fa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007900:	1e5a      	subs	r2, r3, #1
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800790e:	429a      	cmp	r2, r3
 8007910:	d02c      	beq.n	800796c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007916:	2b00      	cmp	r3, #0
 8007918:	d128      	bne.n	800796c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	3304      	adds	r3, #4
 800791e:	4618      	mov	r0, r3
 8007920:	f7fe fab2 	bl	8005e88 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007930:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800793c:	4b0f      	ldr	r3, [pc, #60]	; (800797c <xTaskPriorityDisinherit+0xd4>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	429a      	cmp	r2, r3
 8007942:	d903      	bls.n	800794c <xTaskPriorityDisinherit+0xa4>
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007948:	4a0c      	ldr	r2, [pc, #48]	; (800797c <xTaskPriorityDisinherit+0xd4>)
 800794a:	6013      	str	r3, [r2, #0]
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007950:	4613      	mov	r3, r2
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	4413      	add	r3, r2
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	4a09      	ldr	r2, [pc, #36]	; (8007980 <xTaskPriorityDisinherit+0xd8>)
 800795a:	441a      	add	r2, r3
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	3304      	adds	r3, #4
 8007960:	4619      	mov	r1, r3
 8007962:	4610      	mov	r0, r2
 8007964:	f7fe fa33 	bl	8005dce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007968:	2301      	movs	r3, #1
 800796a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800796c:	697b      	ldr	r3, [r7, #20]
	}
 800796e:	4618      	mov	r0, r3
 8007970:	3718      	adds	r7, #24
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
 8007976:	bf00      	nop
 8007978:	20000ec8 	.word	0x20000ec8
 800797c:	200013a4 	.word	0x200013a4
 8007980:	20000ecc 	.word	0x20000ecc

08007984 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800798e:	4b21      	ldr	r3, [pc, #132]	; (8007a14 <prvAddCurrentTaskToDelayedList+0x90>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007994:	4b20      	ldr	r3, [pc, #128]	; (8007a18 <prvAddCurrentTaskToDelayedList+0x94>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	3304      	adds	r3, #4
 800799a:	4618      	mov	r0, r3
 800799c:	f7fe fa74 	bl	8005e88 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079a6:	d10a      	bne.n	80079be <prvAddCurrentTaskToDelayedList+0x3a>
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d007      	beq.n	80079be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079ae:	4b1a      	ldr	r3, [pc, #104]	; (8007a18 <prvAddCurrentTaskToDelayedList+0x94>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	3304      	adds	r3, #4
 80079b4:	4619      	mov	r1, r3
 80079b6:	4819      	ldr	r0, [pc, #100]	; (8007a1c <prvAddCurrentTaskToDelayedList+0x98>)
 80079b8:	f7fe fa09 	bl	8005dce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80079bc:	e026      	b.n	8007a0c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	4413      	add	r3, r2
 80079c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80079c6:	4b14      	ldr	r3, [pc, #80]	; (8007a18 <prvAddCurrentTaskToDelayedList+0x94>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	68ba      	ldr	r2, [r7, #8]
 80079cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80079ce:	68ba      	ldr	r2, [r7, #8]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d209      	bcs.n	80079ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079d6:	4b12      	ldr	r3, [pc, #72]	; (8007a20 <prvAddCurrentTaskToDelayedList+0x9c>)
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	4b0f      	ldr	r3, [pc, #60]	; (8007a18 <prvAddCurrentTaskToDelayedList+0x94>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	3304      	adds	r3, #4
 80079e0:	4619      	mov	r1, r3
 80079e2:	4610      	mov	r0, r2
 80079e4:	f7fe fa17 	bl	8005e16 <vListInsert>
}
 80079e8:	e010      	b.n	8007a0c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079ea:	4b0e      	ldr	r3, [pc, #56]	; (8007a24 <prvAddCurrentTaskToDelayedList+0xa0>)
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	4b0a      	ldr	r3, [pc, #40]	; (8007a18 <prvAddCurrentTaskToDelayedList+0x94>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	3304      	adds	r3, #4
 80079f4:	4619      	mov	r1, r3
 80079f6:	4610      	mov	r0, r2
 80079f8:	f7fe fa0d 	bl	8005e16 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80079fc:	4b0a      	ldr	r3, [pc, #40]	; (8007a28 <prvAddCurrentTaskToDelayedList+0xa4>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	68ba      	ldr	r2, [r7, #8]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d202      	bcs.n	8007a0c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007a06:	4a08      	ldr	r2, [pc, #32]	; (8007a28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	6013      	str	r3, [r2, #0]
}
 8007a0c:	bf00      	nop
 8007a0e:	3710      	adds	r7, #16
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	200013a0 	.word	0x200013a0
 8007a18:	20000ec8 	.word	0x20000ec8
 8007a1c:	20001388 	.word	0x20001388
 8007a20:	20001358 	.word	0x20001358
 8007a24:	20001354 	.word	0x20001354
 8007a28:	200013bc 	.word	0x200013bc

08007a2c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b08a      	sub	sp, #40	; 0x28
 8007a30:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007a32:	2300      	movs	r3, #0
 8007a34:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007a36:	f000 facb 	bl	8007fd0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007a3a:	4b1c      	ldr	r3, [pc, #112]	; (8007aac <xTimerCreateTimerTask+0x80>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d021      	beq.n	8007a86 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007a42:	2300      	movs	r3, #0
 8007a44:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007a46:	2300      	movs	r3, #0
 8007a48:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007a4a:	1d3a      	adds	r2, r7, #4
 8007a4c:	f107 0108 	add.w	r1, r7, #8
 8007a50:	f107 030c 	add.w	r3, r7, #12
 8007a54:	4618      	mov	r0, r3
 8007a56:	f7fe f973 	bl	8005d40 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007a5a:	6879      	ldr	r1, [r7, #4]
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	68fa      	ldr	r2, [r7, #12]
 8007a60:	9202      	str	r2, [sp, #8]
 8007a62:	9301      	str	r3, [sp, #4]
 8007a64:	2302      	movs	r3, #2
 8007a66:	9300      	str	r3, [sp, #0]
 8007a68:	2300      	movs	r3, #0
 8007a6a:	460a      	mov	r2, r1
 8007a6c:	4910      	ldr	r1, [pc, #64]	; (8007ab0 <xTimerCreateTimerTask+0x84>)
 8007a6e:	4811      	ldr	r0, [pc, #68]	; (8007ab4 <xTimerCreateTimerTask+0x88>)
 8007a70:	f7fe ff58 	bl	8006924 <xTaskCreateStatic>
 8007a74:	4603      	mov	r3, r0
 8007a76:	4a10      	ldr	r2, [pc, #64]	; (8007ab8 <xTimerCreateTimerTask+0x8c>)
 8007a78:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007a7a:	4b0f      	ldr	r3, [pc, #60]	; (8007ab8 <xTimerCreateTimerTask+0x8c>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d001      	beq.n	8007a86 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007a82:	2301      	movs	r3, #1
 8007a84:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d10a      	bne.n	8007aa2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a90:	f383 8811 	msr	BASEPRI, r3
 8007a94:	f3bf 8f6f 	isb	sy
 8007a98:	f3bf 8f4f 	dsb	sy
 8007a9c:	613b      	str	r3, [r7, #16]
}
 8007a9e:	bf00      	nop
 8007aa0:	e7fe      	b.n	8007aa0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007aa2:	697b      	ldr	r3, [r7, #20]
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3718      	adds	r7, #24
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	200013f8 	.word	0x200013f8
 8007ab0:	0800bd84 	.word	0x0800bd84
 8007ab4:	08007bd9 	.word	0x08007bd9
 8007ab8:	200013fc 	.word	0x200013fc

08007abc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b08a      	sub	sp, #40	; 0x28
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	607a      	str	r2, [r7, #4]
 8007ac8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007aca:	2300      	movs	r3, #0
 8007acc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d10a      	bne.n	8007aea <xTimerGenericCommand+0x2e>
	__asm volatile
 8007ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad8:	f383 8811 	msr	BASEPRI, r3
 8007adc:	f3bf 8f6f 	isb	sy
 8007ae0:	f3bf 8f4f 	dsb	sy
 8007ae4:	623b      	str	r3, [r7, #32]
}
 8007ae6:	bf00      	nop
 8007ae8:	e7fe      	b.n	8007ae8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007aea:	4b1a      	ldr	r3, [pc, #104]	; (8007b54 <xTimerGenericCommand+0x98>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d02a      	beq.n	8007b48 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	2b05      	cmp	r3, #5
 8007b02:	dc18      	bgt.n	8007b36 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007b04:	f7ff feb2 	bl	800786c <xTaskGetSchedulerState>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b02      	cmp	r3, #2
 8007b0c:	d109      	bne.n	8007b22 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007b0e:	4b11      	ldr	r3, [pc, #68]	; (8007b54 <xTimerGenericCommand+0x98>)
 8007b10:	6818      	ldr	r0, [r3, #0]
 8007b12:	f107 0110 	add.w	r1, r7, #16
 8007b16:	2300      	movs	r3, #0
 8007b18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b1a:	f7fe fb1f 	bl	800615c <xQueueGenericSend>
 8007b1e:	6278      	str	r0, [r7, #36]	; 0x24
 8007b20:	e012      	b.n	8007b48 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007b22:	4b0c      	ldr	r3, [pc, #48]	; (8007b54 <xTimerGenericCommand+0x98>)
 8007b24:	6818      	ldr	r0, [r3, #0]
 8007b26:	f107 0110 	add.w	r1, r7, #16
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f7fe fb15 	bl	800615c <xQueueGenericSend>
 8007b32:	6278      	str	r0, [r7, #36]	; 0x24
 8007b34:	e008      	b.n	8007b48 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007b36:	4b07      	ldr	r3, [pc, #28]	; (8007b54 <xTimerGenericCommand+0x98>)
 8007b38:	6818      	ldr	r0, [r3, #0]
 8007b3a:	f107 0110 	add.w	r1, r7, #16
 8007b3e:	2300      	movs	r3, #0
 8007b40:	683a      	ldr	r2, [r7, #0]
 8007b42:	f7fe fc09 	bl	8006358 <xQueueGenericSendFromISR>
 8007b46:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3728      	adds	r7, #40	; 0x28
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	bf00      	nop
 8007b54:	200013f8 	.word	0x200013f8

08007b58 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b088      	sub	sp, #32
 8007b5c:	af02      	add	r7, sp, #8
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b62:	4b1c      	ldr	r3, [pc, #112]	; (8007bd4 <prvProcessExpiredTimer+0x7c>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68db      	ldr	r3, [r3, #12]
 8007b68:	68db      	ldr	r3, [r3, #12]
 8007b6a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	3304      	adds	r3, #4
 8007b70:	4618      	mov	r0, r3
 8007b72:	f7fe f989 	bl	8005e88 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	69db      	ldr	r3, [r3, #28]
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d122      	bne.n	8007bc4 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	699a      	ldr	r2, [r3, #24]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	18d1      	adds	r1, r2, r3
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	683a      	ldr	r2, [r7, #0]
 8007b8a:	6978      	ldr	r0, [r7, #20]
 8007b8c:	f000 f8c8 	bl	8007d20 <prvInsertTimerInActiveList>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d016      	beq.n	8007bc4 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007b96:	2300      	movs	r3, #0
 8007b98:	9300      	str	r3, [sp, #0]
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	2100      	movs	r1, #0
 8007ba0:	6978      	ldr	r0, [r7, #20]
 8007ba2:	f7ff ff8b 	bl	8007abc <xTimerGenericCommand>
 8007ba6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d10a      	bne.n	8007bc4 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8007bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb2:	f383 8811 	msr	BASEPRI, r3
 8007bb6:	f3bf 8f6f 	isb	sy
 8007bba:	f3bf 8f4f 	dsb	sy
 8007bbe:	60fb      	str	r3, [r7, #12]
}
 8007bc0:	bf00      	nop
 8007bc2:	e7fe      	b.n	8007bc2 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc8:	6978      	ldr	r0, [r7, #20]
 8007bca:	4798      	blx	r3
}
 8007bcc:	bf00      	nop
 8007bce:	3718      	adds	r7, #24
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	200013f0 	.word	0x200013f0

08007bd8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b084      	sub	sp, #16
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007be0:	f107 0308 	add.w	r3, r7, #8
 8007be4:	4618      	mov	r0, r3
 8007be6:	f000 f857 	bl	8007c98 <prvGetNextExpireTime>
 8007bea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	4619      	mov	r1, r3
 8007bf0:	68f8      	ldr	r0, [r7, #12]
 8007bf2:	f000 f803 	bl	8007bfc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007bf6:	f000 f8d5 	bl	8007da4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007bfa:	e7f1      	b.n	8007be0 <prvTimerTask+0x8>

08007bfc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007c06:	f7ff fa3b 	bl	8007080 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007c0a:	f107 0308 	add.w	r3, r7, #8
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f000 f866 	bl	8007ce0 <prvSampleTimeNow>
 8007c14:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d130      	bne.n	8007c7e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d10a      	bne.n	8007c38 <prvProcessTimerOrBlockTask+0x3c>
 8007c22:	687a      	ldr	r2, [r7, #4]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d806      	bhi.n	8007c38 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007c2a:	f7ff fa37 	bl	800709c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007c2e:	68f9      	ldr	r1, [r7, #12]
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f7ff ff91 	bl	8007b58 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007c36:	e024      	b.n	8007c82 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d008      	beq.n	8007c50 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007c3e:	4b13      	ldr	r3, [pc, #76]	; (8007c8c <prvProcessTimerOrBlockTask+0x90>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	bf0c      	ite	eq
 8007c48:	2301      	moveq	r3, #1
 8007c4a:	2300      	movne	r3, #0
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007c50:	4b0f      	ldr	r3, [pc, #60]	; (8007c90 <prvProcessTimerOrBlockTask+0x94>)
 8007c52:	6818      	ldr	r0, [r3, #0]
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	1ad3      	subs	r3, r2, r3
 8007c5a:	683a      	ldr	r2, [r7, #0]
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	f7fe fe2d 	bl	80068bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007c62:	f7ff fa1b 	bl	800709c <xTaskResumeAll>
 8007c66:	4603      	mov	r3, r0
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d10a      	bne.n	8007c82 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007c6c:	4b09      	ldr	r3, [pc, #36]	; (8007c94 <prvProcessTimerOrBlockTask+0x98>)
 8007c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c72:	601a      	str	r2, [r3, #0]
 8007c74:	f3bf 8f4f 	dsb	sy
 8007c78:	f3bf 8f6f 	isb	sy
}
 8007c7c:	e001      	b.n	8007c82 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007c7e:	f7ff fa0d 	bl	800709c <xTaskResumeAll>
}
 8007c82:	bf00      	nop
 8007c84:	3710      	adds	r7, #16
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	200013f4 	.word	0x200013f4
 8007c90:	200013f8 	.word	0x200013f8
 8007c94:	e000ed04 	.word	0xe000ed04

08007c98 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b085      	sub	sp, #20
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007ca0:	4b0e      	ldr	r3, [pc, #56]	; (8007cdc <prvGetNextExpireTime+0x44>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	bf0c      	ite	eq
 8007caa:	2301      	moveq	r3, #1
 8007cac:	2300      	movne	r3, #0
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d105      	bne.n	8007cca <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007cbe:	4b07      	ldr	r3, [pc, #28]	; (8007cdc <prvGetNextExpireTime+0x44>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	68db      	ldr	r3, [r3, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	60fb      	str	r3, [r7, #12]
 8007cc8:	e001      	b.n	8007cce <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007cce:	68fb      	ldr	r3, [r7, #12]
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3714      	adds	r7, #20
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr
 8007cdc:	200013f0 	.word	0x200013f0

08007ce0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007ce8:	f7ff fa76 	bl	80071d8 <xTaskGetTickCount>
 8007cec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007cee:	4b0b      	ldr	r3, [pc, #44]	; (8007d1c <prvSampleTimeNow+0x3c>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	68fa      	ldr	r2, [r7, #12]
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d205      	bcs.n	8007d04 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007cf8:	f000 f908 	bl	8007f0c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	601a      	str	r2, [r3, #0]
 8007d02:	e002      	b.n	8007d0a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007d0a:	4a04      	ldr	r2, [pc, #16]	; (8007d1c <prvSampleTimeNow+0x3c>)
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007d10:	68fb      	ldr	r3, [r7, #12]
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3710      	adds	r7, #16
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
 8007d1a:	bf00      	nop
 8007d1c:	20001400 	.word	0x20001400

08007d20 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b086      	sub	sp, #24
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	607a      	str	r2, [r7, #4]
 8007d2c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	68ba      	ldr	r2, [r7, #8]
 8007d36:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	68fa      	ldr	r2, [r7, #12]
 8007d3c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007d3e:	68ba      	ldr	r2, [r7, #8]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d812      	bhi.n	8007d6c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	1ad2      	subs	r2, r2, r3
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	699b      	ldr	r3, [r3, #24]
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d302      	bcc.n	8007d5a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007d54:	2301      	movs	r3, #1
 8007d56:	617b      	str	r3, [r7, #20]
 8007d58:	e01b      	b.n	8007d92 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007d5a:	4b10      	ldr	r3, [pc, #64]	; (8007d9c <prvInsertTimerInActiveList+0x7c>)
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	3304      	adds	r3, #4
 8007d62:	4619      	mov	r1, r3
 8007d64:	4610      	mov	r0, r2
 8007d66:	f7fe f856 	bl	8005e16 <vListInsert>
 8007d6a:	e012      	b.n	8007d92 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d206      	bcs.n	8007d82 <prvInsertTimerInActiveList+0x62>
 8007d74:	68ba      	ldr	r2, [r7, #8]
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d302      	bcc.n	8007d82 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	617b      	str	r3, [r7, #20]
 8007d80:	e007      	b.n	8007d92 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007d82:	4b07      	ldr	r3, [pc, #28]	; (8007da0 <prvInsertTimerInActiveList+0x80>)
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	3304      	adds	r3, #4
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	4610      	mov	r0, r2
 8007d8e:	f7fe f842 	bl	8005e16 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007d92:	697b      	ldr	r3, [r7, #20]
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3718      	adds	r7, #24
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}
 8007d9c:	200013f4 	.word	0x200013f4
 8007da0:	200013f0 	.word	0x200013f0

08007da4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b08e      	sub	sp, #56	; 0x38
 8007da8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007daa:	e09d      	b.n	8007ee8 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	da18      	bge.n	8007de4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007db2:	1d3b      	adds	r3, r7, #4
 8007db4:	3304      	adds	r3, #4
 8007db6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d10a      	bne.n	8007dd4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc2:	f383 8811 	msr	BASEPRI, r3
 8007dc6:	f3bf 8f6f 	isb	sy
 8007dca:	f3bf 8f4f 	dsb	sy
 8007dce:	61fb      	str	r3, [r7, #28]
}
 8007dd0:	bf00      	nop
 8007dd2:	e7fe      	b.n	8007dd2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007dda:	6850      	ldr	r0, [r2, #4]
 8007ddc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007dde:	6892      	ldr	r2, [r2, #8]
 8007de0:	4611      	mov	r1, r2
 8007de2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	db7d      	blt.n	8007ee6 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df0:	695b      	ldr	r3, [r3, #20]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d004      	beq.n	8007e00 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df8:	3304      	adds	r3, #4
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f7fe f844 	bl	8005e88 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007e00:	463b      	mov	r3, r7
 8007e02:	4618      	mov	r0, r3
 8007e04:	f7ff ff6c 	bl	8007ce0 <prvSampleTimeNow>
 8007e08:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2b09      	cmp	r3, #9
 8007e0e:	d86b      	bhi.n	8007ee8 <prvProcessReceivedCommands+0x144>
 8007e10:	a201      	add	r2, pc, #4	; (adr r2, 8007e18 <prvProcessReceivedCommands+0x74>)
 8007e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e16:	bf00      	nop
 8007e18:	08007e41 	.word	0x08007e41
 8007e1c:	08007e41 	.word	0x08007e41
 8007e20:	08007e41 	.word	0x08007e41
 8007e24:	08007ee9 	.word	0x08007ee9
 8007e28:	08007e9d 	.word	0x08007e9d
 8007e2c:	08007ed5 	.word	0x08007ed5
 8007e30:	08007e41 	.word	0x08007e41
 8007e34:	08007e41 	.word	0x08007e41
 8007e38:	08007ee9 	.word	0x08007ee9
 8007e3c:	08007e9d 	.word	0x08007e9d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007e40:	68ba      	ldr	r2, [r7, #8]
 8007e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e44:	699b      	ldr	r3, [r3, #24]
 8007e46:	18d1      	adds	r1, r2, r3
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e4e:	f7ff ff67 	bl	8007d20 <prvInsertTimerInActiveList>
 8007e52:	4603      	mov	r3, r0
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d047      	beq.n	8007ee8 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e5e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e62:	69db      	ldr	r3, [r3, #28]
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d13f      	bne.n	8007ee8 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007e68:	68ba      	ldr	r2, [r7, #8]
 8007e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e6c:	699b      	ldr	r3, [r3, #24]
 8007e6e:	441a      	add	r2, r3
 8007e70:	2300      	movs	r3, #0
 8007e72:	9300      	str	r3, [sp, #0]
 8007e74:	2300      	movs	r3, #0
 8007e76:	2100      	movs	r1, #0
 8007e78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e7a:	f7ff fe1f 	bl	8007abc <xTimerGenericCommand>
 8007e7e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007e80:	6a3b      	ldr	r3, [r7, #32]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d130      	bne.n	8007ee8 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8007e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e8a:	f383 8811 	msr	BASEPRI, r3
 8007e8e:	f3bf 8f6f 	isb	sy
 8007e92:	f3bf 8f4f 	dsb	sy
 8007e96:	61bb      	str	r3, [r7, #24]
}
 8007e98:	bf00      	nop
 8007e9a:	e7fe      	b.n	8007e9a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007e9c:	68ba      	ldr	r2, [r7, #8]
 8007e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea4:	699b      	ldr	r3, [r3, #24]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d10a      	bne.n	8007ec0 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8007eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eae:	f383 8811 	msr	BASEPRI, r3
 8007eb2:	f3bf 8f6f 	isb	sy
 8007eb6:	f3bf 8f4f 	dsb	sy
 8007eba:	617b      	str	r3, [r7, #20]
}
 8007ebc:	bf00      	nop
 8007ebe:	e7fe      	b.n	8007ebe <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec2:	699a      	ldr	r2, [r3, #24]
 8007ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec6:	18d1      	adds	r1, r2, r3
 8007ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ecc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ece:	f7ff ff27 	bl	8007d20 <prvInsertTimerInActiveList>
					break;
 8007ed2:	e009      	b.n	8007ee8 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d104      	bne.n	8007ee8 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8007ede:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ee0:	f000 fb9f 	bl	8008622 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007ee4:	e000      	b.n	8007ee8 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007ee6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007ee8:	4b07      	ldr	r3, [pc, #28]	; (8007f08 <prvProcessReceivedCommands+0x164>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	1d39      	adds	r1, r7, #4
 8007eee:	2200      	movs	r2, #0
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f7fe fac9 	bl	8006488 <xQueueReceive>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	f47f af57 	bne.w	8007dac <prvProcessReceivedCommands+0x8>
	}
}
 8007efe:	bf00      	nop
 8007f00:	bf00      	nop
 8007f02:	3730      	adds	r7, #48	; 0x30
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	200013f8 	.word	0x200013f8

08007f0c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b088      	sub	sp, #32
 8007f10:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007f12:	e045      	b.n	8007fa0 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f14:	4b2c      	ldr	r3, [pc, #176]	; (8007fc8 <prvSwitchTimerLists+0xbc>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	68db      	ldr	r3, [r3, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f1e:	4b2a      	ldr	r3, [pc, #168]	; (8007fc8 <prvSwitchTimerLists+0xbc>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	68db      	ldr	r3, [r3, #12]
 8007f26:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	3304      	adds	r3, #4
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f7fd ffab 	bl	8005e88 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f36:	68f8      	ldr	r0, [r7, #12]
 8007f38:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	69db      	ldr	r3, [r3, #28]
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d12e      	bne.n	8007fa0 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	699b      	ldr	r3, [r3, #24]
 8007f46:	693a      	ldr	r2, [r7, #16]
 8007f48:	4413      	add	r3, r2
 8007f4a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007f4c:	68ba      	ldr	r2, [r7, #8]
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d90e      	bls.n	8007f72 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	68ba      	ldr	r2, [r7, #8]
 8007f58:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007f60:	4b19      	ldr	r3, [pc, #100]	; (8007fc8 <prvSwitchTimerLists+0xbc>)
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	3304      	adds	r3, #4
 8007f68:	4619      	mov	r1, r3
 8007f6a:	4610      	mov	r0, r2
 8007f6c:	f7fd ff53 	bl	8005e16 <vListInsert>
 8007f70:	e016      	b.n	8007fa0 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007f72:	2300      	movs	r3, #0
 8007f74:	9300      	str	r3, [sp, #0]
 8007f76:	2300      	movs	r3, #0
 8007f78:	693a      	ldr	r2, [r7, #16]
 8007f7a:	2100      	movs	r1, #0
 8007f7c:	68f8      	ldr	r0, [r7, #12]
 8007f7e:	f7ff fd9d 	bl	8007abc <xTimerGenericCommand>
 8007f82:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d10a      	bne.n	8007fa0 <prvSwitchTimerLists+0x94>
	__asm volatile
 8007f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f8e:	f383 8811 	msr	BASEPRI, r3
 8007f92:	f3bf 8f6f 	isb	sy
 8007f96:	f3bf 8f4f 	dsb	sy
 8007f9a:	603b      	str	r3, [r7, #0]
}
 8007f9c:	bf00      	nop
 8007f9e:	e7fe      	b.n	8007f9e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007fa0:	4b09      	ldr	r3, [pc, #36]	; (8007fc8 <prvSwitchTimerLists+0xbc>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d1b4      	bne.n	8007f14 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007faa:	4b07      	ldr	r3, [pc, #28]	; (8007fc8 <prvSwitchTimerLists+0xbc>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007fb0:	4b06      	ldr	r3, [pc, #24]	; (8007fcc <prvSwitchTimerLists+0xc0>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a04      	ldr	r2, [pc, #16]	; (8007fc8 <prvSwitchTimerLists+0xbc>)
 8007fb6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007fb8:	4a04      	ldr	r2, [pc, #16]	; (8007fcc <prvSwitchTimerLists+0xc0>)
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	6013      	str	r3, [r2, #0]
}
 8007fbe:	bf00      	nop
 8007fc0:	3718      	adds	r7, #24
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	200013f0 	.word	0x200013f0
 8007fcc:	200013f4 	.word	0x200013f4

08007fd0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007fd6:	f000 f965 	bl	80082a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007fda:	4b15      	ldr	r3, [pc, #84]	; (8008030 <prvCheckForValidListAndQueue+0x60>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d120      	bne.n	8008024 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007fe2:	4814      	ldr	r0, [pc, #80]	; (8008034 <prvCheckForValidListAndQueue+0x64>)
 8007fe4:	f7fd fec6 	bl	8005d74 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007fe8:	4813      	ldr	r0, [pc, #76]	; (8008038 <prvCheckForValidListAndQueue+0x68>)
 8007fea:	f7fd fec3 	bl	8005d74 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007fee:	4b13      	ldr	r3, [pc, #76]	; (800803c <prvCheckForValidListAndQueue+0x6c>)
 8007ff0:	4a10      	ldr	r2, [pc, #64]	; (8008034 <prvCheckForValidListAndQueue+0x64>)
 8007ff2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007ff4:	4b12      	ldr	r3, [pc, #72]	; (8008040 <prvCheckForValidListAndQueue+0x70>)
 8007ff6:	4a10      	ldr	r2, [pc, #64]	; (8008038 <prvCheckForValidListAndQueue+0x68>)
 8007ff8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	9300      	str	r3, [sp, #0]
 8007ffe:	4b11      	ldr	r3, [pc, #68]	; (8008044 <prvCheckForValidListAndQueue+0x74>)
 8008000:	4a11      	ldr	r2, [pc, #68]	; (8008048 <prvCheckForValidListAndQueue+0x78>)
 8008002:	2110      	movs	r1, #16
 8008004:	200a      	movs	r0, #10
 8008006:	f7fd ffd1 	bl	8005fac <xQueueGenericCreateStatic>
 800800a:	4603      	mov	r3, r0
 800800c:	4a08      	ldr	r2, [pc, #32]	; (8008030 <prvCheckForValidListAndQueue+0x60>)
 800800e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008010:	4b07      	ldr	r3, [pc, #28]	; (8008030 <prvCheckForValidListAndQueue+0x60>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d005      	beq.n	8008024 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008018:	4b05      	ldr	r3, [pc, #20]	; (8008030 <prvCheckForValidListAndQueue+0x60>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	490b      	ldr	r1, [pc, #44]	; (800804c <prvCheckForValidListAndQueue+0x7c>)
 800801e:	4618      	mov	r0, r3
 8008020:	f7fe fc22 	bl	8006868 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008024:	f000 f96e 	bl	8008304 <vPortExitCritical>
}
 8008028:	bf00      	nop
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}
 800802e:	bf00      	nop
 8008030:	200013f8 	.word	0x200013f8
 8008034:	200013c8 	.word	0x200013c8
 8008038:	200013dc 	.word	0x200013dc
 800803c:	200013f0 	.word	0x200013f0
 8008040:	200013f4 	.word	0x200013f4
 8008044:	200014a4 	.word	0x200014a4
 8008048:	20001404 	.word	0x20001404
 800804c:	0800bd8c 	.word	0x0800bd8c

08008050 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008050:	b480      	push	{r7}
 8008052:	b085      	sub	sp, #20
 8008054:	af00      	add	r7, sp, #0
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	3b04      	subs	r3, #4
 8008060:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008068:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	3b04      	subs	r3, #4
 800806e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	f023 0201 	bic.w	r2, r3, #1
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	3b04      	subs	r3, #4
 800807e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008080:	4a0c      	ldr	r2, [pc, #48]	; (80080b4 <pxPortInitialiseStack+0x64>)
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	3b14      	subs	r3, #20
 800808a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	3b04      	subs	r3, #4
 8008096:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f06f 0202 	mvn.w	r2, #2
 800809e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	3b20      	subs	r3, #32
 80080a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80080a6:	68fb      	ldr	r3, [r7, #12]
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3714      	adds	r7, #20
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr
 80080b4:	080080b9 	.word	0x080080b9

080080b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80080b8:	b480      	push	{r7}
 80080ba:	b085      	sub	sp, #20
 80080bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80080be:	2300      	movs	r3, #0
 80080c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80080c2:	4b12      	ldr	r3, [pc, #72]	; (800810c <prvTaskExitError+0x54>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080ca:	d00a      	beq.n	80080e2 <prvTaskExitError+0x2a>
	__asm volatile
 80080cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d0:	f383 8811 	msr	BASEPRI, r3
 80080d4:	f3bf 8f6f 	isb	sy
 80080d8:	f3bf 8f4f 	dsb	sy
 80080dc:	60fb      	str	r3, [r7, #12]
}
 80080de:	bf00      	nop
 80080e0:	e7fe      	b.n	80080e0 <prvTaskExitError+0x28>
	__asm volatile
 80080e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e6:	f383 8811 	msr	BASEPRI, r3
 80080ea:	f3bf 8f6f 	isb	sy
 80080ee:	f3bf 8f4f 	dsb	sy
 80080f2:	60bb      	str	r3, [r7, #8]
}
 80080f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80080f6:	bf00      	nop
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d0fc      	beq.n	80080f8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80080fe:	bf00      	nop
 8008100:	bf00      	nop
 8008102:	3714      	adds	r7, #20
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr
 800810c:	200001e4 	.word	0x200001e4

08008110 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008110:	4b07      	ldr	r3, [pc, #28]	; (8008130 <pxCurrentTCBConst2>)
 8008112:	6819      	ldr	r1, [r3, #0]
 8008114:	6808      	ldr	r0, [r1, #0]
 8008116:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800811a:	f380 8809 	msr	PSP, r0
 800811e:	f3bf 8f6f 	isb	sy
 8008122:	f04f 0000 	mov.w	r0, #0
 8008126:	f380 8811 	msr	BASEPRI, r0
 800812a:	4770      	bx	lr
 800812c:	f3af 8000 	nop.w

08008130 <pxCurrentTCBConst2>:
 8008130:	20000ec8 	.word	0x20000ec8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008134:	bf00      	nop
 8008136:	bf00      	nop

08008138 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008138:	4808      	ldr	r0, [pc, #32]	; (800815c <prvPortStartFirstTask+0x24>)
 800813a:	6800      	ldr	r0, [r0, #0]
 800813c:	6800      	ldr	r0, [r0, #0]
 800813e:	f380 8808 	msr	MSP, r0
 8008142:	f04f 0000 	mov.w	r0, #0
 8008146:	f380 8814 	msr	CONTROL, r0
 800814a:	b662      	cpsie	i
 800814c:	b661      	cpsie	f
 800814e:	f3bf 8f4f 	dsb	sy
 8008152:	f3bf 8f6f 	isb	sy
 8008156:	df00      	svc	0
 8008158:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800815a:	bf00      	nop
 800815c:	e000ed08 	.word	0xe000ed08

08008160 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b086      	sub	sp, #24
 8008164:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008166:	4b46      	ldr	r3, [pc, #280]	; (8008280 <xPortStartScheduler+0x120>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a46      	ldr	r2, [pc, #280]	; (8008284 <xPortStartScheduler+0x124>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d10a      	bne.n	8008186 <xPortStartScheduler+0x26>
	__asm volatile
 8008170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008174:	f383 8811 	msr	BASEPRI, r3
 8008178:	f3bf 8f6f 	isb	sy
 800817c:	f3bf 8f4f 	dsb	sy
 8008180:	613b      	str	r3, [r7, #16]
}
 8008182:	bf00      	nop
 8008184:	e7fe      	b.n	8008184 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008186:	4b3e      	ldr	r3, [pc, #248]	; (8008280 <xPortStartScheduler+0x120>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a3f      	ldr	r2, [pc, #252]	; (8008288 <xPortStartScheduler+0x128>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d10a      	bne.n	80081a6 <xPortStartScheduler+0x46>
	__asm volatile
 8008190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008194:	f383 8811 	msr	BASEPRI, r3
 8008198:	f3bf 8f6f 	isb	sy
 800819c:	f3bf 8f4f 	dsb	sy
 80081a0:	60fb      	str	r3, [r7, #12]
}
 80081a2:	bf00      	nop
 80081a4:	e7fe      	b.n	80081a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80081a6:	4b39      	ldr	r3, [pc, #228]	; (800828c <xPortStartScheduler+0x12c>)
 80081a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	781b      	ldrb	r3, [r3, #0]
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	22ff      	movs	r2, #255	; 0xff
 80081b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80081c0:	78fb      	ldrb	r3, [r7, #3]
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80081c8:	b2da      	uxtb	r2, r3
 80081ca:	4b31      	ldr	r3, [pc, #196]	; (8008290 <xPortStartScheduler+0x130>)
 80081cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80081ce:	4b31      	ldr	r3, [pc, #196]	; (8008294 <xPortStartScheduler+0x134>)
 80081d0:	2207      	movs	r2, #7
 80081d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80081d4:	e009      	b.n	80081ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80081d6:	4b2f      	ldr	r3, [pc, #188]	; (8008294 <xPortStartScheduler+0x134>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	3b01      	subs	r3, #1
 80081dc:	4a2d      	ldr	r2, [pc, #180]	; (8008294 <xPortStartScheduler+0x134>)
 80081de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80081e0:	78fb      	ldrb	r3, [r7, #3]
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	005b      	lsls	r3, r3, #1
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80081ea:	78fb      	ldrb	r3, [r7, #3]
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081f2:	2b80      	cmp	r3, #128	; 0x80
 80081f4:	d0ef      	beq.n	80081d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80081f6:	4b27      	ldr	r3, [pc, #156]	; (8008294 <xPortStartScheduler+0x134>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f1c3 0307 	rsb	r3, r3, #7
 80081fe:	2b04      	cmp	r3, #4
 8008200:	d00a      	beq.n	8008218 <xPortStartScheduler+0xb8>
	__asm volatile
 8008202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008206:	f383 8811 	msr	BASEPRI, r3
 800820a:	f3bf 8f6f 	isb	sy
 800820e:	f3bf 8f4f 	dsb	sy
 8008212:	60bb      	str	r3, [r7, #8]
}
 8008214:	bf00      	nop
 8008216:	e7fe      	b.n	8008216 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008218:	4b1e      	ldr	r3, [pc, #120]	; (8008294 <xPortStartScheduler+0x134>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	021b      	lsls	r3, r3, #8
 800821e:	4a1d      	ldr	r2, [pc, #116]	; (8008294 <xPortStartScheduler+0x134>)
 8008220:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008222:	4b1c      	ldr	r3, [pc, #112]	; (8008294 <xPortStartScheduler+0x134>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800822a:	4a1a      	ldr	r2, [pc, #104]	; (8008294 <xPortStartScheduler+0x134>)
 800822c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	b2da      	uxtb	r2, r3
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008236:	4b18      	ldr	r3, [pc, #96]	; (8008298 <xPortStartScheduler+0x138>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a17      	ldr	r2, [pc, #92]	; (8008298 <xPortStartScheduler+0x138>)
 800823c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008240:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008242:	4b15      	ldr	r3, [pc, #84]	; (8008298 <xPortStartScheduler+0x138>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a14      	ldr	r2, [pc, #80]	; (8008298 <xPortStartScheduler+0x138>)
 8008248:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800824c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800824e:	f000 f8dd 	bl	800840c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008252:	4b12      	ldr	r3, [pc, #72]	; (800829c <xPortStartScheduler+0x13c>)
 8008254:	2200      	movs	r2, #0
 8008256:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008258:	f000 f8fc 	bl	8008454 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800825c:	4b10      	ldr	r3, [pc, #64]	; (80082a0 <xPortStartScheduler+0x140>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a0f      	ldr	r2, [pc, #60]	; (80082a0 <xPortStartScheduler+0x140>)
 8008262:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008266:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008268:	f7ff ff66 	bl	8008138 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800826c:	f7ff f882 	bl	8007374 <vTaskSwitchContext>
	prvTaskExitError();
 8008270:	f7ff ff22 	bl	80080b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008274:	2300      	movs	r3, #0
}
 8008276:	4618      	mov	r0, r3
 8008278:	3718      	adds	r7, #24
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
 800827e:	bf00      	nop
 8008280:	e000ed00 	.word	0xe000ed00
 8008284:	410fc271 	.word	0x410fc271
 8008288:	410fc270 	.word	0x410fc270
 800828c:	e000e400 	.word	0xe000e400
 8008290:	200014f4 	.word	0x200014f4
 8008294:	200014f8 	.word	0x200014f8
 8008298:	e000ed20 	.word	0xe000ed20
 800829c:	200001e4 	.word	0x200001e4
 80082a0:	e000ef34 	.word	0xe000ef34

080082a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80082a4:	b480      	push	{r7}
 80082a6:	b083      	sub	sp, #12
 80082a8:	af00      	add	r7, sp, #0
	__asm volatile
 80082aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ae:	f383 8811 	msr	BASEPRI, r3
 80082b2:	f3bf 8f6f 	isb	sy
 80082b6:	f3bf 8f4f 	dsb	sy
 80082ba:	607b      	str	r3, [r7, #4]
}
 80082bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80082be:	4b0f      	ldr	r3, [pc, #60]	; (80082fc <vPortEnterCritical+0x58>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	3301      	adds	r3, #1
 80082c4:	4a0d      	ldr	r2, [pc, #52]	; (80082fc <vPortEnterCritical+0x58>)
 80082c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80082c8:	4b0c      	ldr	r3, [pc, #48]	; (80082fc <vPortEnterCritical+0x58>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d10f      	bne.n	80082f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80082d0:	4b0b      	ldr	r3, [pc, #44]	; (8008300 <vPortEnterCritical+0x5c>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d00a      	beq.n	80082f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80082da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082de:	f383 8811 	msr	BASEPRI, r3
 80082e2:	f3bf 8f6f 	isb	sy
 80082e6:	f3bf 8f4f 	dsb	sy
 80082ea:	603b      	str	r3, [r7, #0]
}
 80082ec:	bf00      	nop
 80082ee:	e7fe      	b.n	80082ee <vPortEnterCritical+0x4a>
	}
}
 80082f0:	bf00      	nop
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr
 80082fc:	200001e4 	.word	0x200001e4
 8008300:	e000ed04 	.word	0xe000ed04

08008304 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008304:	b480      	push	{r7}
 8008306:	b083      	sub	sp, #12
 8008308:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800830a:	4b12      	ldr	r3, [pc, #72]	; (8008354 <vPortExitCritical+0x50>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d10a      	bne.n	8008328 <vPortExitCritical+0x24>
	__asm volatile
 8008312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008316:	f383 8811 	msr	BASEPRI, r3
 800831a:	f3bf 8f6f 	isb	sy
 800831e:	f3bf 8f4f 	dsb	sy
 8008322:	607b      	str	r3, [r7, #4]
}
 8008324:	bf00      	nop
 8008326:	e7fe      	b.n	8008326 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008328:	4b0a      	ldr	r3, [pc, #40]	; (8008354 <vPortExitCritical+0x50>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	3b01      	subs	r3, #1
 800832e:	4a09      	ldr	r2, [pc, #36]	; (8008354 <vPortExitCritical+0x50>)
 8008330:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008332:	4b08      	ldr	r3, [pc, #32]	; (8008354 <vPortExitCritical+0x50>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d105      	bne.n	8008346 <vPortExitCritical+0x42>
 800833a:	2300      	movs	r3, #0
 800833c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	f383 8811 	msr	BASEPRI, r3
}
 8008344:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008346:	bf00      	nop
 8008348:	370c      	adds	r7, #12
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr
 8008352:	bf00      	nop
 8008354:	200001e4 	.word	0x200001e4
	...

08008360 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008360:	f3ef 8009 	mrs	r0, PSP
 8008364:	f3bf 8f6f 	isb	sy
 8008368:	4b15      	ldr	r3, [pc, #84]	; (80083c0 <pxCurrentTCBConst>)
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	f01e 0f10 	tst.w	lr, #16
 8008370:	bf08      	it	eq
 8008372:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008376:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800837a:	6010      	str	r0, [r2, #0]
 800837c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008380:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008384:	f380 8811 	msr	BASEPRI, r0
 8008388:	f3bf 8f4f 	dsb	sy
 800838c:	f3bf 8f6f 	isb	sy
 8008390:	f7fe fff0 	bl	8007374 <vTaskSwitchContext>
 8008394:	f04f 0000 	mov.w	r0, #0
 8008398:	f380 8811 	msr	BASEPRI, r0
 800839c:	bc09      	pop	{r0, r3}
 800839e:	6819      	ldr	r1, [r3, #0]
 80083a0:	6808      	ldr	r0, [r1, #0]
 80083a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083a6:	f01e 0f10 	tst.w	lr, #16
 80083aa:	bf08      	it	eq
 80083ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80083b0:	f380 8809 	msr	PSP, r0
 80083b4:	f3bf 8f6f 	isb	sy
 80083b8:	4770      	bx	lr
 80083ba:	bf00      	nop
 80083bc:	f3af 8000 	nop.w

080083c0 <pxCurrentTCBConst>:
 80083c0:	20000ec8 	.word	0x20000ec8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80083c4:	bf00      	nop
 80083c6:	bf00      	nop

080083c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b082      	sub	sp, #8
 80083cc:	af00      	add	r7, sp, #0
	__asm volatile
 80083ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d2:	f383 8811 	msr	BASEPRI, r3
 80083d6:	f3bf 8f6f 	isb	sy
 80083da:	f3bf 8f4f 	dsb	sy
 80083de:	607b      	str	r3, [r7, #4]
}
 80083e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80083e2:	f7fe ff09 	bl	80071f8 <xTaskIncrementTick>
 80083e6:	4603      	mov	r3, r0
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d003      	beq.n	80083f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80083ec:	4b06      	ldr	r3, [pc, #24]	; (8008408 <SysTick_Handler+0x40>)
 80083ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083f2:	601a      	str	r2, [r3, #0]
 80083f4:	2300      	movs	r3, #0
 80083f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	f383 8811 	msr	BASEPRI, r3
}
 80083fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008400:	bf00      	nop
 8008402:	3708      	adds	r7, #8
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}
 8008408:	e000ed04 	.word	0xe000ed04

0800840c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800840c:	b480      	push	{r7}
 800840e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008410:	4b0b      	ldr	r3, [pc, #44]	; (8008440 <vPortSetupTimerInterrupt+0x34>)
 8008412:	2200      	movs	r2, #0
 8008414:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008416:	4b0b      	ldr	r3, [pc, #44]	; (8008444 <vPortSetupTimerInterrupt+0x38>)
 8008418:	2200      	movs	r2, #0
 800841a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800841c:	4b0a      	ldr	r3, [pc, #40]	; (8008448 <vPortSetupTimerInterrupt+0x3c>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a0a      	ldr	r2, [pc, #40]	; (800844c <vPortSetupTimerInterrupt+0x40>)
 8008422:	fba2 2303 	umull	r2, r3, r2, r3
 8008426:	099b      	lsrs	r3, r3, #6
 8008428:	4a09      	ldr	r2, [pc, #36]	; (8008450 <vPortSetupTimerInterrupt+0x44>)
 800842a:	3b01      	subs	r3, #1
 800842c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800842e:	4b04      	ldr	r3, [pc, #16]	; (8008440 <vPortSetupTimerInterrupt+0x34>)
 8008430:	2207      	movs	r2, #7
 8008432:	601a      	str	r2, [r3, #0]
}
 8008434:	bf00      	nop
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr
 800843e:	bf00      	nop
 8008440:	e000e010 	.word	0xe000e010
 8008444:	e000e018 	.word	0xe000e018
 8008448:	2000003c 	.word	0x2000003c
 800844c:	10624dd3 	.word	0x10624dd3
 8008450:	e000e014 	.word	0xe000e014

08008454 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008454:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008464 <vPortEnableVFP+0x10>
 8008458:	6801      	ldr	r1, [r0, #0]
 800845a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800845e:	6001      	str	r1, [r0, #0]
 8008460:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008462:	bf00      	nop
 8008464:	e000ed88 	.word	0xe000ed88

08008468 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008468:	b480      	push	{r7}
 800846a:	b085      	sub	sp, #20
 800846c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800846e:	f3ef 8305 	mrs	r3, IPSR
 8008472:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2b0f      	cmp	r3, #15
 8008478:	d914      	bls.n	80084a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800847a:	4a17      	ldr	r2, [pc, #92]	; (80084d8 <vPortValidateInterruptPriority+0x70>)
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	4413      	add	r3, r2
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008484:	4b15      	ldr	r3, [pc, #84]	; (80084dc <vPortValidateInterruptPriority+0x74>)
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	7afa      	ldrb	r2, [r7, #11]
 800848a:	429a      	cmp	r2, r3
 800848c:	d20a      	bcs.n	80084a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800848e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008492:	f383 8811 	msr	BASEPRI, r3
 8008496:	f3bf 8f6f 	isb	sy
 800849a:	f3bf 8f4f 	dsb	sy
 800849e:	607b      	str	r3, [r7, #4]
}
 80084a0:	bf00      	nop
 80084a2:	e7fe      	b.n	80084a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80084a4:	4b0e      	ldr	r3, [pc, #56]	; (80084e0 <vPortValidateInterruptPriority+0x78>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80084ac:	4b0d      	ldr	r3, [pc, #52]	; (80084e4 <vPortValidateInterruptPriority+0x7c>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d90a      	bls.n	80084ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80084b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b8:	f383 8811 	msr	BASEPRI, r3
 80084bc:	f3bf 8f6f 	isb	sy
 80084c0:	f3bf 8f4f 	dsb	sy
 80084c4:	603b      	str	r3, [r7, #0]
}
 80084c6:	bf00      	nop
 80084c8:	e7fe      	b.n	80084c8 <vPortValidateInterruptPriority+0x60>
	}
 80084ca:	bf00      	nop
 80084cc:	3714      	adds	r7, #20
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr
 80084d6:	bf00      	nop
 80084d8:	e000e3f0 	.word	0xe000e3f0
 80084dc:	200014f4 	.word	0x200014f4
 80084e0:	e000ed0c 	.word	0xe000ed0c
 80084e4:	200014f8 	.word	0x200014f8

080084e8 <_sbrk_r>:

// Use of vTaskSuspendAll() in _sbrk_r() is normally redundant, as newlib malloc family routines call
// __malloc_lock before calling _sbrk_r(). Note vTaskSuspendAll/xTaskResumeAll support nesting.

//! _sbrk_r version supporting reentrant newlib (depends upon above symbols defined by linker control file).
void * _sbrk_r(struct _reent *pReent, int incr) {
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
    #ifdef MALLOCS_INSIDE_ISRs // block interrupts during free-storage use
      UBaseType_t usis; // saved interrupt status
    #endif
    static char *currentHeapEnd = &__HeapBase;
    #ifdef STM_VERSION // Use STM CubeMX LD symbols for heap
      if(TotalHeapSize==0) {
 80084f2:	4b24      	ldr	r3, [pc, #144]	; (8008584 <_sbrk_r+0x9c>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d10e      	bne.n	8008518 <_sbrk_r+0x30>
        TotalHeapSize = heapBytesRemaining = (int)((&__HeapLimit)-(&__HeapBase))-ISR_STACK_LENGTH_BYTES;
 80084fa:	4a23      	ldr	r2, [pc, #140]	; (8008588 <_sbrk_r+0xa0>)
 80084fc:	4b23      	ldr	r3, [pc, #140]	; (800858c <_sbrk_r+0xa4>)
 80084fe:	1ad3      	subs	r3, r2, r3
 8008500:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8008504:	4a22      	ldr	r2, [pc, #136]	; (8008590 <_sbrk_r+0xa8>)
 8008506:	6013      	str	r3, [r2, #0]
 8008508:	4a1f      	ldr	r2, [pc, #124]	; (8008588 <_sbrk_r+0xa0>)
 800850a:	4b20      	ldr	r3, [pc, #128]	; (800858c <_sbrk_r+0xa4>)
 800850c:	1ad3      	subs	r3, r2, r3
 800850e:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8008512:	461a      	mov	r2, r3
 8008514:	4b1b      	ldr	r3, [pc, #108]	; (8008584 <_sbrk_r+0x9c>)
 8008516:	601a      	str	r2, [r3, #0]
      };
    #endif
    char* limit = (xTaskGetSchedulerState()==taskSCHEDULER_NOT_STARTED) ?
 8008518:	f7ff f9a8 	bl	800786c <xTaskGetSchedulerState>
 800851c:	4603      	mov	r3, r0
            stack_ptr   :  // Before scheduler is started, limit is stack pointer (risky!)
 800851e:	2b01      	cmp	r3, #1
 8008520:	d101      	bne.n	8008526 <_sbrk_r+0x3e>
 8008522:	466b      	mov	r3, sp
 8008524:	e000      	b.n	8008528 <_sbrk_r+0x40>
 8008526:	4b1b      	ldr	r3, [pc, #108]	; (8008594 <_sbrk_r+0xac>)
    char* limit = (xTaskGetSchedulerState()==taskSCHEDULER_NOT_STARTED) ?
 8008528:	60fb      	str	r3, [r7, #12]
            &__HeapLimit-ISR_STACK_LENGTH_BYTES;  // Once running, OK to reuse all remaining RAM except ISR stack (MSP) stack
    DRN_ENTER_CRITICAL_SECTION(usis);
 800852a:	f7fe fda9 	bl	8007080 <vTaskSuspendAll>
    if (currentHeapEnd + incr > limit) {
 800852e:	4b1a      	ldr	r3, [pc, #104]	; (8008598 <_sbrk_r+0xb0>)
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	4413      	add	r3, r2
 8008536:	68fa      	ldr	r2, [r7, #12]
 8008538:	429a      	cmp	r2, r3
 800853a:	d207      	bcs.n	800854c <_sbrk_r+0x64>
            // If you want to alert debugger or halt...
            // WARNING: brkpt instruction may prevent watchdog operation...
            while(1) { __asm("bkpt #0"); }; // Stop in GUI as if at a breakpoint (if debugging, otherwise loop forever)
        #else
            // Default, if you prefer to believe your application will gracefully trap out-of-memory...
            pReent->_errno = ENOMEM; // newlib's thread-specific errno
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	220c      	movs	r2, #12
 8008540:	601a      	str	r2, [r3, #0]
            DRN_EXIT_CRITICAL_SECTION(usis);
 8008542:	f7fe fdab 	bl	800709c <xTaskResumeAll>
        #endif
        return (char *)-1; // the malloc-family routine that called sbrk will return 0
 8008546:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800854a:	e017      	b.n	800857c <_sbrk_r+0x94>
    }
    // 'incr' of memory is available: update accounting and return it.
    char *previousHeapEnd = currentHeapEnd;
 800854c:	4b12      	ldr	r3, [pc, #72]	; (8008598 <_sbrk_r+0xb0>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	60bb      	str	r3, [r7, #8]
    currentHeapEnd += incr;
 8008552:	4b11      	ldr	r3, [pc, #68]	; (8008598 <_sbrk_r+0xb0>)
 8008554:	681a      	ldr	r2, [r3, #0]
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	4413      	add	r3, r2
 800855a:	4a0f      	ldr	r2, [pc, #60]	; (8008598 <_sbrk_r+0xb0>)
 800855c:	6013      	str	r3, [r2, #0]
    heapBytesRemaining -= incr;
 800855e:	4b0c      	ldr	r3, [pc, #48]	; (8008590 <_sbrk_r+0xa8>)
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	1ad3      	subs	r3, r2, r3
 8008566:	4a0a      	ldr	r2, [pc, #40]	; (8008590 <_sbrk_r+0xa8>)
 8008568:	6013      	str	r3, [r2, #0]
    #ifndef NDEBUG
        totalBytesProvidedBySBRK += incr;
 800856a:	4b0c      	ldr	r3, [pc, #48]	; (800859c <_sbrk_r+0xb4>)
 800856c:	681a      	ldr	r2, [r3, #0]
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	4413      	add	r3, r2
 8008572:	4a0a      	ldr	r2, [pc, #40]	; (800859c <_sbrk_r+0xb4>)
 8008574:	6013      	str	r3, [r2, #0]
    #endif
    DRN_EXIT_CRITICAL_SECTION(usis);
 8008576:	f7fe fd91 	bl	800709c <xTaskResumeAll>
    return (char *) previousHeapEnd;
 800857a:	68bb      	ldr	r3, [r7, #8]
}
 800857c:	4618      	mov	r0, r3
 800857e:	3710      	adds	r7, #16
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}
 8008584:	20001500 	.word	0x20001500
 8008588:	20018000 	.word	0x20018000
 800858c:	20001518 	.word	0x20001518
 8008590:	200014fc 	.word	0x200014fc
 8008594:	20017e00 	.word	0x20017e00
 8008598:	200001e8 	.word	0x200001e8
 800859c:	20001504 	.word	0x20001504

080085a0 <__malloc_lock>:
char * _sbrk(int incr) { return sbrk(incr); };

#ifdef MALLOCS_INSIDE_ISRs // block interrupts during free-storage use
  static UBaseType_t malLock_uxSavedInterruptStatus;
#endif
void __malloc_lock(struct _reent *r)   {
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b086      	sub	sp, #24
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80085a8:	f3ef 8305 	mrs	r3, IPSR
 80085ac:	613b      	str	r3, [r7, #16]
	if( ulCurrentInterrupt == 0 )
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d102      	bne.n	80085ba <__malloc_lock+0x1a>
		xReturn = pdFALSE;
 80085b4:	2300      	movs	r3, #0
 80085b6:	60fb      	str	r3, [r7, #12]
 80085b8:	e001      	b.n	80085be <__malloc_lock+0x1e>
		xReturn = pdTRUE;
 80085ba:	2301      	movs	r3, #1
 80085bc:	60fb      	str	r3, [r7, #12]
	return xReturn;
 80085be:	68fb      	ldr	r3, [r7, #12]
  #if defined(MALLOCS_INSIDE_ISRs)
    DRN_ENTER_CRITICAL_SECTION(malLock_uxSavedInterruptStatus);
  #else
    bool insideAnISR = xPortIsInsideInterrupt();
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	bf14      	ite	ne
 80085c4:	2301      	movne	r3, #1
 80085c6:	2300      	moveq	r3, #0
 80085c8:	75fb      	strb	r3, [r7, #23]
    configASSERT( !insideAnISR ); // Make damn sure no more mallocs inside ISRs!!
 80085ca:	7dfb      	ldrb	r3, [r7, #23]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d00a      	beq.n	80085e6 <__malloc_lock+0x46>
	__asm volatile
 80085d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d4:	f383 8811 	msr	BASEPRI, r3
 80085d8:	f3bf 8f6f 	isb	sy
 80085dc:	f3bf 8f4f 	dsb	sy
 80085e0:	60bb      	str	r3, [r7, #8]
}
 80085e2:	bf00      	nop
 80085e4:	e7fe      	b.n	80085e4 <__malloc_lock+0x44>
  vTaskSuspendAll();
 80085e6:	f7fe fd4b 	bl	8007080 <vTaskSuspendAll>
  #endif
};
 80085ea:	bf00      	nop
 80085ec:	3718      	adds	r7, #24
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <__malloc_unlock>:
void __malloc_unlock(struct _reent *r) {
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b082      	sub	sp, #8
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
  #if defined(MALLOCS_INSIDE_ISRs)
    DRN_EXIT_CRITICAL_SECTION(malLock_uxSavedInterruptStatus);
  #else
  (void)xTaskResumeAll();
 80085fa:	f7fe fd4f 	bl	800709c <xTaskResumeAll>
  #endif
};
 80085fe:	bf00      	nop
 8008600:	3708      	adds	r7, #8
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}

08008606 <pvPortMalloc>:

// ================================================================================================
// Implement FreeRTOS's memory API using newlib-provided malloc family.
// ================================================================================================

void *pvPortMalloc( size_t xSize ) PRIVILEGED_FUNCTION {
 8008606:	b580      	push	{r7, lr}
 8008608:	b084      	sub	sp, #16
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
    void *p = malloc(xSize);
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 f936 	bl	8008880 <malloc>
 8008614:	4603      	mov	r3, r0
 8008616:	60fb      	str	r3, [r7, #12]
    return p;
 8008618:	68fb      	ldr	r3, [r7, #12]
}
 800861a:	4618      	mov	r0, r3
 800861c:	3710      	adds	r7, #16
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}

08008622 <vPortFree>:
void vPortFree( void *pv ) PRIVILEGED_FUNCTION {
 8008622:	b580      	push	{r7, lr}
 8008624:	b082      	sub	sp, #8
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
    free(pv);
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 f930 	bl	8008890 <free>
};
 8008630:	bf00      	nop
 8008632:	3708      	adds	r7, #8
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <__errno>:
 8008638:	4b01      	ldr	r3, [pc, #4]	; (8008640 <__errno+0x8>)
 800863a:	6818      	ldr	r0, [r3, #0]
 800863c:	4770      	bx	lr
 800863e:	bf00      	nop
 8008640:	200001ec 	.word	0x200001ec

08008644 <std>:
 8008644:	2300      	movs	r3, #0
 8008646:	b510      	push	{r4, lr}
 8008648:	4604      	mov	r4, r0
 800864a:	e9c0 3300 	strd	r3, r3, [r0]
 800864e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008652:	6083      	str	r3, [r0, #8]
 8008654:	8181      	strh	r1, [r0, #12]
 8008656:	6643      	str	r3, [r0, #100]	; 0x64
 8008658:	81c2      	strh	r2, [r0, #14]
 800865a:	6183      	str	r3, [r0, #24]
 800865c:	4619      	mov	r1, r3
 800865e:	2208      	movs	r2, #8
 8008660:	305c      	adds	r0, #92	; 0x5c
 8008662:	f000 f92b 	bl	80088bc <memset>
 8008666:	4b05      	ldr	r3, [pc, #20]	; (800867c <std+0x38>)
 8008668:	6263      	str	r3, [r4, #36]	; 0x24
 800866a:	4b05      	ldr	r3, [pc, #20]	; (8008680 <std+0x3c>)
 800866c:	62a3      	str	r3, [r4, #40]	; 0x28
 800866e:	4b05      	ldr	r3, [pc, #20]	; (8008684 <std+0x40>)
 8008670:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008672:	4b05      	ldr	r3, [pc, #20]	; (8008688 <std+0x44>)
 8008674:	6224      	str	r4, [r4, #32]
 8008676:	6323      	str	r3, [r4, #48]	; 0x30
 8008678:	bd10      	pop	{r4, pc}
 800867a:	bf00      	nop
 800867c:	08009475 	.word	0x08009475
 8008680:	08009497 	.word	0x08009497
 8008684:	080094cf 	.word	0x080094cf
 8008688:	080094f3 	.word	0x080094f3

0800868c <_cleanup_r>:
 800868c:	4901      	ldr	r1, [pc, #4]	; (8008694 <_cleanup_r+0x8>)
 800868e:	f000 b8af 	b.w	80087f0 <_fwalk_reent>
 8008692:	bf00      	nop
 8008694:	0800a341 	.word	0x0800a341

08008698 <__sfmoreglue>:
 8008698:	b570      	push	{r4, r5, r6, lr}
 800869a:	2268      	movs	r2, #104	; 0x68
 800869c:	1e4d      	subs	r5, r1, #1
 800869e:	4355      	muls	r5, r2
 80086a0:	460e      	mov	r6, r1
 80086a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80086a6:	f000 f97d 	bl	80089a4 <_malloc_r>
 80086aa:	4604      	mov	r4, r0
 80086ac:	b140      	cbz	r0, 80086c0 <__sfmoreglue+0x28>
 80086ae:	2100      	movs	r1, #0
 80086b0:	e9c0 1600 	strd	r1, r6, [r0]
 80086b4:	300c      	adds	r0, #12
 80086b6:	60a0      	str	r0, [r4, #8]
 80086b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80086bc:	f000 f8fe 	bl	80088bc <memset>
 80086c0:	4620      	mov	r0, r4
 80086c2:	bd70      	pop	{r4, r5, r6, pc}

080086c4 <__sfp_lock_acquire>:
 80086c4:	4801      	ldr	r0, [pc, #4]	; (80086cc <__sfp_lock_acquire+0x8>)
 80086c6:	f000 b8d8 	b.w	800887a <__retarget_lock_acquire_recursive>
 80086ca:	bf00      	nop
 80086cc:	20001508 	.word	0x20001508

080086d0 <__sfp_lock_release>:
 80086d0:	4801      	ldr	r0, [pc, #4]	; (80086d8 <__sfp_lock_release+0x8>)
 80086d2:	f000 b8d3 	b.w	800887c <__retarget_lock_release_recursive>
 80086d6:	bf00      	nop
 80086d8:	20001508 	.word	0x20001508

080086dc <__sinit_lock_acquire>:
 80086dc:	4801      	ldr	r0, [pc, #4]	; (80086e4 <__sinit_lock_acquire+0x8>)
 80086de:	f000 b8cc 	b.w	800887a <__retarget_lock_acquire_recursive>
 80086e2:	bf00      	nop
 80086e4:	20001509 	.word	0x20001509

080086e8 <__sinit_lock_release>:
 80086e8:	4801      	ldr	r0, [pc, #4]	; (80086f0 <__sinit_lock_release+0x8>)
 80086ea:	f000 b8c7 	b.w	800887c <__retarget_lock_release_recursive>
 80086ee:	bf00      	nop
 80086f0:	20001509 	.word	0x20001509

080086f4 <__sinit>:
 80086f4:	b510      	push	{r4, lr}
 80086f6:	4604      	mov	r4, r0
 80086f8:	f7ff fff0 	bl	80086dc <__sinit_lock_acquire>
 80086fc:	69a3      	ldr	r3, [r4, #24]
 80086fe:	b11b      	cbz	r3, 8008708 <__sinit+0x14>
 8008700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008704:	f7ff bff0 	b.w	80086e8 <__sinit_lock_release>
 8008708:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800870c:	6523      	str	r3, [r4, #80]	; 0x50
 800870e:	4b13      	ldr	r3, [pc, #76]	; (800875c <__sinit+0x68>)
 8008710:	4a13      	ldr	r2, [pc, #76]	; (8008760 <__sinit+0x6c>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	62a2      	str	r2, [r4, #40]	; 0x28
 8008716:	42a3      	cmp	r3, r4
 8008718:	bf04      	itt	eq
 800871a:	2301      	moveq	r3, #1
 800871c:	61a3      	streq	r3, [r4, #24]
 800871e:	4620      	mov	r0, r4
 8008720:	f000 f820 	bl	8008764 <__sfp>
 8008724:	6060      	str	r0, [r4, #4]
 8008726:	4620      	mov	r0, r4
 8008728:	f000 f81c 	bl	8008764 <__sfp>
 800872c:	60a0      	str	r0, [r4, #8]
 800872e:	4620      	mov	r0, r4
 8008730:	f000 f818 	bl	8008764 <__sfp>
 8008734:	2200      	movs	r2, #0
 8008736:	60e0      	str	r0, [r4, #12]
 8008738:	2104      	movs	r1, #4
 800873a:	6860      	ldr	r0, [r4, #4]
 800873c:	f7ff ff82 	bl	8008644 <std>
 8008740:	68a0      	ldr	r0, [r4, #8]
 8008742:	2201      	movs	r2, #1
 8008744:	2109      	movs	r1, #9
 8008746:	f7ff ff7d 	bl	8008644 <std>
 800874a:	68e0      	ldr	r0, [r4, #12]
 800874c:	2202      	movs	r2, #2
 800874e:	2112      	movs	r1, #18
 8008750:	f7ff ff78 	bl	8008644 <std>
 8008754:	2301      	movs	r3, #1
 8008756:	61a3      	str	r3, [r4, #24]
 8008758:	e7d2      	b.n	8008700 <__sinit+0xc>
 800875a:	bf00      	nop
 800875c:	0800be8c 	.word	0x0800be8c
 8008760:	0800868d 	.word	0x0800868d

08008764 <__sfp>:
 8008764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008766:	4607      	mov	r7, r0
 8008768:	f7ff ffac 	bl	80086c4 <__sfp_lock_acquire>
 800876c:	4b1e      	ldr	r3, [pc, #120]	; (80087e8 <__sfp+0x84>)
 800876e:	681e      	ldr	r6, [r3, #0]
 8008770:	69b3      	ldr	r3, [r6, #24]
 8008772:	b913      	cbnz	r3, 800877a <__sfp+0x16>
 8008774:	4630      	mov	r0, r6
 8008776:	f7ff ffbd 	bl	80086f4 <__sinit>
 800877a:	3648      	adds	r6, #72	; 0x48
 800877c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008780:	3b01      	subs	r3, #1
 8008782:	d503      	bpl.n	800878c <__sfp+0x28>
 8008784:	6833      	ldr	r3, [r6, #0]
 8008786:	b30b      	cbz	r3, 80087cc <__sfp+0x68>
 8008788:	6836      	ldr	r6, [r6, #0]
 800878a:	e7f7      	b.n	800877c <__sfp+0x18>
 800878c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008790:	b9d5      	cbnz	r5, 80087c8 <__sfp+0x64>
 8008792:	4b16      	ldr	r3, [pc, #88]	; (80087ec <__sfp+0x88>)
 8008794:	60e3      	str	r3, [r4, #12]
 8008796:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800879a:	6665      	str	r5, [r4, #100]	; 0x64
 800879c:	f000 f86c 	bl	8008878 <__retarget_lock_init_recursive>
 80087a0:	f7ff ff96 	bl	80086d0 <__sfp_lock_release>
 80087a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80087a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80087ac:	6025      	str	r5, [r4, #0]
 80087ae:	61a5      	str	r5, [r4, #24]
 80087b0:	2208      	movs	r2, #8
 80087b2:	4629      	mov	r1, r5
 80087b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80087b8:	f000 f880 	bl	80088bc <memset>
 80087bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80087c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80087c4:	4620      	mov	r0, r4
 80087c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087c8:	3468      	adds	r4, #104	; 0x68
 80087ca:	e7d9      	b.n	8008780 <__sfp+0x1c>
 80087cc:	2104      	movs	r1, #4
 80087ce:	4638      	mov	r0, r7
 80087d0:	f7ff ff62 	bl	8008698 <__sfmoreglue>
 80087d4:	4604      	mov	r4, r0
 80087d6:	6030      	str	r0, [r6, #0]
 80087d8:	2800      	cmp	r0, #0
 80087da:	d1d5      	bne.n	8008788 <__sfp+0x24>
 80087dc:	f7ff ff78 	bl	80086d0 <__sfp_lock_release>
 80087e0:	230c      	movs	r3, #12
 80087e2:	603b      	str	r3, [r7, #0]
 80087e4:	e7ee      	b.n	80087c4 <__sfp+0x60>
 80087e6:	bf00      	nop
 80087e8:	0800be8c 	.word	0x0800be8c
 80087ec:	ffff0001 	.word	0xffff0001

080087f0 <_fwalk_reent>:
 80087f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087f4:	4606      	mov	r6, r0
 80087f6:	4688      	mov	r8, r1
 80087f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80087fc:	2700      	movs	r7, #0
 80087fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008802:	f1b9 0901 	subs.w	r9, r9, #1
 8008806:	d505      	bpl.n	8008814 <_fwalk_reent+0x24>
 8008808:	6824      	ldr	r4, [r4, #0]
 800880a:	2c00      	cmp	r4, #0
 800880c:	d1f7      	bne.n	80087fe <_fwalk_reent+0xe>
 800880e:	4638      	mov	r0, r7
 8008810:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008814:	89ab      	ldrh	r3, [r5, #12]
 8008816:	2b01      	cmp	r3, #1
 8008818:	d907      	bls.n	800882a <_fwalk_reent+0x3a>
 800881a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800881e:	3301      	adds	r3, #1
 8008820:	d003      	beq.n	800882a <_fwalk_reent+0x3a>
 8008822:	4629      	mov	r1, r5
 8008824:	4630      	mov	r0, r6
 8008826:	47c0      	blx	r8
 8008828:	4307      	orrs	r7, r0
 800882a:	3568      	adds	r5, #104	; 0x68
 800882c:	e7e9      	b.n	8008802 <_fwalk_reent+0x12>
	...

08008830 <__libc_init_array>:
 8008830:	b570      	push	{r4, r5, r6, lr}
 8008832:	4d0d      	ldr	r5, [pc, #52]	; (8008868 <__libc_init_array+0x38>)
 8008834:	4c0d      	ldr	r4, [pc, #52]	; (800886c <__libc_init_array+0x3c>)
 8008836:	1b64      	subs	r4, r4, r5
 8008838:	10a4      	asrs	r4, r4, #2
 800883a:	2600      	movs	r6, #0
 800883c:	42a6      	cmp	r6, r4
 800883e:	d109      	bne.n	8008854 <__libc_init_array+0x24>
 8008840:	4d0b      	ldr	r5, [pc, #44]	; (8008870 <__libc_init_array+0x40>)
 8008842:	4c0c      	ldr	r4, [pc, #48]	; (8008874 <__libc_init_array+0x44>)
 8008844:	f003 f9ba 	bl	800bbbc <_init>
 8008848:	1b64      	subs	r4, r4, r5
 800884a:	10a4      	asrs	r4, r4, #2
 800884c:	2600      	movs	r6, #0
 800884e:	42a6      	cmp	r6, r4
 8008850:	d105      	bne.n	800885e <__libc_init_array+0x2e>
 8008852:	bd70      	pop	{r4, r5, r6, pc}
 8008854:	f855 3b04 	ldr.w	r3, [r5], #4
 8008858:	4798      	blx	r3
 800885a:	3601      	adds	r6, #1
 800885c:	e7ee      	b.n	800883c <__libc_init_array+0xc>
 800885e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008862:	4798      	blx	r3
 8008864:	3601      	adds	r6, #1
 8008866:	e7f2      	b.n	800884e <__libc_init_array+0x1e>
 8008868:	0800c278 	.word	0x0800c278
 800886c:	0800c278 	.word	0x0800c278
 8008870:	0800c278 	.word	0x0800c278
 8008874:	0800c27c 	.word	0x0800c27c

08008878 <__retarget_lock_init_recursive>:
 8008878:	4770      	bx	lr

0800887a <__retarget_lock_acquire_recursive>:
 800887a:	4770      	bx	lr

0800887c <__retarget_lock_release_recursive>:
 800887c:	4770      	bx	lr
	...

08008880 <malloc>:
 8008880:	4b02      	ldr	r3, [pc, #8]	; (800888c <malloc+0xc>)
 8008882:	4601      	mov	r1, r0
 8008884:	6818      	ldr	r0, [r3, #0]
 8008886:	f000 b88d 	b.w	80089a4 <_malloc_r>
 800888a:	bf00      	nop
 800888c:	200001ec 	.word	0x200001ec

08008890 <free>:
 8008890:	4b02      	ldr	r3, [pc, #8]	; (800889c <free+0xc>)
 8008892:	4601      	mov	r1, r0
 8008894:	6818      	ldr	r0, [r3, #0]
 8008896:	f000 b819 	b.w	80088cc <_free_r>
 800889a:	bf00      	nop
 800889c:	200001ec 	.word	0x200001ec

080088a0 <memcpy>:
 80088a0:	440a      	add	r2, r1
 80088a2:	4291      	cmp	r1, r2
 80088a4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80088a8:	d100      	bne.n	80088ac <memcpy+0xc>
 80088aa:	4770      	bx	lr
 80088ac:	b510      	push	{r4, lr}
 80088ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088b6:	4291      	cmp	r1, r2
 80088b8:	d1f9      	bne.n	80088ae <memcpy+0xe>
 80088ba:	bd10      	pop	{r4, pc}

080088bc <memset>:
 80088bc:	4402      	add	r2, r0
 80088be:	4603      	mov	r3, r0
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d100      	bne.n	80088c6 <memset+0xa>
 80088c4:	4770      	bx	lr
 80088c6:	f803 1b01 	strb.w	r1, [r3], #1
 80088ca:	e7f9      	b.n	80088c0 <memset+0x4>

080088cc <_free_r>:
 80088cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80088ce:	2900      	cmp	r1, #0
 80088d0:	d044      	beq.n	800895c <_free_r+0x90>
 80088d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088d6:	9001      	str	r0, [sp, #4]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	f1a1 0404 	sub.w	r4, r1, #4
 80088de:	bfb8      	it	lt
 80088e0:	18e4      	addlt	r4, r4, r3
 80088e2:	f7ff fe5d 	bl	80085a0 <__malloc_lock>
 80088e6:	4a1e      	ldr	r2, [pc, #120]	; (8008960 <_free_r+0x94>)
 80088e8:	9801      	ldr	r0, [sp, #4]
 80088ea:	6813      	ldr	r3, [r2, #0]
 80088ec:	b933      	cbnz	r3, 80088fc <_free_r+0x30>
 80088ee:	6063      	str	r3, [r4, #4]
 80088f0:	6014      	str	r4, [r2, #0]
 80088f2:	b003      	add	sp, #12
 80088f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80088f8:	f7ff be7b 	b.w	80085f2 <__malloc_unlock>
 80088fc:	42a3      	cmp	r3, r4
 80088fe:	d908      	bls.n	8008912 <_free_r+0x46>
 8008900:	6825      	ldr	r5, [r4, #0]
 8008902:	1961      	adds	r1, r4, r5
 8008904:	428b      	cmp	r3, r1
 8008906:	bf01      	itttt	eq
 8008908:	6819      	ldreq	r1, [r3, #0]
 800890a:	685b      	ldreq	r3, [r3, #4]
 800890c:	1949      	addeq	r1, r1, r5
 800890e:	6021      	streq	r1, [r4, #0]
 8008910:	e7ed      	b.n	80088ee <_free_r+0x22>
 8008912:	461a      	mov	r2, r3
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	b10b      	cbz	r3, 800891c <_free_r+0x50>
 8008918:	42a3      	cmp	r3, r4
 800891a:	d9fa      	bls.n	8008912 <_free_r+0x46>
 800891c:	6811      	ldr	r1, [r2, #0]
 800891e:	1855      	adds	r5, r2, r1
 8008920:	42a5      	cmp	r5, r4
 8008922:	d10b      	bne.n	800893c <_free_r+0x70>
 8008924:	6824      	ldr	r4, [r4, #0]
 8008926:	4421      	add	r1, r4
 8008928:	1854      	adds	r4, r2, r1
 800892a:	42a3      	cmp	r3, r4
 800892c:	6011      	str	r1, [r2, #0]
 800892e:	d1e0      	bne.n	80088f2 <_free_r+0x26>
 8008930:	681c      	ldr	r4, [r3, #0]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	6053      	str	r3, [r2, #4]
 8008936:	4421      	add	r1, r4
 8008938:	6011      	str	r1, [r2, #0]
 800893a:	e7da      	b.n	80088f2 <_free_r+0x26>
 800893c:	d902      	bls.n	8008944 <_free_r+0x78>
 800893e:	230c      	movs	r3, #12
 8008940:	6003      	str	r3, [r0, #0]
 8008942:	e7d6      	b.n	80088f2 <_free_r+0x26>
 8008944:	6825      	ldr	r5, [r4, #0]
 8008946:	1961      	adds	r1, r4, r5
 8008948:	428b      	cmp	r3, r1
 800894a:	bf04      	itt	eq
 800894c:	6819      	ldreq	r1, [r3, #0]
 800894e:	685b      	ldreq	r3, [r3, #4]
 8008950:	6063      	str	r3, [r4, #4]
 8008952:	bf04      	itt	eq
 8008954:	1949      	addeq	r1, r1, r5
 8008956:	6021      	streq	r1, [r4, #0]
 8008958:	6054      	str	r4, [r2, #4]
 800895a:	e7ca      	b.n	80088f2 <_free_r+0x26>
 800895c:	b003      	add	sp, #12
 800895e:	bd30      	pop	{r4, r5, pc}
 8008960:	2000150c 	.word	0x2000150c

08008964 <sbrk_aligned>:
 8008964:	b570      	push	{r4, r5, r6, lr}
 8008966:	4e0e      	ldr	r6, [pc, #56]	; (80089a0 <sbrk_aligned+0x3c>)
 8008968:	460c      	mov	r4, r1
 800896a:	6831      	ldr	r1, [r6, #0]
 800896c:	4605      	mov	r5, r0
 800896e:	b911      	cbnz	r1, 8008976 <sbrk_aligned+0x12>
 8008970:	f7ff fdba 	bl	80084e8 <_sbrk_r>
 8008974:	6030      	str	r0, [r6, #0]
 8008976:	4621      	mov	r1, r4
 8008978:	4628      	mov	r0, r5
 800897a:	f7ff fdb5 	bl	80084e8 <_sbrk_r>
 800897e:	1c43      	adds	r3, r0, #1
 8008980:	d00a      	beq.n	8008998 <sbrk_aligned+0x34>
 8008982:	1cc4      	adds	r4, r0, #3
 8008984:	f024 0403 	bic.w	r4, r4, #3
 8008988:	42a0      	cmp	r0, r4
 800898a:	d007      	beq.n	800899c <sbrk_aligned+0x38>
 800898c:	1a21      	subs	r1, r4, r0
 800898e:	4628      	mov	r0, r5
 8008990:	f7ff fdaa 	bl	80084e8 <_sbrk_r>
 8008994:	3001      	adds	r0, #1
 8008996:	d101      	bne.n	800899c <sbrk_aligned+0x38>
 8008998:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800899c:	4620      	mov	r0, r4
 800899e:	bd70      	pop	{r4, r5, r6, pc}
 80089a0:	20001510 	.word	0x20001510

080089a4 <_malloc_r>:
 80089a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089a8:	1ccd      	adds	r5, r1, #3
 80089aa:	f025 0503 	bic.w	r5, r5, #3
 80089ae:	3508      	adds	r5, #8
 80089b0:	2d0c      	cmp	r5, #12
 80089b2:	bf38      	it	cc
 80089b4:	250c      	movcc	r5, #12
 80089b6:	2d00      	cmp	r5, #0
 80089b8:	4607      	mov	r7, r0
 80089ba:	db01      	blt.n	80089c0 <_malloc_r+0x1c>
 80089bc:	42a9      	cmp	r1, r5
 80089be:	d905      	bls.n	80089cc <_malloc_r+0x28>
 80089c0:	230c      	movs	r3, #12
 80089c2:	603b      	str	r3, [r7, #0]
 80089c4:	2600      	movs	r6, #0
 80089c6:	4630      	mov	r0, r6
 80089c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089cc:	4e2e      	ldr	r6, [pc, #184]	; (8008a88 <_malloc_r+0xe4>)
 80089ce:	f7ff fde7 	bl	80085a0 <__malloc_lock>
 80089d2:	6833      	ldr	r3, [r6, #0]
 80089d4:	461c      	mov	r4, r3
 80089d6:	bb34      	cbnz	r4, 8008a26 <_malloc_r+0x82>
 80089d8:	4629      	mov	r1, r5
 80089da:	4638      	mov	r0, r7
 80089dc:	f7ff ffc2 	bl	8008964 <sbrk_aligned>
 80089e0:	1c43      	adds	r3, r0, #1
 80089e2:	4604      	mov	r4, r0
 80089e4:	d14d      	bne.n	8008a82 <_malloc_r+0xde>
 80089e6:	6834      	ldr	r4, [r6, #0]
 80089e8:	4626      	mov	r6, r4
 80089ea:	2e00      	cmp	r6, #0
 80089ec:	d140      	bne.n	8008a70 <_malloc_r+0xcc>
 80089ee:	6823      	ldr	r3, [r4, #0]
 80089f0:	4631      	mov	r1, r6
 80089f2:	4638      	mov	r0, r7
 80089f4:	eb04 0803 	add.w	r8, r4, r3
 80089f8:	f7ff fd76 	bl	80084e8 <_sbrk_r>
 80089fc:	4580      	cmp	r8, r0
 80089fe:	d13a      	bne.n	8008a76 <_malloc_r+0xd2>
 8008a00:	6821      	ldr	r1, [r4, #0]
 8008a02:	3503      	adds	r5, #3
 8008a04:	1a6d      	subs	r5, r5, r1
 8008a06:	f025 0503 	bic.w	r5, r5, #3
 8008a0a:	3508      	adds	r5, #8
 8008a0c:	2d0c      	cmp	r5, #12
 8008a0e:	bf38      	it	cc
 8008a10:	250c      	movcc	r5, #12
 8008a12:	4629      	mov	r1, r5
 8008a14:	4638      	mov	r0, r7
 8008a16:	f7ff ffa5 	bl	8008964 <sbrk_aligned>
 8008a1a:	3001      	adds	r0, #1
 8008a1c:	d02b      	beq.n	8008a76 <_malloc_r+0xd2>
 8008a1e:	6823      	ldr	r3, [r4, #0]
 8008a20:	442b      	add	r3, r5
 8008a22:	6023      	str	r3, [r4, #0]
 8008a24:	e00e      	b.n	8008a44 <_malloc_r+0xa0>
 8008a26:	6822      	ldr	r2, [r4, #0]
 8008a28:	1b52      	subs	r2, r2, r5
 8008a2a:	d41e      	bmi.n	8008a6a <_malloc_r+0xc6>
 8008a2c:	2a0b      	cmp	r2, #11
 8008a2e:	d916      	bls.n	8008a5e <_malloc_r+0xba>
 8008a30:	1961      	adds	r1, r4, r5
 8008a32:	42a3      	cmp	r3, r4
 8008a34:	6025      	str	r5, [r4, #0]
 8008a36:	bf18      	it	ne
 8008a38:	6059      	strne	r1, [r3, #4]
 8008a3a:	6863      	ldr	r3, [r4, #4]
 8008a3c:	bf08      	it	eq
 8008a3e:	6031      	streq	r1, [r6, #0]
 8008a40:	5162      	str	r2, [r4, r5]
 8008a42:	604b      	str	r3, [r1, #4]
 8008a44:	4638      	mov	r0, r7
 8008a46:	f104 060b 	add.w	r6, r4, #11
 8008a4a:	f7ff fdd2 	bl	80085f2 <__malloc_unlock>
 8008a4e:	f026 0607 	bic.w	r6, r6, #7
 8008a52:	1d23      	adds	r3, r4, #4
 8008a54:	1af2      	subs	r2, r6, r3
 8008a56:	d0b6      	beq.n	80089c6 <_malloc_r+0x22>
 8008a58:	1b9b      	subs	r3, r3, r6
 8008a5a:	50a3      	str	r3, [r4, r2]
 8008a5c:	e7b3      	b.n	80089c6 <_malloc_r+0x22>
 8008a5e:	6862      	ldr	r2, [r4, #4]
 8008a60:	42a3      	cmp	r3, r4
 8008a62:	bf0c      	ite	eq
 8008a64:	6032      	streq	r2, [r6, #0]
 8008a66:	605a      	strne	r2, [r3, #4]
 8008a68:	e7ec      	b.n	8008a44 <_malloc_r+0xa0>
 8008a6a:	4623      	mov	r3, r4
 8008a6c:	6864      	ldr	r4, [r4, #4]
 8008a6e:	e7b2      	b.n	80089d6 <_malloc_r+0x32>
 8008a70:	4634      	mov	r4, r6
 8008a72:	6876      	ldr	r6, [r6, #4]
 8008a74:	e7b9      	b.n	80089ea <_malloc_r+0x46>
 8008a76:	230c      	movs	r3, #12
 8008a78:	603b      	str	r3, [r7, #0]
 8008a7a:	4638      	mov	r0, r7
 8008a7c:	f7ff fdb9 	bl	80085f2 <__malloc_unlock>
 8008a80:	e7a1      	b.n	80089c6 <_malloc_r+0x22>
 8008a82:	6025      	str	r5, [r4, #0]
 8008a84:	e7de      	b.n	8008a44 <_malloc_r+0xa0>
 8008a86:	bf00      	nop
 8008a88:	2000150c 	.word	0x2000150c

08008a8c <__cvt>:
 8008a8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a90:	ec55 4b10 	vmov	r4, r5, d0
 8008a94:	2d00      	cmp	r5, #0
 8008a96:	460e      	mov	r6, r1
 8008a98:	4619      	mov	r1, r3
 8008a9a:	462b      	mov	r3, r5
 8008a9c:	bfbb      	ittet	lt
 8008a9e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008aa2:	461d      	movlt	r5, r3
 8008aa4:	2300      	movge	r3, #0
 8008aa6:	232d      	movlt	r3, #45	; 0x2d
 8008aa8:	700b      	strb	r3, [r1, #0]
 8008aaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008aac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008ab0:	4691      	mov	r9, r2
 8008ab2:	f023 0820 	bic.w	r8, r3, #32
 8008ab6:	bfbc      	itt	lt
 8008ab8:	4622      	movlt	r2, r4
 8008aba:	4614      	movlt	r4, r2
 8008abc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008ac0:	d005      	beq.n	8008ace <__cvt+0x42>
 8008ac2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008ac6:	d100      	bne.n	8008aca <__cvt+0x3e>
 8008ac8:	3601      	adds	r6, #1
 8008aca:	2102      	movs	r1, #2
 8008acc:	e000      	b.n	8008ad0 <__cvt+0x44>
 8008ace:	2103      	movs	r1, #3
 8008ad0:	ab03      	add	r3, sp, #12
 8008ad2:	9301      	str	r3, [sp, #4]
 8008ad4:	ab02      	add	r3, sp, #8
 8008ad6:	9300      	str	r3, [sp, #0]
 8008ad8:	ec45 4b10 	vmov	d0, r4, r5
 8008adc:	4653      	mov	r3, sl
 8008ade:	4632      	mov	r2, r6
 8008ae0:	f000 fdba 	bl	8009658 <_dtoa_r>
 8008ae4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008ae8:	4607      	mov	r7, r0
 8008aea:	d102      	bne.n	8008af2 <__cvt+0x66>
 8008aec:	f019 0f01 	tst.w	r9, #1
 8008af0:	d022      	beq.n	8008b38 <__cvt+0xac>
 8008af2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008af6:	eb07 0906 	add.w	r9, r7, r6
 8008afa:	d110      	bne.n	8008b1e <__cvt+0x92>
 8008afc:	783b      	ldrb	r3, [r7, #0]
 8008afe:	2b30      	cmp	r3, #48	; 0x30
 8008b00:	d10a      	bne.n	8008b18 <__cvt+0x8c>
 8008b02:	2200      	movs	r2, #0
 8008b04:	2300      	movs	r3, #0
 8008b06:	4620      	mov	r0, r4
 8008b08:	4629      	mov	r1, r5
 8008b0a:	f7f7 ffdd 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b0e:	b918      	cbnz	r0, 8008b18 <__cvt+0x8c>
 8008b10:	f1c6 0601 	rsb	r6, r6, #1
 8008b14:	f8ca 6000 	str.w	r6, [sl]
 8008b18:	f8da 3000 	ldr.w	r3, [sl]
 8008b1c:	4499      	add	r9, r3
 8008b1e:	2200      	movs	r2, #0
 8008b20:	2300      	movs	r3, #0
 8008b22:	4620      	mov	r0, r4
 8008b24:	4629      	mov	r1, r5
 8008b26:	f7f7 ffcf 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b2a:	b108      	cbz	r0, 8008b30 <__cvt+0xa4>
 8008b2c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008b30:	2230      	movs	r2, #48	; 0x30
 8008b32:	9b03      	ldr	r3, [sp, #12]
 8008b34:	454b      	cmp	r3, r9
 8008b36:	d307      	bcc.n	8008b48 <__cvt+0xbc>
 8008b38:	9b03      	ldr	r3, [sp, #12]
 8008b3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b3c:	1bdb      	subs	r3, r3, r7
 8008b3e:	4638      	mov	r0, r7
 8008b40:	6013      	str	r3, [r2, #0]
 8008b42:	b004      	add	sp, #16
 8008b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b48:	1c59      	adds	r1, r3, #1
 8008b4a:	9103      	str	r1, [sp, #12]
 8008b4c:	701a      	strb	r2, [r3, #0]
 8008b4e:	e7f0      	b.n	8008b32 <__cvt+0xa6>

08008b50 <__exponent>:
 8008b50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b52:	4603      	mov	r3, r0
 8008b54:	2900      	cmp	r1, #0
 8008b56:	bfb8      	it	lt
 8008b58:	4249      	neglt	r1, r1
 8008b5a:	f803 2b02 	strb.w	r2, [r3], #2
 8008b5e:	bfb4      	ite	lt
 8008b60:	222d      	movlt	r2, #45	; 0x2d
 8008b62:	222b      	movge	r2, #43	; 0x2b
 8008b64:	2909      	cmp	r1, #9
 8008b66:	7042      	strb	r2, [r0, #1]
 8008b68:	dd2a      	ble.n	8008bc0 <__exponent+0x70>
 8008b6a:	f10d 0407 	add.w	r4, sp, #7
 8008b6e:	46a4      	mov	ip, r4
 8008b70:	270a      	movs	r7, #10
 8008b72:	46a6      	mov	lr, r4
 8008b74:	460a      	mov	r2, r1
 8008b76:	fb91 f6f7 	sdiv	r6, r1, r7
 8008b7a:	fb07 1516 	mls	r5, r7, r6, r1
 8008b7e:	3530      	adds	r5, #48	; 0x30
 8008b80:	2a63      	cmp	r2, #99	; 0x63
 8008b82:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8008b86:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008b8a:	4631      	mov	r1, r6
 8008b8c:	dcf1      	bgt.n	8008b72 <__exponent+0x22>
 8008b8e:	3130      	adds	r1, #48	; 0x30
 8008b90:	f1ae 0502 	sub.w	r5, lr, #2
 8008b94:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008b98:	1c44      	adds	r4, r0, #1
 8008b9a:	4629      	mov	r1, r5
 8008b9c:	4561      	cmp	r1, ip
 8008b9e:	d30a      	bcc.n	8008bb6 <__exponent+0x66>
 8008ba0:	f10d 0209 	add.w	r2, sp, #9
 8008ba4:	eba2 020e 	sub.w	r2, r2, lr
 8008ba8:	4565      	cmp	r5, ip
 8008baa:	bf88      	it	hi
 8008bac:	2200      	movhi	r2, #0
 8008bae:	4413      	add	r3, r2
 8008bb0:	1a18      	subs	r0, r3, r0
 8008bb2:	b003      	add	sp, #12
 8008bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008bba:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008bbe:	e7ed      	b.n	8008b9c <__exponent+0x4c>
 8008bc0:	2330      	movs	r3, #48	; 0x30
 8008bc2:	3130      	adds	r1, #48	; 0x30
 8008bc4:	7083      	strb	r3, [r0, #2]
 8008bc6:	70c1      	strb	r1, [r0, #3]
 8008bc8:	1d03      	adds	r3, r0, #4
 8008bca:	e7f1      	b.n	8008bb0 <__exponent+0x60>

08008bcc <_printf_float>:
 8008bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bd0:	ed2d 8b02 	vpush	{d8}
 8008bd4:	b08d      	sub	sp, #52	; 0x34
 8008bd6:	460c      	mov	r4, r1
 8008bd8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008bdc:	4616      	mov	r6, r2
 8008bde:	461f      	mov	r7, r3
 8008be0:	4605      	mov	r5, r0
 8008be2:	f001 fbfb 	bl	800a3dc <_localeconv_r>
 8008be6:	f8d0 a000 	ldr.w	sl, [r0]
 8008bea:	4650      	mov	r0, sl
 8008bec:	f7f7 faf0 	bl	80001d0 <strlen>
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	930a      	str	r3, [sp, #40]	; 0x28
 8008bf4:	6823      	ldr	r3, [r4, #0]
 8008bf6:	9305      	str	r3, [sp, #20]
 8008bf8:	f8d8 3000 	ldr.w	r3, [r8]
 8008bfc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008c00:	3307      	adds	r3, #7
 8008c02:	f023 0307 	bic.w	r3, r3, #7
 8008c06:	f103 0208 	add.w	r2, r3, #8
 8008c0a:	f8c8 2000 	str.w	r2, [r8]
 8008c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c12:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008c16:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008c1a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008c1e:	9307      	str	r3, [sp, #28]
 8008c20:	f8cd 8018 	str.w	r8, [sp, #24]
 8008c24:	ee08 0a10 	vmov	s16, r0
 8008c28:	4b9f      	ldr	r3, [pc, #636]	; (8008ea8 <_printf_float+0x2dc>)
 8008c2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c32:	f7f7 ff7b 	bl	8000b2c <__aeabi_dcmpun>
 8008c36:	bb88      	cbnz	r0, 8008c9c <_printf_float+0xd0>
 8008c38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c3c:	4b9a      	ldr	r3, [pc, #616]	; (8008ea8 <_printf_float+0x2dc>)
 8008c3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c42:	f7f7 ff55 	bl	8000af0 <__aeabi_dcmple>
 8008c46:	bb48      	cbnz	r0, 8008c9c <_printf_float+0xd0>
 8008c48:	2200      	movs	r2, #0
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	4640      	mov	r0, r8
 8008c4e:	4649      	mov	r1, r9
 8008c50:	f7f7 ff44 	bl	8000adc <__aeabi_dcmplt>
 8008c54:	b110      	cbz	r0, 8008c5c <_printf_float+0x90>
 8008c56:	232d      	movs	r3, #45	; 0x2d
 8008c58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c5c:	4b93      	ldr	r3, [pc, #588]	; (8008eac <_printf_float+0x2e0>)
 8008c5e:	4894      	ldr	r0, [pc, #592]	; (8008eb0 <_printf_float+0x2e4>)
 8008c60:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008c64:	bf94      	ite	ls
 8008c66:	4698      	movls	r8, r3
 8008c68:	4680      	movhi	r8, r0
 8008c6a:	2303      	movs	r3, #3
 8008c6c:	6123      	str	r3, [r4, #16]
 8008c6e:	9b05      	ldr	r3, [sp, #20]
 8008c70:	f023 0204 	bic.w	r2, r3, #4
 8008c74:	6022      	str	r2, [r4, #0]
 8008c76:	f04f 0900 	mov.w	r9, #0
 8008c7a:	9700      	str	r7, [sp, #0]
 8008c7c:	4633      	mov	r3, r6
 8008c7e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008c80:	4621      	mov	r1, r4
 8008c82:	4628      	mov	r0, r5
 8008c84:	f000 f9d8 	bl	8009038 <_printf_common>
 8008c88:	3001      	adds	r0, #1
 8008c8a:	f040 8090 	bne.w	8008dae <_printf_float+0x1e2>
 8008c8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c92:	b00d      	add	sp, #52	; 0x34
 8008c94:	ecbd 8b02 	vpop	{d8}
 8008c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c9c:	4642      	mov	r2, r8
 8008c9e:	464b      	mov	r3, r9
 8008ca0:	4640      	mov	r0, r8
 8008ca2:	4649      	mov	r1, r9
 8008ca4:	f7f7 ff42 	bl	8000b2c <__aeabi_dcmpun>
 8008ca8:	b140      	cbz	r0, 8008cbc <_printf_float+0xf0>
 8008caa:	464b      	mov	r3, r9
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	bfbc      	itt	lt
 8008cb0:	232d      	movlt	r3, #45	; 0x2d
 8008cb2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008cb6:	487f      	ldr	r0, [pc, #508]	; (8008eb4 <_printf_float+0x2e8>)
 8008cb8:	4b7f      	ldr	r3, [pc, #508]	; (8008eb8 <_printf_float+0x2ec>)
 8008cba:	e7d1      	b.n	8008c60 <_printf_float+0x94>
 8008cbc:	6863      	ldr	r3, [r4, #4]
 8008cbe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008cc2:	9206      	str	r2, [sp, #24]
 8008cc4:	1c5a      	adds	r2, r3, #1
 8008cc6:	d13f      	bne.n	8008d48 <_printf_float+0x17c>
 8008cc8:	2306      	movs	r3, #6
 8008cca:	6063      	str	r3, [r4, #4]
 8008ccc:	9b05      	ldr	r3, [sp, #20]
 8008cce:	6861      	ldr	r1, [r4, #4]
 8008cd0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	9303      	str	r3, [sp, #12]
 8008cd8:	ab0a      	add	r3, sp, #40	; 0x28
 8008cda:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008cde:	ab09      	add	r3, sp, #36	; 0x24
 8008ce0:	ec49 8b10 	vmov	d0, r8, r9
 8008ce4:	9300      	str	r3, [sp, #0]
 8008ce6:	6022      	str	r2, [r4, #0]
 8008ce8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008cec:	4628      	mov	r0, r5
 8008cee:	f7ff fecd 	bl	8008a8c <__cvt>
 8008cf2:	9b06      	ldr	r3, [sp, #24]
 8008cf4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008cf6:	2b47      	cmp	r3, #71	; 0x47
 8008cf8:	4680      	mov	r8, r0
 8008cfa:	d108      	bne.n	8008d0e <_printf_float+0x142>
 8008cfc:	1cc8      	adds	r0, r1, #3
 8008cfe:	db02      	blt.n	8008d06 <_printf_float+0x13a>
 8008d00:	6863      	ldr	r3, [r4, #4]
 8008d02:	4299      	cmp	r1, r3
 8008d04:	dd41      	ble.n	8008d8a <_printf_float+0x1be>
 8008d06:	f1ab 0b02 	sub.w	fp, fp, #2
 8008d0a:	fa5f fb8b 	uxtb.w	fp, fp
 8008d0e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008d12:	d820      	bhi.n	8008d56 <_printf_float+0x18a>
 8008d14:	3901      	subs	r1, #1
 8008d16:	465a      	mov	r2, fp
 8008d18:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008d1c:	9109      	str	r1, [sp, #36]	; 0x24
 8008d1e:	f7ff ff17 	bl	8008b50 <__exponent>
 8008d22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d24:	1813      	adds	r3, r2, r0
 8008d26:	2a01      	cmp	r2, #1
 8008d28:	4681      	mov	r9, r0
 8008d2a:	6123      	str	r3, [r4, #16]
 8008d2c:	dc02      	bgt.n	8008d34 <_printf_float+0x168>
 8008d2e:	6822      	ldr	r2, [r4, #0]
 8008d30:	07d2      	lsls	r2, r2, #31
 8008d32:	d501      	bpl.n	8008d38 <_printf_float+0x16c>
 8008d34:	3301      	adds	r3, #1
 8008d36:	6123      	str	r3, [r4, #16]
 8008d38:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d09c      	beq.n	8008c7a <_printf_float+0xae>
 8008d40:	232d      	movs	r3, #45	; 0x2d
 8008d42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d46:	e798      	b.n	8008c7a <_printf_float+0xae>
 8008d48:	9a06      	ldr	r2, [sp, #24]
 8008d4a:	2a47      	cmp	r2, #71	; 0x47
 8008d4c:	d1be      	bne.n	8008ccc <_printf_float+0x100>
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d1bc      	bne.n	8008ccc <_printf_float+0x100>
 8008d52:	2301      	movs	r3, #1
 8008d54:	e7b9      	b.n	8008cca <_printf_float+0xfe>
 8008d56:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008d5a:	d118      	bne.n	8008d8e <_printf_float+0x1c2>
 8008d5c:	2900      	cmp	r1, #0
 8008d5e:	6863      	ldr	r3, [r4, #4]
 8008d60:	dd0b      	ble.n	8008d7a <_printf_float+0x1ae>
 8008d62:	6121      	str	r1, [r4, #16]
 8008d64:	b913      	cbnz	r3, 8008d6c <_printf_float+0x1a0>
 8008d66:	6822      	ldr	r2, [r4, #0]
 8008d68:	07d0      	lsls	r0, r2, #31
 8008d6a:	d502      	bpl.n	8008d72 <_printf_float+0x1a6>
 8008d6c:	3301      	adds	r3, #1
 8008d6e:	440b      	add	r3, r1
 8008d70:	6123      	str	r3, [r4, #16]
 8008d72:	65a1      	str	r1, [r4, #88]	; 0x58
 8008d74:	f04f 0900 	mov.w	r9, #0
 8008d78:	e7de      	b.n	8008d38 <_printf_float+0x16c>
 8008d7a:	b913      	cbnz	r3, 8008d82 <_printf_float+0x1b6>
 8008d7c:	6822      	ldr	r2, [r4, #0]
 8008d7e:	07d2      	lsls	r2, r2, #31
 8008d80:	d501      	bpl.n	8008d86 <_printf_float+0x1ba>
 8008d82:	3302      	adds	r3, #2
 8008d84:	e7f4      	b.n	8008d70 <_printf_float+0x1a4>
 8008d86:	2301      	movs	r3, #1
 8008d88:	e7f2      	b.n	8008d70 <_printf_float+0x1a4>
 8008d8a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008d8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d90:	4299      	cmp	r1, r3
 8008d92:	db05      	blt.n	8008da0 <_printf_float+0x1d4>
 8008d94:	6823      	ldr	r3, [r4, #0]
 8008d96:	6121      	str	r1, [r4, #16]
 8008d98:	07d8      	lsls	r0, r3, #31
 8008d9a:	d5ea      	bpl.n	8008d72 <_printf_float+0x1a6>
 8008d9c:	1c4b      	adds	r3, r1, #1
 8008d9e:	e7e7      	b.n	8008d70 <_printf_float+0x1a4>
 8008da0:	2900      	cmp	r1, #0
 8008da2:	bfd4      	ite	le
 8008da4:	f1c1 0202 	rsble	r2, r1, #2
 8008da8:	2201      	movgt	r2, #1
 8008daa:	4413      	add	r3, r2
 8008dac:	e7e0      	b.n	8008d70 <_printf_float+0x1a4>
 8008dae:	6823      	ldr	r3, [r4, #0]
 8008db0:	055a      	lsls	r2, r3, #21
 8008db2:	d407      	bmi.n	8008dc4 <_printf_float+0x1f8>
 8008db4:	6923      	ldr	r3, [r4, #16]
 8008db6:	4642      	mov	r2, r8
 8008db8:	4631      	mov	r1, r6
 8008dba:	4628      	mov	r0, r5
 8008dbc:	47b8      	blx	r7
 8008dbe:	3001      	adds	r0, #1
 8008dc0:	d12c      	bne.n	8008e1c <_printf_float+0x250>
 8008dc2:	e764      	b.n	8008c8e <_printf_float+0xc2>
 8008dc4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008dc8:	f240 80e0 	bls.w	8008f8c <_printf_float+0x3c0>
 8008dcc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	f7f7 fe78 	bl	8000ac8 <__aeabi_dcmpeq>
 8008dd8:	2800      	cmp	r0, #0
 8008dda:	d034      	beq.n	8008e46 <_printf_float+0x27a>
 8008ddc:	4a37      	ldr	r2, [pc, #220]	; (8008ebc <_printf_float+0x2f0>)
 8008dde:	2301      	movs	r3, #1
 8008de0:	4631      	mov	r1, r6
 8008de2:	4628      	mov	r0, r5
 8008de4:	47b8      	blx	r7
 8008de6:	3001      	adds	r0, #1
 8008de8:	f43f af51 	beq.w	8008c8e <_printf_float+0xc2>
 8008dec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008df0:	429a      	cmp	r2, r3
 8008df2:	db02      	blt.n	8008dfa <_printf_float+0x22e>
 8008df4:	6823      	ldr	r3, [r4, #0]
 8008df6:	07d8      	lsls	r0, r3, #31
 8008df8:	d510      	bpl.n	8008e1c <_printf_float+0x250>
 8008dfa:	ee18 3a10 	vmov	r3, s16
 8008dfe:	4652      	mov	r2, sl
 8008e00:	4631      	mov	r1, r6
 8008e02:	4628      	mov	r0, r5
 8008e04:	47b8      	blx	r7
 8008e06:	3001      	adds	r0, #1
 8008e08:	f43f af41 	beq.w	8008c8e <_printf_float+0xc2>
 8008e0c:	f04f 0800 	mov.w	r8, #0
 8008e10:	f104 091a 	add.w	r9, r4, #26
 8008e14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e16:	3b01      	subs	r3, #1
 8008e18:	4543      	cmp	r3, r8
 8008e1a:	dc09      	bgt.n	8008e30 <_printf_float+0x264>
 8008e1c:	6823      	ldr	r3, [r4, #0]
 8008e1e:	079b      	lsls	r3, r3, #30
 8008e20:	f100 8105 	bmi.w	800902e <_printf_float+0x462>
 8008e24:	68e0      	ldr	r0, [r4, #12]
 8008e26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e28:	4298      	cmp	r0, r3
 8008e2a:	bfb8      	it	lt
 8008e2c:	4618      	movlt	r0, r3
 8008e2e:	e730      	b.n	8008c92 <_printf_float+0xc6>
 8008e30:	2301      	movs	r3, #1
 8008e32:	464a      	mov	r2, r9
 8008e34:	4631      	mov	r1, r6
 8008e36:	4628      	mov	r0, r5
 8008e38:	47b8      	blx	r7
 8008e3a:	3001      	adds	r0, #1
 8008e3c:	f43f af27 	beq.w	8008c8e <_printf_float+0xc2>
 8008e40:	f108 0801 	add.w	r8, r8, #1
 8008e44:	e7e6      	b.n	8008e14 <_printf_float+0x248>
 8008e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	dc39      	bgt.n	8008ec0 <_printf_float+0x2f4>
 8008e4c:	4a1b      	ldr	r2, [pc, #108]	; (8008ebc <_printf_float+0x2f0>)
 8008e4e:	2301      	movs	r3, #1
 8008e50:	4631      	mov	r1, r6
 8008e52:	4628      	mov	r0, r5
 8008e54:	47b8      	blx	r7
 8008e56:	3001      	adds	r0, #1
 8008e58:	f43f af19 	beq.w	8008c8e <_printf_float+0xc2>
 8008e5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e60:	4313      	orrs	r3, r2
 8008e62:	d102      	bne.n	8008e6a <_printf_float+0x29e>
 8008e64:	6823      	ldr	r3, [r4, #0]
 8008e66:	07d9      	lsls	r1, r3, #31
 8008e68:	d5d8      	bpl.n	8008e1c <_printf_float+0x250>
 8008e6a:	ee18 3a10 	vmov	r3, s16
 8008e6e:	4652      	mov	r2, sl
 8008e70:	4631      	mov	r1, r6
 8008e72:	4628      	mov	r0, r5
 8008e74:	47b8      	blx	r7
 8008e76:	3001      	adds	r0, #1
 8008e78:	f43f af09 	beq.w	8008c8e <_printf_float+0xc2>
 8008e7c:	f04f 0900 	mov.w	r9, #0
 8008e80:	f104 0a1a 	add.w	sl, r4, #26
 8008e84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e86:	425b      	negs	r3, r3
 8008e88:	454b      	cmp	r3, r9
 8008e8a:	dc01      	bgt.n	8008e90 <_printf_float+0x2c4>
 8008e8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e8e:	e792      	b.n	8008db6 <_printf_float+0x1ea>
 8008e90:	2301      	movs	r3, #1
 8008e92:	4652      	mov	r2, sl
 8008e94:	4631      	mov	r1, r6
 8008e96:	4628      	mov	r0, r5
 8008e98:	47b8      	blx	r7
 8008e9a:	3001      	adds	r0, #1
 8008e9c:	f43f aef7 	beq.w	8008c8e <_printf_float+0xc2>
 8008ea0:	f109 0901 	add.w	r9, r9, #1
 8008ea4:	e7ee      	b.n	8008e84 <_printf_float+0x2b8>
 8008ea6:	bf00      	nop
 8008ea8:	7fefffff 	.word	0x7fefffff
 8008eac:	0800be90 	.word	0x0800be90
 8008eb0:	0800be94 	.word	0x0800be94
 8008eb4:	0800be9c 	.word	0x0800be9c
 8008eb8:	0800be98 	.word	0x0800be98
 8008ebc:	0800bea0 	.word	0x0800bea0
 8008ec0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ec2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	bfa8      	it	ge
 8008ec8:	461a      	movge	r2, r3
 8008eca:	2a00      	cmp	r2, #0
 8008ecc:	4691      	mov	r9, r2
 8008ece:	dc37      	bgt.n	8008f40 <_printf_float+0x374>
 8008ed0:	f04f 0b00 	mov.w	fp, #0
 8008ed4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ed8:	f104 021a 	add.w	r2, r4, #26
 8008edc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008ede:	9305      	str	r3, [sp, #20]
 8008ee0:	eba3 0309 	sub.w	r3, r3, r9
 8008ee4:	455b      	cmp	r3, fp
 8008ee6:	dc33      	bgt.n	8008f50 <_printf_float+0x384>
 8008ee8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008eec:	429a      	cmp	r2, r3
 8008eee:	db3b      	blt.n	8008f68 <_printf_float+0x39c>
 8008ef0:	6823      	ldr	r3, [r4, #0]
 8008ef2:	07da      	lsls	r2, r3, #31
 8008ef4:	d438      	bmi.n	8008f68 <_printf_float+0x39c>
 8008ef6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ef8:	9a05      	ldr	r2, [sp, #20]
 8008efa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008efc:	1a9a      	subs	r2, r3, r2
 8008efe:	eba3 0901 	sub.w	r9, r3, r1
 8008f02:	4591      	cmp	r9, r2
 8008f04:	bfa8      	it	ge
 8008f06:	4691      	movge	r9, r2
 8008f08:	f1b9 0f00 	cmp.w	r9, #0
 8008f0c:	dc35      	bgt.n	8008f7a <_printf_float+0x3ae>
 8008f0e:	f04f 0800 	mov.w	r8, #0
 8008f12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f16:	f104 0a1a 	add.w	sl, r4, #26
 8008f1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f1e:	1a9b      	subs	r3, r3, r2
 8008f20:	eba3 0309 	sub.w	r3, r3, r9
 8008f24:	4543      	cmp	r3, r8
 8008f26:	f77f af79 	ble.w	8008e1c <_printf_float+0x250>
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	4652      	mov	r2, sl
 8008f2e:	4631      	mov	r1, r6
 8008f30:	4628      	mov	r0, r5
 8008f32:	47b8      	blx	r7
 8008f34:	3001      	adds	r0, #1
 8008f36:	f43f aeaa 	beq.w	8008c8e <_printf_float+0xc2>
 8008f3a:	f108 0801 	add.w	r8, r8, #1
 8008f3e:	e7ec      	b.n	8008f1a <_printf_float+0x34e>
 8008f40:	4613      	mov	r3, r2
 8008f42:	4631      	mov	r1, r6
 8008f44:	4642      	mov	r2, r8
 8008f46:	4628      	mov	r0, r5
 8008f48:	47b8      	blx	r7
 8008f4a:	3001      	adds	r0, #1
 8008f4c:	d1c0      	bne.n	8008ed0 <_printf_float+0x304>
 8008f4e:	e69e      	b.n	8008c8e <_printf_float+0xc2>
 8008f50:	2301      	movs	r3, #1
 8008f52:	4631      	mov	r1, r6
 8008f54:	4628      	mov	r0, r5
 8008f56:	9205      	str	r2, [sp, #20]
 8008f58:	47b8      	blx	r7
 8008f5a:	3001      	adds	r0, #1
 8008f5c:	f43f ae97 	beq.w	8008c8e <_printf_float+0xc2>
 8008f60:	9a05      	ldr	r2, [sp, #20]
 8008f62:	f10b 0b01 	add.w	fp, fp, #1
 8008f66:	e7b9      	b.n	8008edc <_printf_float+0x310>
 8008f68:	ee18 3a10 	vmov	r3, s16
 8008f6c:	4652      	mov	r2, sl
 8008f6e:	4631      	mov	r1, r6
 8008f70:	4628      	mov	r0, r5
 8008f72:	47b8      	blx	r7
 8008f74:	3001      	adds	r0, #1
 8008f76:	d1be      	bne.n	8008ef6 <_printf_float+0x32a>
 8008f78:	e689      	b.n	8008c8e <_printf_float+0xc2>
 8008f7a:	9a05      	ldr	r2, [sp, #20]
 8008f7c:	464b      	mov	r3, r9
 8008f7e:	4442      	add	r2, r8
 8008f80:	4631      	mov	r1, r6
 8008f82:	4628      	mov	r0, r5
 8008f84:	47b8      	blx	r7
 8008f86:	3001      	adds	r0, #1
 8008f88:	d1c1      	bne.n	8008f0e <_printf_float+0x342>
 8008f8a:	e680      	b.n	8008c8e <_printf_float+0xc2>
 8008f8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f8e:	2a01      	cmp	r2, #1
 8008f90:	dc01      	bgt.n	8008f96 <_printf_float+0x3ca>
 8008f92:	07db      	lsls	r3, r3, #31
 8008f94:	d538      	bpl.n	8009008 <_printf_float+0x43c>
 8008f96:	2301      	movs	r3, #1
 8008f98:	4642      	mov	r2, r8
 8008f9a:	4631      	mov	r1, r6
 8008f9c:	4628      	mov	r0, r5
 8008f9e:	47b8      	blx	r7
 8008fa0:	3001      	adds	r0, #1
 8008fa2:	f43f ae74 	beq.w	8008c8e <_printf_float+0xc2>
 8008fa6:	ee18 3a10 	vmov	r3, s16
 8008faa:	4652      	mov	r2, sl
 8008fac:	4631      	mov	r1, r6
 8008fae:	4628      	mov	r0, r5
 8008fb0:	47b8      	blx	r7
 8008fb2:	3001      	adds	r0, #1
 8008fb4:	f43f ae6b 	beq.w	8008c8e <_printf_float+0xc2>
 8008fb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	f7f7 fd82 	bl	8000ac8 <__aeabi_dcmpeq>
 8008fc4:	b9d8      	cbnz	r0, 8008ffe <_printf_float+0x432>
 8008fc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fc8:	f108 0201 	add.w	r2, r8, #1
 8008fcc:	3b01      	subs	r3, #1
 8008fce:	4631      	mov	r1, r6
 8008fd0:	4628      	mov	r0, r5
 8008fd2:	47b8      	blx	r7
 8008fd4:	3001      	adds	r0, #1
 8008fd6:	d10e      	bne.n	8008ff6 <_printf_float+0x42a>
 8008fd8:	e659      	b.n	8008c8e <_printf_float+0xc2>
 8008fda:	2301      	movs	r3, #1
 8008fdc:	4652      	mov	r2, sl
 8008fde:	4631      	mov	r1, r6
 8008fe0:	4628      	mov	r0, r5
 8008fe2:	47b8      	blx	r7
 8008fe4:	3001      	adds	r0, #1
 8008fe6:	f43f ae52 	beq.w	8008c8e <_printf_float+0xc2>
 8008fea:	f108 0801 	add.w	r8, r8, #1
 8008fee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ff0:	3b01      	subs	r3, #1
 8008ff2:	4543      	cmp	r3, r8
 8008ff4:	dcf1      	bgt.n	8008fda <_printf_float+0x40e>
 8008ff6:	464b      	mov	r3, r9
 8008ff8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008ffc:	e6dc      	b.n	8008db8 <_printf_float+0x1ec>
 8008ffe:	f04f 0800 	mov.w	r8, #0
 8009002:	f104 0a1a 	add.w	sl, r4, #26
 8009006:	e7f2      	b.n	8008fee <_printf_float+0x422>
 8009008:	2301      	movs	r3, #1
 800900a:	4642      	mov	r2, r8
 800900c:	e7df      	b.n	8008fce <_printf_float+0x402>
 800900e:	2301      	movs	r3, #1
 8009010:	464a      	mov	r2, r9
 8009012:	4631      	mov	r1, r6
 8009014:	4628      	mov	r0, r5
 8009016:	47b8      	blx	r7
 8009018:	3001      	adds	r0, #1
 800901a:	f43f ae38 	beq.w	8008c8e <_printf_float+0xc2>
 800901e:	f108 0801 	add.w	r8, r8, #1
 8009022:	68e3      	ldr	r3, [r4, #12]
 8009024:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009026:	1a5b      	subs	r3, r3, r1
 8009028:	4543      	cmp	r3, r8
 800902a:	dcf0      	bgt.n	800900e <_printf_float+0x442>
 800902c:	e6fa      	b.n	8008e24 <_printf_float+0x258>
 800902e:	f04f 0800 	mov.w	r8, #0
 8009032:	f104 0919 	add.w	r9, r4, #25
 8009036:	e7f4      	b.n	8009022 <_printf_float+0x456>

08009038 <_printf_common>:
 8009038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800903c:	4616      	mov	r6, r2
 800903e:	4699      	mov	r9, r3
 8009040:	688a      	ldr	r2, [r1, #8]
 8009042:	690b      	ldr	r3, [r1, #16]
 8009044:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009048:	4293      	cmp	r3, r2
 800904a:	bfb8      	it	lt
 800904c:	4613      	movlt	r3, r2
 800904e:	6033      	str	r3, [r6, #0]
 8009050:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009054:	4607      	mov	r7, r0
 8009056:	460c      	mov	r4, r1
 8009058:	b10a      	cbz	r2, 800905e <_printf_common+0x26>
 800905a:	3301      	adds	r3, #1
 800905c:	6033      	str	r3, [r6, #0]
 800905e:	6823      	ldr	r3, [r4, #0]
 8009060:	0699      	lsls	r1, r3, #26
 8009062:	bf42      	ittt	mi
 8009064:	6833      	ldrmi	r3, [r6, #0]
 8009066:	3302      	addmi	r3, #2
 8009068:	6033      	strmi	r3, [r6, #0]
 800906a:	6825      	ldr	r5, [r4, #0]
 800906c:	f015 0506 	ands.w	r5, r5, #6
 8009070:	d106      	bne.n	8009080 <_printf_common+0x48>
 8009072:	f104 0a19 	add.w	sl, r4, #25
 8009076:	68e3      	ldr	r3, [r4, #12]
 8009078:	6832      	ldr	r2, [r6, #0]
 800907a:	1a9b      	subs	r3, r3, r2
 800907c:	42ab      	cmp	r3, r5
 800907e:	dc26      	bgt.n	80090ce <_printf_common+0x96>
 8009080:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009084:	1e13      	subs	r3, r2, #0
 8009086:	6822      	ldr	r2, [r4, #0]
 8009088:	bf18      	it	ne
 800908a:	2301      	movne	r3, #1
 800908c:	0692      	lsls	r2, r2, #26
 800908e:	d42b      	bmi.n	80090e8 <_printf_common+0xb0>
 8009090:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009094:	4649      	mov	r1, r9
 8009096:	4638      	mov	r0, r7
 8009098:	47c0      	blx	r8
 800909a:	3001      	adds	r0, #1
 800909c:	d01e      	beq.n	80090dc <_printf_common+0xa4>
 800909e:	6823      	ldr	r3, [r4, #0]
 80090a0:	68e5      	ldr	r5, [r4, #12]
 80090a2:	6832      	ldr	r2, [r6, #0]
 80090a4:	f003 0306 	and.w	r3, r3, #6
 80090a8:	2b04      	cmp	r3, #4
 80090aa:	bf08      	it	eq
 80090ac:	1aad      	subeq	r5, r5, r2
 80090ae:	68a3      	ldr	r3, [r4, #8]
 80090b0:	6922      	ldr	r2, [r4, #16]
 80090b2:	bf0c      	ite	eq
 80090b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090b8:	2500      	movne	r5, #0
 80090ba:	4293      	cmp	r3, r2
 80090bc:	bfc4      	itt	gt
 80090be:	1a9b      	subgt	r3, r3, r2
 80090c0:	18ed      	addgt	r5, r5, r3
 80090c2:	2600      	movs	r6, #0
 80090c4:	341a      	adds	r4, #26
 80090c6:	42b5      	cmp	r5, r6
 80090c8:	d11a      	bne.n	8009100 <_printf_common+0xc8>
 80090ca:	2000      	movs	r0, #0
 80090cc:	e008      	b.n	80090e0 <_printf_common+0xa8>
 80090ce:	2301      	movs	r3, #1
 80090d0:	4652      	mov	r2, sl
 80090d2:	4649      	mov	r1, r9
 80090d4:	4638      	mov	r0, r7
 80090d6:	47c0      	blx	r8
 80090d8:	3001      	adds	r0, #1
 80090da:	d103      	bne.n	80090e4 <_printf_common+0xac>
 80090dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090e4:	3501      	adds	r5, #1
 80090e6:	e7c6      	b.n	8009076 <_printf_common+0x3e>
 80090e8:	18e1      	adds	r1, r4, r3
 80090ea:	1c5a      	adds	r2, r3, #1
 80090ec:	2030      	movs	r0, #48	; 0x30
 80090ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80090f2:	4422      	add	r2, r4
 80090f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80090f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80090fc:	3302      	adds	r3, #2
 80090fe:	e7c7      	b.n	8009090 <_printf_common+0x58>
 8009100:	2301      	movs	r3, #1
 8009102:	4622      	mov	r2, r4
 8009104:	4649      	mov	r1, r9
 8009106:	4638      	mov	r0, r7
 8009108:	47c0      	blx	r8
 800910a:	3001      	adds	r0, #1
 800910c:	d0e6      	beq.n	80090dc <_printf_common+0xa4>
 800910e:	3601      	adds	r6, #1
 8009110:	e7d9      	b.n	80090c6 <_printf_common+0x8e>
	...

08009114 <_printf_i>:
 8009114:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009118:	7e0f      	ldrb	r7, [r1, #24]
 800911a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800911c:	2f78      	cmp	r7, #120	; 0x78
 800911e:	4691      	mov	r9, r2
 8009120:	4680      	mov	r8, r0
 8009122:	460c      	mov	r4, r1
 8009124:	469a      	mov	sl, r3
 8009126:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800912a:	d807      	bhi.n	800913c <_printf_i+0x28>
 800912c:	2f62      	cmp	r7, #98	; 0x62
 800912e:	d80a      	bhi.n	8009146 <_printf_i+0x32>
 8009130:	2f00      	cmp	r7, #0
 8009132:	f000 80d8 	beq.w	80092e6 <_printf_i+0x1d2>
 8009136:	2f58      	cmp	r7, #88	; 0x58
 8009138:	f000 80a3 	beq.w	8009282 <_printf_i+0x16e>
 800913c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009140:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009144:	e03a      	b.n	80091bc <_printf_i+0xa8>
 8009146:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800914a:	2b15      	cmp	r3, #21
 800914c:	d8f6      	bhi.n	800913c <_printf_i+0x28>
 800914e:	a101      	add	r1, pc, #4	; (adr r1, 8009154 <_printf_i+0x40>)
 8009150:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009154:	080091ad 	.word	0x080091ad
 8009158:	080091c1 	.word	0x080091c1
 800915c:	0800913d 	.word	0x0800913d
 8009160:	0800913d 	.word	0x0800913d
 8009164:	0800913d 	.word	0x0800913d
 8009168:	0800913d 	.word	0x0800913d
 800916c:	080091c1 	.word	0x080091c1
 8009170:	0800913d 	.word	0x0800913d
 8009174:	0800913d 	.word	0x0800913d
 8009178:	0800913d 	.word	0x0800913d
 800917c:	0800913d 	.word	0x0800913d
 8009180:	080092cd 	.word	0x080092cd
 8009184:	080091f1 	.word	0x080091f1
 8009188:	080092af 	.word	0x080092af
 800918c:	0800913d 	.word	0x0800913d
 8009190:	0800913d 	.word	0x0800913d
 8009194:	080092ef 	.word	0x080092ef
 8009198:	0800913d 	.word	0x0800913d
 800919c:	080091f1 	.word	0x080091f1
 80091a0:	0800913d 	.word	0x0800913d
 80091a4:	0800913d 	.word	0x0800913d
 80091a8:	080092b7 	.word	0x080092b7
 80091ac:	682b      	ldr	r3, [r5, #0]
 80091ae:	1d1a      	adds	r2, r3, #4
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	602a      	str	r2, [r5, #0]
 80091b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80091b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80091bc:	2301      	movs	r3, #1
 80091be:	e0a3      	b.n	8009308 <_printf_i+0x1f4>
 80091c0:	6820      	ldr	r0, [r4, #0]
 80091c2:	6829      	ldr	r1, [r5, #0]
 80091c4:	0606      	lsls	r6, r0, #24
 80091c6:	f101 0304 	add.w	r3, r1, #4
 80091ca:	d50a      	bpl.n	80091e2 <_printf_i+0xce>
 80091cc:	680e      	ldr	r6, [r1, #0]
 80091ce:	602b      	str	r3, [r5, #0]
 80091d0:	2e00      	cmp	r6, #0
 80091d2:	da03      	bge.n	80091dc <_printf_i+0xc8>
 80091d4:	232d      	movs	r3, #45	; 0x2d
 80091d6:	4276      	negs	r6, r6
 80091d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091dc:	485e      	ldr	r0, [pc, #376]	; (8009358 <_printf_i+0x244>)
 80091de:	230a      	movs	r3, #10
 80091e0:	e019      	b.n	8009216 <_printf_i+0x102>
 80091e2:	680e      	ldr	r6, [r1, #0]
 80091e4:	602b      	str	r3, [r5, #0]
 80091e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80091ea:	bf18      	it	ne
 80091ec:	b236      	sxthne	r6, r6
 80091ee:	e7ef      	b.n	80091d0 <_printf_i+0xbc>
 80091f0:	682b      	ldr	r3, [r5, #0]
 80091f2:	6820      	ldr	r0, [r4, #0]
 80091f4:	1d19      	adds	r1, r3, #4
 80091f6:	6029      	str	r1, [r5, #0]
 80091f8:	0601      	lsls	r1, r0, #24
 80091fa:	d501      	bpl.n	8009200 <_printf_i+0xec>
 80091fc:	681e      	ldr	r6, [r3, #0]
 80091fe:	e002      	b.n	8009206 <_printf_i+0xf2>
 8009200:	0646      	lsls	r6, r0, #25
 8009202:	d5fb      	bpl.n	80091fc <_printf_i+0xe8>
 8009204:	881e      	ldrh	r6, [r3, #0]
 8009206:	4854      	ldr	r0, [pc, #336]	; (8009358 <_printf_i+0x244>)
 8009208:	2f6f      	cmp	r7, #111	; 0x6f
 800920a:	bf0c      	ite	eq
 800920c:	2308      	moveq	r3, #8
 800920e:	230a      	movne	r3, #10
 8009210:	2100      	movs	r1, #0
 8009212:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009216:	6865      	ldr	r5, [r4, #4]
 8009218:	60a5      	str	r5, [r4, #8]
 800921a:	2d00      	cmp	r5, #0
 800921c:	bfa2      	ittt	ge
 800921e:	6821      	ldrge	r1, [r4, #0]
 8009220:	f021 0104 	bicge.w	r1, r1, #4
 8009224:	6021      	strge	r1, [r4, #0]
 8009226:	b90e      	cbnz	r6, 800922c <_printf_i+0x118>
 8009228:	2d00      	cmp	r5, #0
 800922a:	d04d      	beq.n	80092c8 <_printf_i+0x1b4>
 800922c:	4615      	mov	r5, r2
 800922e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009232:	fb03 6711 	mls	r7, r3, r1, r6
 8009236:	5dc7      	ldrb	r7, [r0, r7]
 8009238:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800923c:	4637      	mov	r7, r6
 800923e:	42bb      	cmp	r3, r7
 8009240:	460e      	mov	r6, r1
 8009242:	d9f4      	bls.n	800922e <_printf_i+0x11a>
 8009244:	2b08      	cmp	r3, #8
 8009246:	d10b      	bne.n	8009260 <_printf_i+0x14c>
 8009248:	6823      	ldr	r3, [r4, #0]
 800924a:	07de      	lsls	r6, r3, #31
 800924c:	d508      	bpl.n	8009260 <_printf_i+0x14c>
 800924e:	6923      	ldr	r3, [r4, #16]
 8009250:	6861      	ldr	r1, [r4, #4]
 8009252:	4299      	cmp	r1, r3
 8009254:	bfde      	ittt	le
 8009256:	2330      	movle	r3, #48	; 0x30
 8009258:	f805 3c01 	strble.w	r3, [r5, #-1]
 800925c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009260:	1b52      	subs	r2, r2, r5
 8009262:	6122      	str	r2, [r4, #16]
 8009264:	f8cd a000 	str.w	sl, [sp]
 8009268:	464b      	mov	r3, r9
 800926a:	aa03      	add	r2, sp, #12
 800926c:	4621      	mov	r1, r4
 800926e:	4640      	mov	r0, r8
 8009270:	f7ff fee2 	bl	8009038 <_printf_common>
 8009274:	3001      	adds	r0, #1
 8009276:	d14c      	bne.n	8009312 <_printf_i+0x1fe>
 8009278:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800927c:	b004      	add	sp, #16
 800927e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009282:	4835      	ldr	r0, [pc, #212]	; (8009358 <_printf_i+0x244>)
 8009284:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009288:	6829      	ldr	r1, [r5, #0]
 800928a:	6823      	ldr	r3, [r4, #0]
 800928c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009290:	6029      	str	r1, [r5, #0]
 8009292:	061d      	lsls	r5, r3, #24
 8009294:	d514      	bpl.n	80092c0 <_printf_i+0x1ac>
 8009296:	07df      	lsls	r7, r3, #31
 8009298:	bf44      	itt	mi
 800929a:	f043 0320 	orrmi.w	r3, r3, #32
 800929e:	6023      	strmi	r3, [r4, #0]
 80092a0:	b91e      	cbnz	r6, 80092aa <_printf_i+0x196>
 80092a2:	6823      	ldr	r3, [r4, #0]
 80092a4:	f023 0320 	bic.w	r3, r3, #32
 80092a8:	6023      	str	r3, [r4, #0]
 80092aa:	2310      	movs	r3, #16
 80092ac:	e7b0      	b.n	8009210 <_printf_i+0xfc>
 80092ae:	6823      	ldr	r3, [r4, #0]
 80092b0:	f043 0320 	orr.w	r3, r3, #32
 80092b4:	6023      	str	r3, [r4, #0]
 80092b6:	2378      	movs	r3, #120	; 0x78
 80092b8:	4828      	ldr	r0, [pc, #160]	; (800935c <_printf_i+0x248>)
 80092ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80092be:	e7e3      	b.n	8009288 <_printf_i+0x174>
 80092c0:	0659      	lsls	r1, r3, #25
 80092c2:	bf48      	it	mi
 80092c4:	b2b6      	uxthmi	r6, r6
 80092c6:	e7e6      	b.n	8009296 <_printf_i+0x182>
 80092c8:	4615      	mov	r5, r2
 80092ca:	e7bb      	b.n	8009244 <_printf_i+0x130>
 80092cc:	682b      	ldr	r3, [r5, #0]
 80092ce:	6826      	ldr	r6, [r4, #0]
 80092d0:	6961      	ldr	r1, [r4, #20]
 80092d2:	1d18      	adds	r0, r3, #4
 80092d4:	6028      	str	r0, [r5, #0]
 80092d6:	0635      	lsls	r5, r6, #24
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	d501      	bpl.n	80092e0 <_printf_i+0x1cc>
 80092dc:	6019      	str	r1, [r3, #0]
 80092de:	e002      	b.n	80092e6 <_printf_i+0x1d2>
 80092e0:	0670      	lsls	r0, r6, #25
 80092e2:	d5fb      	bpl.n	80092dc <_printf_i+0x1c8>
 80092e4:	8019      	strh	r1, [r3, #0]
 80092e6:	2300      	movs	r3, #0
 80092e8:	6123      	str	r3, [r4, #16]
 80092ea:	4615      	mov	r5, r2
 80092ec:	e7ba      	b.n	8009264 <_printf_i+0x150>
 80092ee:	682b      	ldr	r3, [r5, #0]
 80092f0:	1d1a      	adds	r2, r3, #4
 80092f2:	602a      	str	r2, [r5, #0]
 80092f4:	681d      	ldr	r5, [r3, #0]
 80092f6:	6862      	ldr	r2, [r4, #4]
 80092f8:	2100      	movs	r1, #0
 80092fa:	4628      	mov	r0, r5
 80092fc:	f7f6 ff70 	bl	80001e0 <memchr>
 8009300:	b108      	cbz	r0, 8009306 <_printf_i+0x1f2>
 8009302:	1b40      	subs	r0, r0, r5
 8009304:	6060      	str	r0, [r4, #4]
 8009306:	6863      	ldr	r3, [r4, #4]
 8009308:	6123      	str	r3, [r4, #16]
 800930a:	2300      	movs	r3, #0
 800930c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009310:	e7a8      	b.n	8009264 <_printf_i+0x150>
 8009312:	6923      	ldr	r3, [r4, #16]
 8009314:	462a      	mov	r2, r5
 8009316:	4649      	mov	r1, r9
 8009318:	4640      	mov	r0, r8
 800931a:	47d0      	blx	sl
 800931c:	3001      	adds	r0, #1
 800931e:	d0ab      	beq.n	8009278 <_printf_i+0x164>
 8009320:	6823      	ldr	r3, [r4, #0]
 8009322:	079b      	lsls	r3, r3, #30
 8009324:	d413      	bmi.n	800934e <_printf_i+0x23a>
 8009326:	68e0      	ldr	r0, [r4, #12]
 8009328:	9b03      	ldr	r3, [sp, #12]
 800932a:	4298      	cmp	r0, r3
 800932c:	bfb8      	it	lt
 800932e:	4618      	movlt	r0, r3
 8009330:	e7a4      	b.n	800927c <_printf_i+0x168>
 8009332:	2301      	movs	r3, #1
 8009334:	4632      	mov	r2, r6
 8009336:	4649      	mov	r1, r9
 8009338:	4640      	mov	r0, r8
 800933a:	47d0      	blx	sl
 800933c:	3001      	adds	r0, #1
 800933e:	d09b      	beq.n	8009278 <_printf_i+0x164>
 8009340:	3501      	adds	r5, #1
 8009342:	68e3      	ldr	r3, [r4, #12]
 8009344:	9903      	ldr	r1, [sp, #12]
 8009346:	1a5b      	subs	r3, r3, r1
 8009348:	42ab      	cmp	r3, r5
 800934a:	dcf2      	bgt.n	8009332 <_printf_i+0x21e>
 800934c:	e7eb      	b.n	8009326 <_printf_i+0x212>
 800934e:	2500      	movs	r5, #0
 8009350:	f104 0619 	add.w	r6, r4, #25
 8009354:	e7f5      	b.n	8009342 <_printf_i+0x22e>
 8009356:	bf00      	nop
 8009358:	0800bea2 	.word	0x0800bea2
 800935c:	0800beb3 	.word	0x0800beb3

08009360 <cleanup_glue>:
 8009360:	b538      	push	{r3, r4, r5, lr}
 8009362:	460c      	mov	r4, r1
 8009364:	6809      	ldr	r1, [r1, #0]
 8009366:	4605      	mov	r5, r0
 8009368:	b109      	cbz	r1, 800936e <cleanup_glue+0xe>
 800936a:	f7ff fff9 	bl	8009360 <cleanup_glue>
 800936e:	4621      	mov	r1, r4
 8009370:	4628      	mov	r0, r5
 8009372:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009376:	f7ff baa9 	b.w	80088cc <_free_r>
	...

0800937c <_reclaim_reent>:
 800937c:	4b2c      	ldr	r3, [pc, #176]	; (8009430 <_reclaim_reent+0xb4>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4283      	cmp	r3, r0
 8009382:	b570      	push	{r4, r5, r6, lr}
 8009384:	4604      	mov	r4, r0
 8009386:	d051      	beq.n	800942c <_reclaim_reent+0xb0>
 8009388:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800938a:	b143      	cbz	r3, 800939e <_reclaim_reent+0x22>
 800938c:	68db      	ldr	r3, [r3, #12]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d14a      	bne.n	8009428 <_reclaim_reent+0xac>
 8009392:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009394:	6819      	ldr	r1, [r3, #0]
 8009396:	b111      	cbz	r1, 800939e <_reclaim_reent+0x22>
 8009398:	4620      	mov	r0, r4
 800939a:	f7ff fa97 	bl	80088cc <_free_r>
 800939e:	6961      	ldr	r1, [r4, #20]
 80093a0:	b111      	cbz	r1, 80093a8 <_reclaim_reent+0x2c>
 80093a2:	4620      	mov	r0, r4
 80093a4:	f7ff fa92 	bl	80088cc <_free_r>
 80093a8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80093aa:	b111      	cbz	r1, 80093b2 <_reclaim_reent+0x36>
 80093ac:	4620      	mov	r0, r4
 80093ae:	f7ff fa8d 	bl	80088cc <_free_r>
 80093b2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80093b4:	b111      	cbz	r1, 80093bc <_reclaim_reent+0x40>
 80093b6:	4620      	mov	r0, r4
 80093b8:	f7ff fa88 	bl	80088cc <_free_r>
 80093bc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80093be:	b111      	cbz	r1, 80093c6 <_reclaim_reent+0x4a>
 80093c0:	4620      	mov	r0, r4
 80093c2:	f7ff fa83 	bl	80088cc <_free_r>
 80093c6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80093c8:	b111      	cbz	r1, 80093d0 <_reclaim_reent+0x54>
 80093ca:	4620      	mov	r0, r4
 80093cc:	f7ff fa7e 	bl	80088cc <_free_r>
 80093d0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80093d2:	b111      	cbz	r1, 80093da <_reclaim_reent+0x5e>
 80093d4:	4620      	mov	r0, r4
 80093d6:	f7ff fa79 	bl	80088cc <_free_r>
 80093da:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80093dc:	b111      	cbz	r1, 80093e4 <_reclaim_reent+0x68>
 80093de:	4620      	mov	r0, r4
 80093e0:	f7ff fa74 	bl	80088cc <_free_r>
 80093e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093e6:	b111      	cbz	r1, 80093ee <_reclaim_reent+0x72>
 80093e8:	4620      	mov	r0, r4
 80093ea:	f7ff fa6f 	bl	80088cc <_free_r>
 80093ee:	69a3      	ldr	r3, [r4, #24]
 80093f0:	b1e3      	cbz	r3, 800942c <_reclaim_reent+0xb0>
 80093f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80093f4:	4620      	mov	r0, r4
 80093f6:	4798      	blx	r3
 80093f8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80093fa:	b1b9      	cbz	r1, 800942c <_reclaim_reent+0xb0>
 80093fc:	4620      	mov	r0, r4
 80093fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009402:	f7ff bfad 	b.w	8009360 <cleanup_glue>
 8009406:	5949      	ldr	r1, [r1, r5]
 8009408:	b941      	cbnz	r1, 800941c <_reclaim_reent+0xa0>
 800940a:	3504      	adds	r5, #4
 800940c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800940e:	2d80      	cmp	r5, #128	; 0x80
 8009410:	68d9      	ldr	r1, [r3, #12]
 8009412:	d1f8      	bne.n	8009406 <_reclaim_reent+0x8a>
 8009414:	4620      	mov	r0, r4
 8009416:	f7ff fa59 	bl	80088cc <_free_r>
 800941a:	e7ba      	b.n	8009392 <_reclaim_reent+0x16>
 800941c:	680e      	ldr	r6, [r1, #0]
 800941e:	4620      	mov	r0, r4
 8009420:	f7ff fa54 	bl	80088cc <_free_r>
 8009424:	4631      	mov	r1, r6
 8009426:	e7ef      	b.n	8009408 <_reclaim_reent+0x8c>
 8009428:	2500      	movs	r5, #0
 800942a:	e7ef      	b.n	800940c <_reclaim_reent+0x90>
 800942c:	bd70      	pop	{r4, r5, r6, pc}
 800942e:	bf00      	nop
 8009430:	200001ec 	.word	0x200001ec

08009434 <siprintf>:
 8009434:	b40e      	push	{r1, r2, r3}
 8009436:	b500      	push	{lr}
 8009438:	b09c      	sub	sp, #112	; 0x70
 800943a:	ab1d      	add	r3, sp, #116	; 0x74
 800943c:	9002      	str	r0, [sp, #8]
 800943e:	9006      	str	r0, [sp, #24]
 8009440:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009444:	4809      	ldr	r0, [pc, #36]	; (800946c <siprintf+0x38>)
 8009446:	9107      	str	r1, [sp, #28]
 8009448:	9104      	str	r1, [sp, #16]
 800944a:	4909      	ldr	r1, [pc, #36]	; (8009470 <siprintf+0x3c>)
 800944c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009450:	9105      	str	r1, [sp, #20]
 8009452:	6800      	ldr	r0, [r0, #0]
 8009454:	9301      	str	r3, [sp, #4]
 8009456:	a902      	add	r1, sp, #8
 8009458:	f001 fbcc 	bl	800abf4 <_svfiprintf_r>
 800945c:	9b02      	ldr	r3, [sp, #8]
 800945e:	2200      	movs	r2, #0
 8009460:	701a      	strb	r2, [r3, #0]
 8009462:	b01c      	add	sp, #112	; 0x70
 8009464:	f85d eb04 	ldr.w	lr, [sp], #4
 8009468:	b003      	add	sp, #12
 800946a:	4770      	bx	lr
 800946c:	200001ec 	.word	0x200001ec
 8009470:	ffff0208 	.word	0xffff0208

08009474 <__sread>:
 8009474:	b510      	push	{r4, lr}
 8009476:	460c      	mov	r4, r1
 8009478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800947c:	f001 fe14 	bl	800b0a8 <_read_r>
 8009480:	2800      	cmp	r0, #0
 8009482:	bfab      	itete	ge
 8009484:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009486:	89a3      	ldrhlt	r3, [r4, #12]
 8009488:	181b      	addge	r3, r3, r0
 800948a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800948e:	bfac      	ite	ge
 8009490:	6563      	strge	r3, [r4, #84]	; 0x54
 8009492:	81a3      	strhlt	r3, [r4, #12]
 8009494:	bd10      	pop	{r4, pc}

08009496 <__swrite>:
 8009496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800949a:	461f      	mov	r7, r3
 800949c:	898b      	ldrh	r3, [r1, #12]
 800949e:	05db      	lsls	r3, r3, #23
 80094a0:	4605      	mov	r5, r0
 80094a2:	460c      	mov	r4, r1
 80094a4:	4616      	mov	r6, r2
 80094a6:	d505      	bpl.n	80094b4 <__swrite+0x1e>
 80094a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094ac:	2302      	movs	r3, #2
 80094ae:	2200      	movs	r2, #0
 80094b0:	f000 ff98 	bl	800a3e4 <_lseek_r>
 80094b4:	89a3      	ldrh	r3, [r4, #12]
 80094b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094be:	81a3      	strh	r3, [r4, #12]
 80094c0:	4632      	mov	r2, r6
 80094c2:	463b      	mov	r3, r7
 80094c4:	4628      	mov	r0, r5
 80094c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094ca:	f000 b817 	b.w	80094fc <_write_r>

080094ce <__sseek>:
 80094ce:	b510      	push	{r4, lr}
 80094d0:	460c      	mov	r4, r1
 80094d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094d6:	f000 ff85 	bl	800a3e4 <_lseek_r>
 80094da:	1c43      	adds	r3, r0, #1
 80094dc:	89a3      	ldrh	r3, [r4, #12]
 80094de:	bf15      	itete	ne
 80094e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80094e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80094e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80094ea:	81a3      	strheq	r3, [r4, #12]
 80094ec:	bf18      	it	ne
 80094ee:	81a3      	strhne	r3, [r4, #12]
 80094f0:	bd10      	pop	{r4, pc}

080094f2 <__sclose>:
 80094f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094f6:	f000 b813 	b.w	8009520 <_close_r>
	...

080094fc <_write_r>:
 80094fc:	b538      	push	{r3, r4, r5, lr}
 80094fe:	4d07      	ldr	r5, [pc, #28]	; (800951c <_write_r+0x20>)
 8009500:	4604      	mov	r4, r0
 8009502:	4608      	mov	r0, r1
 8009504:	4611      	mov	r1, r2
 8009506:	2200      	movs	r2, #0
 8009508:	602a      	str	r2, [r5, #0]
 800950a:	461a      	mov	r2, r3
 800950c:	f7fa f969 	bl	80037e2 <_write>
 8009510:	1c43      	adds	r3, r0, #1
 8009512:	d102      	bne.n	800951a <_write_r+0x1e>
 8009514:	682b      	ldr	r3, [r5, #0]
 8009516:	b103      	cbz	r3, 800951a <_write_r+0x1e>
 8009518:	6023      	str	r3, [r4, #0]
 800951a:	bd38      	pop	{r3, r4, r5, pc}
 800951c:	20001514 	.word	0x20001514

08009520 <_close_r>:
 8009520:	b538      	push	{r3, r4, r5, lr}
 8009522:	4d06      	ldr	r5, [pc, #24]	; (800953c <_close_r+0x1c>)
 8009524:	2300      	movs	r3, #0
 8009526:	4604      	mov	r4, r0
 8009528:	4608      	mov	r0, r1
 800952a:	602b      	str	r3, [r5, #0]
 800952c:	f7fa f975 	bl	800381a <_close>
 8009530:	1c43      	adds	r3, r0, #1
 8009532:	d102      	bne.n	800953a <_close_r+0x1a>
 8009534:	682b      	ldr	r3, [r5, #0]
 8009536:	b103      	cbz	r3, 800953a <_close_r+0x1a>
 8009538:	6023      	str	r3, [r4, #0]
 800953a:	bd38      	pop	{r3, r4, r5, pc}
 800953c:	20001514 	.word	0x20001514

08009540 <quorem>:
 8009540:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009544:	6903      	ldr	r3, [r0, #16]
 8009546:	690c      	ldr	r4, [r1, #16]
 8009548:	42a3      	cmp	r3, r4
 800954a:	4607      	mov	r7, r0
 800954c:	f2c0 8081 	blt.w	8009652 <quorem+0x112>
 8009550:	3c01      	subs	r4, #1
 8009552:	f101 0814 	add.w	r8, r1, #20
 8009556:	f100 0514 	add.w	r5, r0, #20
 800955a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800955e:	9301      	str	r3, [sp, #4]
 8009560:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009564:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009568:	3301      	adds	r3, #1
 800956a:	429a      	cmp	r2, r3
 800956c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009570:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009574:	fbb2 f6f3 	udiv	r6, r2, r3
 8009578:	d331      	bcc.n	80095de <quorem+0x9e>
 800957a:	f04f 0e00 	mov.w	lr, #0
 800957e:	4640      	mov	r0, r8
 8009580:	46ac      	mov	ip, r5
 8009582:	46f2      	mov	sl, lr
 8009584:	f850 2b04 	ldr.w	r2, [r0], #4
 8009588:	b293      	uxth	r3, r2
 800958a:	fb06 e303 	mla	r3, r6, r3, lr
 800958e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009592:	b29b      	uxth	r3, r3
 8009594:	ebaa 0303 	sub.w	r3, sl, r3
 8009598:	f8dc a000 	ldr.w	sl, [ip]
 800959c:	0c12      	lsrs	r2, r2, #16
 800959e:	fa13 f38a 	uxtah	r3, r3, sl
 80095a2:	fb06 e202 	mla	r2, r6, r2, lr
 80095a6:	9300      	str	r3, [sp, #0]
 80095a8:	9b00      	ldr	r3, [sp, #0]
 80095aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80095ae:	b292      	uxth	r2, r2
 80095b0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80095b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80095b8:	f8bd 3000 	ldrh.w	r3, [sp]
 80095bc:	4581      	cmp	r9, r0
 80095be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80095c2:	f84c 3b04 	str.w	r3, [ip], #4
 80095c6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80095ca:	d2db      	bcs.n	8009584 <quorem+0x44>
 80095cc:	f855 300b 	ldr.w	r3, [r5, fp]
 80095d0:	b92b      	cbnz	r3, 80095de <quorem+0x9e>
 80095d2:	9b01      	ldr	r3, [sp, #4]
 80095d4:	3b04      	subs	r3, #4
 80095d6:	429d      	cmp	r5, r3
 80095d8:	461a      	mov	r2, r3
 80095da:	d32e      	bcc.n	800963a <quorem+0xfa>
 80095dc:	613c      	str	r4, [r7, #16]
 80095de:	4638      	mov	r0, r7
 80095e0:	f001 f994 	bl	800a90c <__mcmp>
 80095e4:	2800      	cmp	r0, #0
 80095e6:	db24      	blt.n	8009632 <quorem+0xf2>
 80095e8:	3601      	adds	r6, #1
 80095ea:	4628      	mov	r0, r5
 80095ec:	f04f 0c00 	mov.w	ip, #0
 80095f0:	f858 2b04 	ldr.w	r2, [r8], #4
 80095f4:	f8d0 e000 	ldr.w	lr, [r0]
 80095f8:	b293      	uxth	r3, r2
 80095fa:	ebac 0303 	sub.w	r3, ip, r3
 80095fe:	0c12      	lsrs	r2, r2, #16
 8009600:	fa13 f38e 	uxtah	r3, r3, lr
 8009604:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009608:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800960c:	b29b      	uxth	r3, r3
 800960e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009612:	45c1      	cmp	r9, r8
 8009614:	f840 3b04 	str.w	r3, [r0], #4
 8009618:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800961c:	d2e8      	bcs.n	80095f0 <quorem+0xb0>
 800961e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009622:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009626:	b922      	cbnz	r2, 8009632 <quorem+0xf2>
 8009628:	3b04      	subs	r3, #4
 800962a:	429d      	cmp	r5, r3
 800962c:	461a      	mov	r2, r3
 800962e:	d30a      	bcc.n	8009646 <quorem+0x106>
 8009630:	613c      	str	r4, [r7, #16]
 8009632:	4630      	mov	r0, r6
 8009634:	b003      	add	sp, #12
 8009636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800963a:	6812      	ldr	r2, [r2, #0]
 800963c:	3b04      	subs	r3, #4
 800963e:	2a00      	cmp	r2, #0
 8009640:	d1cc      	bne.n	80095dc <quorem+0x9c>
 8009642:	3c01      	subs	r4, #1
 8009644:	e7c7      	b.n	80095d6 <quorem+0x96>
 8009646:	6812      	ldr	r2, [r2, #0]
 8009648:	3b04      	subs	r3, #4
 800964a:	2a00      	cmp	r2, #0
 800964c:	d1f0      	bne.n	8009630 <quorem+0xf0>
 800964e:	3c01      	subs	r4, #1
 8009650:	e7eb      	b.n	800962a <quorem+0xea>
 8009652:	2000      	movs	r0, #0
 8009654:	e7ee      	b.n	8009634 <quorem+0xf4>
	...

08009658 <_dtoa_r>:
 8009658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800965c:	ed2d 8b04 	vpush	{d8-d9}
 8009660:	ec57 6b10 	vmov	r6, r7, d0
 8009664:	b093      	sub	sp, #76	; 0x4c
 8009666:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009668:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800966c:	9106      	str	r1, [sp, #24]
 800966e:	ee10 aa10 	vmov	sl, s0
 8009672:	4604      	mov	r4, r0
 8009674:	9209      	str	r2, [sp, #36]	; 0x24
 8009676:	930c      	str	r3, [sp, #48]	; 0x30
 8009678:	46bb      	mov	fp, r7
 800967a:	b975      	cbnz	r5, 800969a <_dtoa_r+0x42>
 800967c:	2010      	movs	r0, #16
 800967e:	f7ff f8ff 	bl	8008880 <malloc>
 8009682:	4602      	mov	r2, r0
 8009684:	6260      	str	r0, [r4, #36]	; 0x24
 8009686:	b920      	cbnz	r0, 8009692 <_dtoa_r+0x3a>
 8009688:	4ba7      	ldr	r3, [pc, #668]	; (8009928 <_dtoa_r+0x2d0>)
 800968a:	21ea      	movs	r1, #234	; 0xea
 800968c:	48a7      	ldr	r0, [pc, #668]	; (800992c <_dtoa_r+0x2d4>)
 800968e:	f001 fddd 	bl	800b24c <__assert_func>
 8009692:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009696:	6005      	str	r5, [r0, #0]
 8009698:	60c5      	str	r5, [r0, #12]
 800969a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800969c:	6819      	ldr	r1, [r3, #0]
 800969e:	b151      	cbz	r1, 80096b6 <_dtoa_r+0x5e>
 80096a0:	685a      	ldr	r2, [r3, #4]
 80096a2:	604a      	str	r2, [r1, #4]
 80096a4:	2301      	movs	r3, #1
 80096a6:	4093      	lsls	r3, r2
 80096a8:	608b      	str	r3, [r1, #8]
 80096aa:	4620      	mov	r0, r4
 80096ac:	f000 feec 	bl	800a488 <_Bfree>
 80096b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096b2:	2200      	movs	r2, #0
 80096b4:	601a      	str	r2, [r3, #0]
 80096b6:	1e3b      	subs	r3, r7, #0
 80096b8:	bfaa      	itet	ge
 80096ba:	2300      	movge	r3, #0
 80096bc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80096c0:	f8c8 3000 	strge.w	r3, [r8]
 80096c4:	4b9a      	ldr	r3, [pc, #616]	; (8009930 <_dtoa_r+0x2d8>)
 80096c6:	bfbc      	itt	lt
 80096c8:	2201      	movlt	r2, #1
 80096ca:	f8c8 2000 	strlt.w	r2, [r8]
 80096ce:	ea33 030b 	bics.w	r3, r3, fp
 80096d2:	d11b      	bne.n	800970c <_dtoa_r+0xb4>
 80096d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80096d6:	f242 730f 	movw	r3, #9999	; 0x270f
 80096da:	6013      	str	r3, [r2, #0]
 80096dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80096e0:	4333      	orrs	r3, r6
 80096e2:	f000 8592 	beq.w	800a20a <_dtoa_r+0xbb2>
 80096e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096e8:	b963      	cbnz	r3, 8009704 <_dtoa_r+0xac>
 80096ea:	4b92      	ldr	r3, [pc, #584]	; (8009934 <_dtoa_r+0x2dc>)
 80096ec:	e022      	b.n	8009734 <_dtoa_r+0xdc>
 80096ee:	4b92      	ldr	r3, [pc, #584]	; (8009938 <_dtoa_r+0x2e0>)
 80096f0:	9301      	str	r3, [sp, #4]
 80096f2:	3308      	adds	r3, #8
 80096f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80096f6:	6013      	str	r3, [r2, #0]
 80096f8:	9801      	ldr	r0, [sp, #4]
 80096fa:	b013      	add	sp, #76	; 0x4c
 80096fc:	ecbd 8b04 	vpop	{d8-d9}
 8009700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009704:	4b8b      	ldr	r3, [pc, #556]	; (8009934 <_dtoa_r+0x2dc>)
 8009706:	9301      	str	r3, [sp, #4]
 8009708:	3303      	adds	r3, #3
 800970a:	e7f3      	b.n	80096f4 <_dtoa_r+0x9c>
 800970c:	2200      	movs	r2, #0
 800970e:	2300      	movs	r3, #0
 8009710:	4650      	mov	r0, sl
 8009712:	4659      	mov	r1, fp
 8009714:	f7f7 f9d8 	bl	8000ac8 <__aeabi_dcmpeq>
 8009718:	ec4b ab19 	vmov	d9, sl, fp
 800971c:	4680      	mov	r8, r0
 800971e:	b158      	cbz	r0, 8009738 <_dtoa_r+0xe0>
 8009720:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009722:	2301      	movs	r3, #1
 8009724:	6013      	str	r3, [r2, #0]
 8009726:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009728:	2b00      	cmp	r3, #0
 800972a:	f000 856b 	beq.w	800a204 <_dtoa_r+0xbac>
 800972e:	4883      	ldr	r0, [pc, #524]	; (800993c <_dtoa_r+0x2e4>)
 8009730:	6018      	str	r0, [r3, #0]
 8009732:	1e43      	subs	r3, r0, #1
 8009734:	9301      	str	r3, [sp, #4]
 8009736:	e7df      	b.n	80096f8 <_dtoa_r+0xa0>
 8009738:	ec4b ab10 	vmov	d0, sl, fp
 800973c:	aa10      	add	r2, sp, #64	; 0x40
 800973e:	a911      	add	r1, sp, #68	; 0x44
 8009740:	4620      	mov	r0, r4
 8009742:	f001 f989 	bl	800aa58 <__d2b>
 8009746:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800974a:	ee08 0a10 	vmov	s16, r0
 800974e:	2d00      	cmp	r5, #0
 8009750:	f000 8084 	beq.w	800985c <_dtoa_r+0x204>
 8009754:	ee19 3a90 	vmov	r3, s19
 8009758:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800975c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009760:	4656      	mov	r6, sl
 8009762:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009766:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800976a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800976e:	4b74      	ldr	r3, [pc, #464]	; (8009940 <_dtoa_r+0x2e8>)
 8009770:	2200      	movs	r2, #0
 8009772:	4630      	mov	r0, r6
 8009774:	4639      	mov	r1, r7
 8009776:	f7f6 fd87 	bl	8000288 <__aeabi_dsub>
 800977a:	a365      	add	r3, pc, #404	; (adr r3, 8009910 <_dtoa_r+0x2b8>)
 800977c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009780:	f7f6 ff3a 	bl	80005f8 <__aeabi_dmul>
 8009784:	a364      	add	r3, pc, #400	; (adr r3, 8009918 <_dtoa_r+0x2c0>)
 8009786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800978a:	f7f6 fd7f 	bl	800028c <__adddf3>
 800978e:	4606      	mov	r6, r0
 8009790:	4628      	mov	r0, r5
 8009792:	460f      	mov	r7, r1
 8009794:	f7f6 fec6 	bl	8000524 <__aeabi_i2d>
 8009798:	a361      	add	r3, pc, #388	; (adr r3, 8009920 <_dtoa_r+0x2c8>)
 800979a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800979e:	f7f6 ff2b 	bl	80005f8 <__aeabi_dmul>
 80097a2:	4602      	mov	r2, r0
 80097a4:	460b      	mov	r3, r1
 80097a6:	4630      	mov	r0, r6
 80097a8:	4639      	mov	r1, r7
 80097aa:	f7f6 fd6f 	bl	800028c <__adddf3>
 80097ae:	4606      	mov	r6, r0
 80097b0:	460f      	mov	r7, r1
 80097b2:	f7f7 f9d1 	bl	8000b58 <__aeabi_d2iz>
 80097b6:	2200      	movs	r2, #0
 80097b8:	9000      	str	r0, [sp, #0]
 80097ba:	2300      	movs	r3, #0
 80097bc:	4630      	mov	r0, r6
 80097be:	4639      	mov	r1, r7
 80097c0:	f7f7 f98c 	bl	8000adc <__aeabi_dcmplt>
 80097c4:	b150      	cbz	r0, 80097dc <_dtoa_r+0x184>
 80097c6:	9800      	ldr	r0, [sp, #0]
 80097c8:	f7f6 feac 	bl	8000524 <__aeabi_i2d>
 80097cc:	4632      	mov	r2, r6
 80097ce:	463b      	mov	r3, r7
 80097d0:	f7f7 f97a 	bl	8000ac8 <__aeabi_dcmpeq>
 80097d4:	b910      	cbnz	r0, 80097dc <_dtoa_r+0x184>
 80097d6:	9b00      	ldr	r3, [sp, #0]
 80097d8:	3b01      	subs	r3, #1
 80097da:	9300      	str	r3, [sp, #0]
 80097dc:	9b00      	ldr	r3, [sp, #0]
 80097de:	2b16      	cmp	r3, #22
 80097e0:	d85a      	bhi.n	8009898 <_dtoa_r+0x240>
 80097e2:	9a00      	ldr	r2, [sp, #0]
 80097e4:	4b57      	ldr	r3, [pc, #348]	; (8009944 <_dtoa_r+0x2ec>)
 80097e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ee:	ec51 0b19 	vmov	r0, r1, d9
 80097f2:	f7f7 f973 	bl	8000adc <__aeabi_dcmplt>
 80097f6:	2800      	cmp	r0, #0
 80097f8:	d050      	beq.n	800989c <_dtoa_r+0x244>
 80097fa:	9b00      	ldr	r3, [sp, #0]
 80097fc:	3b01      	subs	r3, #1
 80097fe:	9300      	str	r3, [sp, #0]
 8009800:	2300      	movs	r3, #0
 8009802:	930b      	str	r3, [sp, #44]	; 0x2c
 8009804:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009806:	1b5d      	subs	r5, r3, r5
 8009808:	1e6b      	subs	r3, r5, #1
 800980a:	9305      	str	r3, [sp, #20]
 800980c:	bf45      	ittet	mi
 800980e:	f1c5 0301 	rsbmi	r3, r5, #1
 8009812:	9304      	strmi	r3, [sp, #16]
 8009814:	2300      	movpl	r3, #0
 8009816:	2300      	movmi	r3, #0
 8009818:	bf4c      	ite	mi
 800981a:	9305      	strmi	r3, [sp, #20]
 800981c:	9304      	strpl	r3, [sp, #16]
 800981e:	9b00      	ldr	r3, [sp, #0]
 8009820:	2b00      	cmp	r3, #0
 8009822:	db3d      	blt.n	80098a0 <_dtoa_r+0x248>
 8009824:	9b05      	ldr	r3, [sp, #20]
 8009826:	9a00      	ldr	r2, [sp, #0]
 8009828:	920a      	str	r2, [sp, #40]	; 0x28
 800982a:	4413      	add	r3, r2
 800982c:	9305      	str	r3, [sp, #20]
 800982e:	2300      	movs	r3, #0
 8009830:	9307      	str	r3, [sp, #28]
 8009832:	9b06      	ldr	r3, [sp, #24]
 8009834:	2b09      	cmp	r3, #9
 8009836:	f200 8089 	bhi.w	800994c <_dtoa_r+0x2f4>
 800983a:	2b05      	cmp	r3, #5
 800983c:	bfc4      	itt	gt
 800983e:	3b04      	subgt	r3, #4
 8009840:	9306      	strgt	r3, [sp, #24]
 8009842:	9b06      	ldr	r3, [sp, #24]
 8009844:	f1a3 0302 	sub.w	r3, r3, #2
 8009848:	bfcc      	ite	gt
 800984a:	2500      	movgt	r5, #0
 800984c:	2501      	movle	r5, #1
 800984e:	2b03      	cmp	r3, #3
 8009850:	f200 8087 	bhi.w	8009962 <_dtoa_r+0x30a>
 8009854:	e8df f003 	tbb	[pc, r3]
 8009858:	59383a2d 	.word	0x59383a2d
 800985c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009860:	441d      	add	r5, r3
 8009862:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009866:	2b20      	cmp	r3, #32
 8009868:	bfc1      	itttt	gt
 800986a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800986e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009872:	fa0b f303 	lslgt.w	r3, fp, r3
 8009876:	fa26 f000 	lsrgt.w	r0, r6, r0
 800987a:	bfda      	itte	le
 800987c:	f1c3 0320 	rsble	r3, r3, #32
 8009880:	fa06 f003 	lslle.w	r0, r6, r3
 8009884:	4318      	orrgt	r0, r3
 8009886:	f7f6 fe3d 	bl	8000504 <__aeabi_ui2d>
 800988a:	2301      	movs	r3, #1
 800988c:	4606      	mov	r6, r0
 800988e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009892:	3d01      	subs	r5, #1
 8009894:	930e      	str	r3, [sp, #56]	; 0x38
 8009896:	e76a      	b.n	800976e <_dtoa_r+0x116>
 8009898:	2301      	movs	r3, #1
 800989a:	e7b2      	b.n	8009802 <_dtoa_r+0x1aa>
 800989c:	900b      	str	r0, [sp, #44]	; 0x2c
 800989e:	e7b1      	b.n	8009804 <_dtoa_r+0x1ac>
 80098a0:	9b04      	ldr	r3, [sp, #16]
 80098a2:	9a00      	ldr	r2, [sp, #0]
 80098a4:	1a9b      	subs	r3, r3, r2
 80098a6:	9304      	str	r3, [sp, #16]
 80098a8:	4253      	negs	r3, r2
 80098aa:	9307      	str	r3, [sp, #28]
 80098ac:	2300      	movs	r3, #0
 80098ae:	930a      	str	r3, [sp, #40]	; 0x28
 80098b0:	e7bf      	b.n	8009832 <_dtoa_r+0x1da>
 80098b2:	2300      	movs	r3, #0
 80098b4:	9308      	str	r3, [sp, #32]
 80098b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	dc55      	bgt.n	8009968 <_dtoa_r+0x310>
 80098bc:	2301      	movs	r3, #1
 80098be:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80098c2:	461a      	mov	r2, r3
 80098c4:	9209      	str	r2, [sp, #36]	; 0x24
 80098c6:	e00c      	b.n	80098e2 <_dtoa_r+0x28a>
 80098c8:	2301      	movs	r3, #1
 80098ca:	e7f3      	b.n	80098b4 <_dtoa_r+0x25c>
 80098cc:	2300      	movs	r3, #0
 80098ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098d0:	9308      	str	r3, [sp, #32]
 80098d2:	9b00      	ldr	r3, [sp, #0]
 80098d4:	4413      	add	r3, r2
 80098d6:	9302      	str	r3, [sp, #8]
 80098d8:	3301      	adds	r3, #1
 80098da:	2b01      	cmp	r3, #1
 80098dc:	9303      	str	r3, [sp, #12]
 80098de:	bfb8      	it	lt
 80098e0:	2301      	movlt	r3, #1
 80098e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80098e4:	2200      	movs	r2, #0
 80098e6:	6042      	str	r2, [r0, #4]
 80098e8:	2204      	movs	r2, #4
 80098ea:	f102 0614 	add.w	r6, r2, #20
 80098ee:	429e      	cmp	r6, r3
 80098f0:	6841      	ldr	r1, [r0, #4]
 80098f2:	d93d      	bls.n	8009970 <_dtoa_r+0x318>
 80098f4:	4620      	mov	r0, r4
 80098f6:	f000 fd87 	bl	800a408 <_Balloc>
 80098fa:	9001      	str	r0, [sp, #4]
 80098fc:	2800      	cmp	r0, #0
 80098fe:	d13b      	bne.n	8009978 <_dtoa_r+0x320>
 8009900:	4b11      	ldr	r3, [pc, #68]	; (8009948 <_dtoa_r+0x2f0>)
 8009902:	4602      	mov	r2, r0
 8009904:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009908:	e6c0      	b.n	800968c <_dtoa_r+0x34>
 800990a:	2301      	movs	r3, #1
 800990c:	e7df      	b.n	80098ce <_dtoa_r+0x276>
 800990e:	bf00      	nop
 8009910:	636f4361 	.word	0x636f4361
 8009914:	3fd287a7 	.word	0x3fd287a7
 8009918:	8b60c8b3 	.word	0x8b60c8b3
 800991c:	3fc68a28 	.word	0x3fc68a28
 8009920:	509f79fb 	.word	0x509f79fb
 8009924:	3fd34413 	.word	0x3fd34413
 8009928:	0800bed1 	.word	0x0800bed1
 800992c:	0800bee8 	.word	0x0800bee8
 8009930:	7ff00000 	.word	0x7ff00000
 8009934:	0800becd 	.word	0x0800becd
 8009938:	0800bec4 	.word	0x0800bec4
 800993c:	0800bea1 	.word	0x0800bea1
 8009940:	3ff80000 	.word	0x3ff80000
 8009944:	0800bfd8 	.word	0x0800bfd8
 8009948:	0800bf43 	.word	0x0800bf43
 800994c:	2501      	movs	r5, #1
 800994e:	2300      	movs	r3, #0
 8009950:	9306      	str	r3, [sp, #24]
 8009952:	9508      	str	r5, [sp, #32]
 8009954:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009958:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800995c:	2200      	movs	r2, #0
 800995e:	2312      	movs	r3, #18
 8009960:	e7b0      	b.n	80098c4 <_dtoa_r+0x26c>
 8009962:	2301      	movs	r3, #1
 8009964:	9308      	str	r3, [sp, #32]
 8009966:	e7f5      	b.n	8009954 <_dtoa_r+0x2fc>
 8009968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800996a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800996e:	e7b8      	b.n	80098e2 <_dtoa_r+0x28a>
 8009970:	3101      	adds	r1, #1
 8009972:	6041      	str	r1, [r0, #4]
 8009974:	0052      	lsls	r2, r2, #1
 8009976:	e7b8      	b.n	80098ea <_dtoa_r+0x292>
 8009978:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800997a:	9a01      	ldr	r2, [sp, #4]
 800997c:	601a      	str	r2, [r3, #0]
 800997e:	9b03      	ldr	r3, [sp, #12]
 8009980:	2b0e      	cmp	r3, #14
 8009982:	f200 809d 	bhi.w	8009ac0 <_dtoa_r+0x468>
 8009986:	2d00      	cmp	r5, #0
 8009988:	f000 809a 	beq.w	8009ac0 <_dtoa_r+0x468>
 800998c:	9b00      	ldr	r3, [sp, #0]
 800998e:	2b00      	cmp	r3, #0
 8009990:	dd32      	ble.n	80099f8 <_dtoa_r+0x3a0>
 8009992:	4ab7      	ldr	r2, [pc, #732]	; (8009c70 <_dtoa_r+0x618>)
 8009994:	f003 030f 	and.w	r3, r3, #15
 8009998:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800999c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80099a0:	9b00      	ldr	r3, [sp, #0]
 80099a2:	05d8      	lsls	r0, r3, #23
 80099a4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80099a8:	d516      	bpl.n	80099d8 <_dtoa_r+0x380>
 80099aa:	4bb2      	ldr	r3, [pc, #712]	; (8009c74 <_dtoa_r+0x61c>)
 80099ac:	ec51 0b19 	vmov	r0, r1, d9
 80099b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80099b4:	f7f6 ff4a 	bl	800084c <__aeabi_ddiv>
 80099b8:	f007 070f 	and.w	r7, r7, #15
 80099bc:	4682      	mov	sl, r0
 80099be:	468b      	mov	fp, r1
 80099c0:	2503      	movs	r5, #3
 80099c2:	4eac      	ldr	r6, [pc, #688]	; (8009c74 <_dtoa_r+0x61c>)
 80099c4:	b957      	cbnz	r7, 80099dc <_dtoa_r+0x384>
 80099c6:	4642      	mov	r2, r8
 80099c8:	464b      	mov	r3, r9
 80099ca:	4650      	mov	r0, sl
 80099cc:	4659      	mov	r1, fp
 80099ce:	f7f6 ff3d 	bl	800084c <__aeabi_ddiv>
 80099d2:	4682      	mov	sl, r0
 80099d4:	468b      	mov	fp, r1
 80099d6:	e028      	b.n	8009a2a <_dtoa_r+0x3d2>
 80099d8:	2502      	movs	r5, #2
 80099da:	e7f2      	b.n	80099c2 <_dtoa_r+0x36a>
 80099dc:	07f9      	lsls	r1, r7, #31
 80099de:	d508      	bpl.n	80099f2 <_dtoa_r+0x39a>
 80099e0:	4640      	mov	r0, r8
 80099e2:	4649      	mov	r1, r9
 80099e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80099e8:	f7f6 fe06 	bl	80005f8 <__aeabi_dmul>
 80099ec:	3501      	adds	r5, #1
 80099ee:	4680      	mov	r8, r0
 80099f0:	4689      	mov	r9, r1
 80099f2:	107f      	asrs	r7, r7, #1
 80099f4:	3608      	adds	r6, #8
 80099f6:	e7e5      	b.n	80099c4 <_dtoa_r+0x36c>
 80099f8:	f000 809b 	beq.w	8009b32 <_dtoa_r+0x4da>
 80099fc:	9b00      	ldr	r3, [sp, #0]
 80099fe:	4f9d      	ldr	r7, [pc, #628]	; (8009c74 <_dtoa_r+0x61c>)
 8009a00:	425e      	negs	r6, r3
 8009a02:	4b9b      	ldr	r3, [pc, #620]	; (8009c70 <_dtoa_r+0x618>)
 8009a04:	f006 020f 	and.w	r2, r6, #15
 8009a08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a10:	ec51 0b19 	vmov	r0, r1, d9
 8009a14:	f7f6 fdf0 	bl	80005f8 <__aeabi_dmul>
 8009a18:	1136      	asrs	r6, r6, #4
 8009a1a:	4682      	mov	sl, r0
 8009a1c:	468b      	mov	fp, r1
 8009a1e:	2300      	movs	r3, #0
 8009a20:	2502      	movs	r5, #2
 8009a22:	2e00      	cmp	r6, #0
 8009a24:	d17a      	bne.n	8009b1c <_dtoa_r+0x4c4>
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d1d3      	bne.n	80099d2 <_dtoa_r+0x37a>
 8009a2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	f000 8082 	beq.w	8009b36 <_dtoa_r+0x4de>
 8009a32:	4b91      	ldr	r3, [pc, #580]	; (8009c78 <_dtoa_r+0x620>)
 8009a34:	2200      	movs	r2, #0
 8009a36:	4650      	mov	r0, sl
 8009a38:	4659      	mov	r1, fp
 8009a3a:	f7f7 f84f 	bl	8000adc <__aeabi_dcmplt>
 8009a3e:	2800      	cmp	r0, #0
 8009a40:	d079      	beq.n	8009b36 <_dtoa_r+0x4de>
 8009a42:	9b03      	ldr	r3, [sp, #12]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d076      	beq.n	8009b36 <_dtoa_r+0x4de>
 8009a48:	9b02      	ldr	r3, [sp, #8]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	dd36      	ble.n	8009abc <_dtoa_r+0x464>
 8009a4e:	9b00      	ldr	r3, [sp, #0]
 8009a50:	4650      	mov	r0, sl
 8009a52:	4659      	mov	r1, fp
 8009a54:	1e5f      	subs	r7, r3, #1
 8009a56:	2200      	movs	r2, #0
 8009a58:	4b88      	ldr	r3, [pc, #544]	; (8009c7c <_dtoa_r+0x624>)
 8009a5a:	f7f6 fdcd 	bl	80005f8 <__aeabi_dmul>
 8009a5e:	9e02      	ldr	r6, [sp, #8]
 8009a60:	4682      	mov	sl, r0
 8009a62:	468b      	mov	fp, r1
 8009a64:	3501      	adds	r5, #1
 8009a66:	4628      	mov	r0, r5
 8009a68:	f7f6 fd5c 	bl	8000524 <__aeabi_i2d>
 8009a6c:	4652      	mov	r2, sl
 8009a6e:	465b      	mov	r3, fp
 8009a70:	f7f6 fdc2 	bl	80005f8 <__aeabi_dmul>
 8009a74:	4b82      	ldr	r3, [pc, #520]	; (8009c80 <_dtoa_r+0x628>)
 8009a76:	2200      	movs	r2, #0
 8009a78:	f7f6 fc08 	bl	800028c <__adddf3>
 8009a7c:	46d0      	mov	r8, sl
 8009a7e:	46d9      	mov	r9, fp
 8009a80:	4682      	mov	sl, r0
 8009a82:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009a86:	2e00      	cmp	r6, #0
 8009a88:	d158      	bne.n	8009b3c <_dtoa_r+0x4e4>
 8009a8a:	4b7e      	ldr	r3, [pc, #504]	; (8009c84 <_dtoa_r+0x62c>)
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	4640      	mov	r0, r8
 8009a90:	4649      	mov	r1, r9
 8009a92:	f7f6 fbf9 	bl	8000288 <__aeabi_dsub>
 8009a96:	4652      	mov	r2, sl
 8009a98:	465b      	mov	r3, fp
 8009a9a:	4680      	mov	r8, r0
 8009a9c:	4689      	mov	r9, r1
 8009a9e:	f7f7 f83b 	bl	8000b18 <__aeabi_dcmpgt>
 8009aa2:	2800      	cmp	r0, #0
 8009aa4:	f040 8295 	bne.w	8009fd2 <_dtoa_r+0x97a>
 8009aa8:	4652      	mov	r2, sl
 8009aaa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009aae:	4640      	mov	r0, r8
 8009ab0:	4649      	mov	r1, r9
 8009ab2:	f7f7 f813 	bl	8000adc <__aeabi_dcmplt>
 8009ab6:	2800      	cmp	r0, #0
 8009ab8:	f040 8289 	bne.w	8009fce <_dtoa_r+0x976>
 8009abc:	ec5b ab19 	vmov	sl, fp, d9
 8009ac0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	f2c0 8148 	blt.w	8009d58 <_dtoa_r+0x700>
 8009ac8:	9a00      	ldr	r2, [sp, #0]
 8009aca:	2a0e      	cmp	r2, #14
 8009acc:	f300 8144 	bgt.w	8009d58 <_dtoa_r+0x700>
 8009ad0:	4b67      	ldr	r3, [pc, #412]	; (8009c70 <_dtoa_r+0x618>)
 8009ad2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ad6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009ada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	f280 80d5 	bge.w	8009c8c <_dtoa_r+0x634>
 8009ae2:	9b03      	ldr	r3, [sp, #12]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	f300 80d1 	bgt.w	8009c8c <_dtoa_r+0x634>
 8009aea:	f040 826f 	bne.w	8009fcc <_dtoa_r+0x974>
 8009aee:	4b65      	ldr	r3, [pc, #404]	; (8009c84 <_dtoa_r+0x62c>)
 8009af0:	2200      	movs	r2, #0
 8009af2:	4640      	mov	r0, r8
 8009af4:	4649      	mov	r1, r9
 8009af6:	f7f6 fd7f 	bl	80005f8 <__aeabi_dmul>
 8009afa:	4652      	mov	r2, sl
 8009afc:	465b      	mov	r3, fp
 8009afe:	f7f7 f801 	bl	8000b04 <__aeabi_dcmpge>
 8009b02:	9e03      	ldr	r6, [sp, #12]
 8009b04:	4637      	mov	r7, r6
 8009b06:	2800      	cmp	r0, #0
 8009b08:	f040 8245 	bne.w	8009f96 <_dtoa_r+0x93e>
 8009b0c:	9d01      	ldr	r5, [sp, #4]
 8009b0e:	2331      	movs	r3, #49	; 0x31
 8009b10:	f805 3b01 	strb.w	r3, [r5], #1
 8009b14:	9b00      	ldr	r3, [sp, #0]
 8009b16:	3301      	adds	r3, #1
 8009b18:	9300      	str	r3, [sp, #0]
 8009b1a:	e240      	b.n	8009f9e <_dtoa_r+0x946>
 8009b1c:	07f2      	lsls	r2, r6, #31
 8009b1e:	d505      	bpl.n	8009b2c <_dtoa_r+0x4d4>
 8009b20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b24:	f7f6 fd68 	bl	80005f8 <__aeabi_dmul>
 8009b28:	3501      	adds	r5, #1
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	1076      	asrs	r6, r6, #1
 8009b2e:	3708      	adds	r7, #8
 8009b30:	e777      	b.n	8009a22 <_dtoa_r+0x3ca>
 8009b32:	2502      	movs	r5, #2
 8009b34:	e779      	b.n	8009a2a <_dtoa_r+0x3d2>
 8009b36:	9f00      	ldr	r7, [sp, #0]
 8009b38:	9e03      	ldr	r6, [sp, #12]
 8009b3a:	e794      	b.n	8009a66 <_dtoa_r+0x40e>
 8009b3c:	9901      	ldr	r1, [sp, #4]
 8009b3e:	4b4c      	ldr	r3, [pc, #304]	; (8009c70 <_dtoa_r+0x618>)
 8009b40:	4431      	add	r1, r6
 8009b42:	910d      	str	r1, [sp, #52]	; 0x34
 8009b44:	9908      	ldr	r1, [sp, #32]
 8009b46:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009b4a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009b4e:	2900      	cmp	r1, #0
 8009b50:	d043      	beq.n	8009bda <_dtoa_r+0x582>
 8009b52:	494d      	ldr	r1, [pc, #308]	; (8009c88 <_dtoa_r+0x630>)
 8009b54:	2000      	movs	r0, #0
 8009b56:	f7f6 fe79 	bl	800084c <__aeabi_ddiv>
 8009b5a:	4652      	mov	r2, sl
 8009b5c:	465b      	mov	r3, fp
 8009b5e:	f7f6 fb93 	bl	8000288 <__aeabi_dsub>
 8009b62:	9d01      	ldr	r5, [sp, #4]
 8009b64:	4682      	mov	sl, r0
 8009b66:	468b      	mov	fp, r1
 8009b68:	4649      	mov	r1, r9
 8009b6a:	4640      	mov	r0, r8
 8009b6c:	f7f6 fff4 	bl	8000b58 <__aeabi_d2iz>
 8009b70:	4606      	mov	r6, r0
 8009b72:	f7f6 fcd7 	bl	8000524 <__aeabi_i2d>
 8009b76:	4602      	mov	r2, r0
 8009b78:	460b      	mov	r3, r1
 8009b7a:	4640      	mov	r0, r8
 8009b7c:	4649      	mov	r1, r9
 8009b7e:	f7f6 fb83 	bl	8000288 <__aeabi_dsub>
 8009b82:	3630      	adds	r6, #48	; 0x30
 8009b84:	f805 6b01 	strb.w	r6, [r5], #1
 8009b88:	4652      	mov	r2, sl
 8009b8a:	465b      	mov	r3, fp
 8009b8c:	4680      	mov	r8, r0
 8009b8e:	4689      	mov	r9, r1
 8009b90:	f7f6 ffa4 	bl	8000adc <__aeabi_dcmplt>
 8009b94:	2800      	cmp	r0, #0
 8009b96:	d163      	bne.n	8009c60 <_dtoa_r+0x608>
 8009b98:	4642      	mov	r2, r8
 8009b9a:	464b      	mov	r3, r9
 8009b9c:	4936      	ldr	r1, [pc, #216]	; (8009c78 <_dtoa_r+0x620>)
 8009b9e:	2000      	movs	r0, #0
 8009ba0:	f7f6 fb72 	bl	8000288 <__aeabi_dsub>
 8009ba4:	4652      	mov	r2, sl
 8009ba6:	465b      	mov	r3, fp
 8009ba8:	f7f6 ff98 	bl	8000adc <__aeabi_dcmplt>
 8009bac:	2800      	cmp	r0, #0
 8009bae:	f040 80b5 	bne.w	8009d1c <_dtoa_r+0x6c4>
 8009bb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009bb4:	429d      	cmp	r5, r3
 8009bb6:	d081      	beq.n	8009abc <_dtoa_r+0x464>
 8009bb8:	4b30      	ldr	r3, [pc, #192]	; (8009c7c <_dtoa_r+0x624>)
 8009bba:	2200      	movs	r2, #0
 8009bbc:	4650      	mov	r0, sl
 8009bbe:	4659      	mov	r1, fp
 8009bc0:	f7f6 fd1a 	bl	80005f8 <__aeabi_dmul>
 8009bc4:	4b2d      	ldr	r3, [pc, #180]	; (8009c7c <_dtoa_r+0x624>)
 8009bc6:	4682      	mov	sl, r0
 8009bc8:	468b      	mov	fp, r1
 8009bca:	4640      	mov	r0, r8
 8009bcc:	4649      	mov	r1, r9
 8009bce:	2200      	movs	r2, #0
 8009bd0:	f7f6 fd12 	bl	80005f8 <__aeabi_dmul>
 8009bd4:	4680      	mov	r8, r0
 8009bd6:	4689      	mov	r9, r1
 8009bd8:	e7c6      	b.n	8009b68 <_dtoa_r+0x510>
 8009bda:	4650      	mov	r0, sl
 8009bdc:	4659      	mov	r1, fp
 8009bde:	f7f6 fd0b 	bl	80005f8 <__aeabi_dmul>
 8009be2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009be4:	9d01      	ldr	r5, [sp, #4]
 8009be6:	930f      	str	r3, [sp, #60]	; 0x3c
 8009be8:	4682      	mov	sl, r0
 8009bea:	468b      	mov	fp, r1
 8009bec:	4649      	mov	r1, r9
 8009bee:	4640      	mov	r0, r8
 8009bf0:	f7f6 ffb2 	bl	8000b58 <__aeabi_d2iz>
 8009bf4:	4606      	mov	r6, r0
 8009bf6:	f7f6 fc95 	bl	8000524 <__aeabi_i2d>
 8009bfa:	3630      	adds	r6, #48	; 0x30
 8009bfc:	4602      	mov	r2, r0
 8009bfe:	460b      	mov	r3, r1
 8009c00:	4640      	mov	r0, r8
 8009c02:	4649      	mov	r1, r9
 8009c04:	f7f6 fb40 	bl	8000288 <__aeabi_dsub>
 8009c08:	f805 6b01 	strb.w	r6, [r5], #1
 8009c0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c0e:	429d      	cmp	r5, r3
 8009c10:	4680      	mov	r8, r0
 8009c12:	4689      	mov	r9, r1
 8009c14:	f04f 0200 	mov.w	r2, #0
 8009c18:	d124      	bne.n	8009c64 <_dtoa_r+0x60c>
 8009c1a:	4b1b      	ldr	r3, [pc, #108]	; (8009c88 <_dtoa_r+0x630>)
 8009c1c:	4650      	mov	r0, sl
 8009c1e:	4659      	mov	r1, fp
 8009c20:	f7f6 fb34 	bl	800028c <__adddf3>
 8009c24:	4602      	mov	r2, r0
 8009c26:	460b      	mov	r3, r1
 8009c28:	4640      	mov	r0, r8
 8009c2a:	4649      	mov	r1, r9
 8009c2c:	f7f6 ff74 	bl	8000b18 <__aeabi_dcmpgt>
 8009c30:	2800      	cmp	r0, #0
 8009c32:	d173      	bne.n	8009d1c <_dtoa_r+0x6c4>
 8009c34:	4652      	mov	r2, sl
 8009c36:	465b      	mov	r3, fp
 8009c38:	4913      	ldr	r1, [pc, #76]	; (8009c88 <_dtoa_r+0x630>)
 8009c3a:	2000      	movs	r0, #0
 8009c3c:	f7f6 fb24 	bl	8000288 <__aeabi_dsub>
 8009c40:	4602      	mov	r2, r0
 8009c42:	460b      	mov	r3, r1
 8009c44:	4640      	mov	r0, r8
 8009c46:	4649      	mov	r1, r9
 8009c48:	f7f6 ff48 	bl	8000adc <__aeabi_dcmplt>
 8009c4c:	2800      	cmp	r0, #0
 8009c4e:	f43f af35 	beq.w	8009abc <_dtoa_r+0x464>
 8009c52:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009c54:	1e6b      	subs	r3, r5, #1
 8009c56:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c58:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009c5c:	2b30      	cmp	r3, #48	; 0x30
 8009c5e:	d0f8      	beq.n	8009c52 <_dtoa_r+0x5fa>
 8009c60:	9700      	str	r7, [sp, #0]
 8009c62:	e049      	b.n	8009cf8 <_dtoa_r+0x6a0>
 8009c64:	4b05      	ldr	r3, [pc, #20]	; (8009c7c <_dtoa_r+0x624>)
 8009c66:	f7f6 fcc7 	bl	80005f8 <__aeabi_dmul>
 8009c6a:	4680      	mov	r8, r0
 8009c6c:	4689      	mov	r9, r1
 8009c6e:	e7bd      	b.n	8009bec <_dtoa_r+0x594>
 8009c70:	0800bfd8 	.word	0x0800bfd8
 8009c74:	0800bfb0 	.word	0x0800bfb0
 8009c78:	3ff00000 	.word	0x3ff00000
 8009c7c:	40240000 	.word	0x40240000
 8009c80:	401c0000 	.word	0x401c0000
 8009c84:	40140000 	.word	0x40140000
 8009c88:	3fe00000 	.word	0x3fe00000
 8009c8c:	9d01      	ldr	r5, [sp, #4]
 8009c8e:	4656      	mov	r6, sl
 8009c90:	465f      	mov	r7, fp
 8009c92:	4642      	mov	r2, r8
 8009c94:	464b      	mov	r3, r9
 8009c96:	4630      	mov	r0, r6
 8009c98:	4639      	mov	r1, r7
 8009c9a:	f7f6 fdd7 	bl	800084c <__aeabi_ddiv>
 8009c9e:	f7f6 ff5b 	bl	8000b58 <__aeabi_d2iz>
 8009ca2:	4682      	mov	sl, r0
 8009ca4:	f7f6 fc3e 	bl	8000524 <__aeabi_i2d>
 8009ca8:	4642      	mov	r2, r8
 8009caa:	464b      	mov	r3, r9
 8009cac:	f7f6 fca4 	bl	80005f8 <__aeabi_dmul>
 8009cb0:	4602      	mov	r2, r0
 8009cb2:	460b      	mov	r3, r1
 8009cb4:	4630      	mov	r0, r6
 8009cb6:	4639      	mov	r1, r7
 8009cb8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009cbc:	f7f6 fae4 	bl	8000288 <__aeabi_dsub>
 8009cc0:	f805 6b01 	strb.w	r6, [r5], #1
 8009cc4:	9e01      	ldr	r6, [sp, #4]
 8009cc6:	9f03      	ldr	r7, [sp, #12]
 8009cc8:	1bae      	subs	r6, r5, r6
 8009cca:	42b7      	cmp	r7, r6
 8009ccc:	4602      	mov	r2, r0
 8009cce:	460b      	mov	r3, r1
 8009cd0:	d135      	bne.n	8009d3e <_dtoa_r+0x6e6>
 8009cd2:	f7f6 fadb 	bl	800028c <__adddf3>
 8009cd6:	4642      	mov	r2, r8
 8009cd8:	464b      	mov	r3, r9
 8009cda:	4606      	mov	r6, r0
 8009cdc:	460f      	mov	r7, r1
 8009cde:	f7f6 ff1b 	bl	8000b18 <__aeabi_dcmpgt>
 8009ce2:	b9d0      	cbnz	r0, 8009d1a <_dtoa_r+0x6c2>
 8009ce4:	4642      	mov	r2, r8
 8009ce6:	464b      	mov	r3, r9
 8009ce8:	4630      	mov	r0, r6
 8009cea:	4639      	mov	r1, r7
 8009cec:	f7f6 feec 	bl	8000ac8 <__aeabi_dcmpeq>
 8009cf0:	b110      	cbz	r0, 8009cf8 <_dtoa_r+0x6a0>
 8009cf2:	f01a 0f01 	tst.w	sl, #1
 8009cf6:	d110      	bne.n	8009d1a <_dtoa_r+0x6c2>
 8009cf8:	4620      	mov	r0, r4
 8009cfa:	ee18 1a10 	vmov	r1, s16
 8009cfe:	f000 fbc3 	bl	800a488 <_Bfree>
 8009d02:	2300      	movs	r3, #0
 8009d04:	9800      	ldr	r0, [sp, #0]
 8009d06:	702b      	strb	r3, [r5, #0]
 8009d08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d0a:	3001      	adds	r0, #1
 8009d0c:	6018      	str	r0, [r3, #0]
 8009d0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	f43f acf1 	beq.w	80096f8 <_dtoa_r+0xa0>
 8009d16:	601d      	str	r5, [r3, #0]
 8009d18:	e4ee      	b.n	80096f8 <_dtoa_r+0xa0>
 8009d1a:	9f00      	ldr	r7, [sp, #0]
 8009d1c:	462b      	mov	r3, r5
 8009d1e:	461d      	mov	r5, r3
 8009d20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d24:	2a39      	cmp	r2, #57	; 0x39
 8009d26:	d106      	bne.n	8009d36 <_dtoa_r+0x6de>
 8009d28:	9a01      	ldr	r2, [sp, #4]
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	d1f7      	bne.n	8009d1e <_dtoa_r+0x6c6>
 8009d2e:	9901      	ldr	r1, [sp, #4]
 8009d30:	2230      	movs	r2, #48	; 0x30
 8009d32:	3701      	adds	r7, #1
 8009d34:	700a      	strb	r2, [r1, #0]
 8009d36:	781a      	ldrb	r2, [r3, #0]
 8009d38:	3201      	adds	r2, #1
 8009d3a:	701a      	strb	r2, [r3, #0]
 8009d3c:	e790      	b.n	8009c60 <_dtoa_r+0x608>
 8009d3e:	4ba6      	ldr	r3, [pc, #664]	; (8009fd8 <_dtoa_r+0x980>)
 8009d40:	2200      	movs	r2, #0
 8009d42:	f7f6 fc59 	bl	80005f8 <__aeabi_dmul>
 8009d46:	2200      	movs	r2, #0
 8009d48:	2300      	movs	r3, #0
 8009d4a:	4606      	mov	r6, r0
 8009d4c:	460f      	mov	r7, r1
 8009d4e:	f7f6 febb 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d52:	2800      	cmp	r0, #0
 8009d54:	d09d      	beq.n	8009c92 <_dtoa_r+0x63a>
 8009d56:	e7cf      	b.n	8009cf8 <_dtoa_r+0x6a0>
 8009d58:	9a08      	ldr	r2, [sp, #32]
 8009d5a:	2a00      	cmp	r2, #0
 8009d5c:	f000 80d7 	beq.w	8009f0e <_dtoa_r+0x8b6>
 8009d60:	9a06      	ldr	r2, [sp, #24]
 8009d62:	2a01      	cmp	r2, #1
 8009d64:	f300 80ba 	bgt.w	8009edc <_dtoa_r+0x884>
 8009d68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d6a:	2a00      	cmp	r2, #0
 8009d6c:	f000 80b2 	beq.w	8009ed4 <_dtoa_r+0x87c>
 8009d70:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009d74:	9e07      	ldr	r6, [sp, #28]
 8009d76:	9d04      	ldr	r5, [sp, #16]
 8009d78:	9a04      	ldr	r2, [sp, #16]
 8009d7a:	441a      	add	r2, r3
 8009d7c:	9204      	str	r2, [sp, #16]
 8009d7e:	9a05      	ldr	r2, [sp, #20]
 8009d80:	2101      	movs	r1, #1
 8009d82:	441a      	add	r2, r3
 8009d84:	4620      	mov	r0, r4
 8009d86:	9205      	str	r2, [sp, #20]
 8009d88:	f000 fc36 	bl	800a5f8 <__i2b>
 8009d8c:	4607      	mov	r7, r0
 8009d8e:	2d00      	cmp	r5, #0
 8009d90:	dd0c      	ble.n	8009dac <_dtoa_r+0x754>
 8009d92:	9b05      	ldr	r3, [sp, #20]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	dd09      	ble.n	8009dac <_dtoa_r+0x754>
 8009d98:	42ab      	cmp	r3, r5
 8009d9a:	9a04      	ldr	r2, [sp, #16]
 8009d9c:	bfa8      	it	ge
 8009d9e:	462b      	movge	r3, r5
 8009da0:	1ad2      	subs	r2, r2, r3
 8009da2:	9204      	str	r2, [sp, #16]
 8009da4:	9a05      	ldr	r2, [sp, #20]
 8009da6:	1aed      	subs	r5, r5, r3
 8009da8:	1ad3      	subs	r3, r2, r3
 8009daa:	9305      	str	r3, [sp, #20]
 8009dac:	9b07      	ldr	r3, [sp, #28]
 8009dae:	b31b      	cbz	r3, 8009df8 <_dtoa_r+0x7a0>
 8009db0:	9b08      	ldr	r3, [sp, #32]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	f000 80af 	beq.w	8009f16 <_dtoa_r+0x8be>
 8009db8:	2e00      	cmp	r6, #0
 8009dba:	dd13      	ble.n	8009de4 <_dtoa_r+0x78c>
 8009dbc:	4639      	mov	r1, r7
 8009dbe:	4632      	mov	r2, r6
 8009dc0:	4620      	mov	r0, r4
 8009dc2:	f000 fcd9 	bl	800a778 <__pow5mult>
 8009dc6:	ee18 2a10 	vmov	r2, s16
 8009dca:	4601      	mov	r1, r0
 8009dcc:	4607      	mov	r7, r0
 8009dce:	4620      	mov	r0, r4
 8009dd0:	f000 fc28 	bl	800a624 <__multiply>
 8009dd4:	ee18 1a10 	vmov	r1, s16
 8009dd8:	4680      	mov	r8, r0
 8009dda:	4620      	mov	r0, r4
 8009ddc:	f000 fb54 	bl	800a488 <_Bfree>
 8009de0:	ee08 8a10 	vmov	s16, r8
 8009de4:	9b07      	ldr	r3, [sp, #28]
 8009de6:	1b9a      	subs	r2, r3, r6
 8009de8:	d006      	beq.n	8009df8 <_dtoa_r+0x7a0>
 8009dea:	ee18 1a10 	vmov	r1, s16
 8009dee:	4620      	mov	r0, r4
 8009df0:	f000 fcc2 	bl	800a778 <__pow5mult>
 8009df4:	ee08 0a10 	vmov	s16, r0
 8009df8:	2101      	movs	r1, #1
 8009dfa:	4620      	mov	r0, r4
 8009dfc:	f000 fbfc 	bl	800a5f8 <__i2b>
 8009e00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	4606      	mov	r6, r0
 8009e06:	f340 8088 	ble.w	8009f1a <_dtoa_r+0x8c2>
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	4601      	mov	r1, r0
 8009e0e:	4620      	mov	r0, r4
 8009e10:	f000 fcb2 	bl	800a778 <__pow5mult>
 8009e14:	9b06      	ldr	r3, [sp, #24]
 8009e16:	2b01      	cmp	r3, #1
 8009e18:	4606      	mov	r6, r0
 8009e1a:	f340 8081 	ble.w	8009f20 <_dtoa_r+0x8c8>
 8009e1e:	f04f 0800 	mov.w	r8, #0
 8009e22:	6933      	ldr	r3, [r6, #16]
 8009e24:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009e28:	6918      	ldr	r0, [r3, #16]
 8009e2a:	f000 fb95 	bl	800a558 <__hi0bits>
 8009e2e:	f1c0 0020 	rsb	r0, r0, #32
 8009e32:	9b05      	ldr	r3, [sp, #20]
 8009e34:	4418      	add	r0, r3
 8009e36:	f010 001f 	ands.w	r0, r0, #31
 8009e3a:	f000 8092 	beq.w	8009f62 <_dtoa_r+0x90a>
 8009e3e:	f1c0 0320 	rsb	r3, r0, #32
 8009e42:	2b04      	cmp	r3, #4
 8009e44:	f340 808a 	ble.w	8009f5c <_dtoa_r+0x904>
 8009e48:	f1c0 001c 	rsb	r0, r0, #28
 8009e4c:	9b04      	ldr	r3, [sp, #16]
 8009e4e:	4403      	add	r3, r0
 8009e50:	9304      	str	r3, [sp, #16]
 8009e52:	9b05      	ldr	r3, [sp, #20]
 8009e54:	4403      	add	r3, r0
 8009e56:	4405      	add	r5, r0
 8009e58:	9305      	str	r3, [sp, #20]
 8009e5a:	9b04      	ldr	r3, [sp, #16]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	dd07      	ble.n	8009e70 <_dtoa_r+0x818>
 8009e60:	ee18 1a10 	vmov	r1, s16
 8009e64:	461a      	mov	r2, r3
 8009e66:	4620      	mov	r0, r4
 8009e68:	f000 fce0 	bl	800a82c <__lshift>
 8009e6c:	ee08 0a10 	vmov	s16, r0
 8009e70:	9b05      	ldr	r3, [sp, #20]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	dd05      	ble.n	8009e82 <_dtoa_r+0x82a>
 8009e76:	4631      	mov	r1, r6
 8009e78:	461a      	mov	r2, r3
 8009e7a:	4620      	mov	r0, r4
 8009e7c:	f000 fcd6 	bl	800a82c <__lshift>
 8009e80:	4606      	mov	r6, r0
 8009e82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d06e      	beq.n	8009f66 <_dtoa_r+0x90e>
 8009e88:	ee18 0a10 	vmov	r0, s16
 8009e8c:	4631      	mov	r1, r6
 8009e8e:	f000 fd3d 	bl	800a90c <__mcmp>
 8009e92:	2800      	cmp	r0, #0
 8009e94:	da67      	bge.n	8009f66 <_dtoa_r+0x90e>
 8009e96:	9b00      	ldr	r3, [sp, #0]
 8009e98:	3b01      	subs	r3, #1
 8009e9a:	ee18 1a10 	vmov	r1, s16
 8009e9e:	9300      	str	r3, [sp, #0]
 8009ea0:	220a      	movs	r2, #10
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	4620      	mov	r0, r4
 8009ea6:	f000 fb11 	bl	800a4cc <__multadd>
 8009eaa:	9b08      	ldr	r3, [sp, #32]
 8009eac:	ee08 0a10 	vmov	s16, r0
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	f000 81b1 	beq.w	800a218 <_dtoa_r+0xbc0>
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	4639      	mov	r1, r7
 8009eba:	220a      	movs	r2, #10
 8009ebc:	4620      	mov	r0, r4
 8009ebe:	f000 fb05 	bl	800a4cc <__multadd>
 8009ec2:	9b02      	ldr	r3, [sp, #8]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	4607      	mov	r7, r0
 8009ec8:	f300 808e 	bgt.w	8009fe8 <_dtoa_r+0x990>
 8009ecc:	9b06      	ldr	r3, [sp, #24]
 8009ece:	2b02      	cmp	r3, #2
 8009ed0:	dc51      	bgt.n	8009f76 <_dtoa_r+0x91e>
 8009ed2:	e089      	b.n	8009fe8 <_dtoa_r+0x990>
 8009ed4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009ed6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009eda:	e74b      	b.n	8009d74 <_dtoa_r+0x71c>
 8009edc:	9b03      	ldr	r3, [sp, #12]
 8009ede:	1e5e      	subs	r6, r3, #1
 8009ee0:	9b07      	ldr	r3, [sp, #28]
 8009ee2:	42b3      	cmp	r3, r6
 8009ee4:	bfbf      	itttt	lt
 8009ee6:	9b07      	ldrlt	r3, [sp, #28]
 8009ee8:	9607      	strlt	r6, [sp, #28]
 8009eea:	1af2      	sublt	r2, r6, r3
 8009eec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009eee:	bfb6      	itet	lt
 8009ef0:	189b      	addlt	r3, r3, r2
 8009ef2:	1b9e      	subge	r6, r3, r6
 8009ef4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009ef6:	9b03      	ldr	r3, [sp, #12]
 8009ef8:	bfb8      	it	lt
 8009efa:	2600      	movlt	r6, #0
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	bfb7      	itett	lt
 8009f00:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009f04:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009f08:	1a9d      	sublt	r5, r3, r2
 8009f0a:	2300      	movlt	r3, #0
 8009f0c:	e734      	b.n	8009d78 <_dtoa_r+0x720>
 8009f0e:	9e07      	ldr	r6, [sp, #28]
 8009f10:	9d04      	ldr	r5, [sp, #16]
 8009f12:	9f08      	ldr	r7, [sp, #32]
 8009f14:	e73b      	b.n	8009d8e <_dtoa_r+0x736>
 8009f16:	9a07      	ldr	r2, [sp, #28]
 8009f18:	e767      	b.n	8009dea <_dtoa_r+0x792>
 8009f1a:	9b06      	ldr	r3, [sp, #24]
 8009f1c:	2b01      	cmp	r3, #1
 8009f1e:	dc18      	bgt.n	8009f52 <_dtoa_r+0x8fa>
 8009f20:	f1ba 0f00 	cmp.w	sl, #0
 8009f24:	d115      	bne.n	8009f52 <_dtoa_r+0x8fa>
 8009f26:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009f2a:	b993      	cbnz	r3, 8009f52 <_dtoa_r+0x8fa>
 8009f2c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009f30:	0d1b      	lsrs	r3, r3, #20
 8009f32:	051b      	lsls	r3, r3, #20
 8009f34:	b183      	cbz	r3, 8009f58 <_dtoa_r+0x900>
 8009f36:	9b04      	ldr	r3, [sp, #16]
 8009f38:	3301      	adds	r3, #1
 8009f3a:	9304      	str	r3, [sp, #16]
 8009f3c:	9b05      	ldr	r3, [sp, #20]
 8009f3e:	3301      	adds	r3, #1
 8009f40:	9305      	str	r3, [sp, #20]
 8009f42:	f04f 0801 	mov.w	r8, #1
 8009f46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	f47f af6a 	bne.w	8009e22 <_dtoa_r+0x7ca>
 8009f4e:	2001      	movs	r0, #1
 8009f50:	e76f      	b.n	8009e32 <_dtoa_r+0x7da>
 8009f52:	f04f 0800 	mov.w	r8, #0
 8009f56:	e7f6      	b.n	8009f46 <_dtoa_r+0x8ee>
 8009f58:	4698      	mov	r8, r3
 8009f5a:	e7f4      	b.n	8009f46 <_dtoa_r+0x8ee>
 8009f5c:	f43f af7d 	beq.w	8009e5a <_dtoa_r+0x802>
 8009f60:	4618      	mov	r0, r3
 8009f62:	301c      	adds	r0, #28
 8009f64:	e772      	b.n	8009e4c <_dtoa_r+0x7f4>
 8009f66:	9b03      	ldr	r3, [sp, #12]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	dc37      	bgt.n	8009fdc <_dtoa_r+0x984>
 8009f6c:	9b06      	ldr	r3, [sp, #24]
 8009f6e:	2b02      	cmp	r3, #2
 8009f70:	dd34      	ble.n	8009fdc <_dtoa_r+0x984>
 8009f72:	9b03      	ldr	r3, [sp, #12]
 8009f74:	9302      	str	r3, [sp, #8]
 8009f76:	9b02      	ldr	r3, [sp, #8]
 8009f78:	b96b      	cbnz	r3, 8009f96 <_dtoa_r+0x93e>
 8009f7a:	4631      	mov	r1, r6
 8009f7c:	2205      	movs	r2, #5
 8009f7e:	4620      	mov	r0, r4
 8009f80:	f000 faa4 	bl	800a4cc <__multadd>
 8009f84:	4601      	mov	r1, r0
 8009f86:	4606      	mov	r6, r0
 8009f88:	ee18 0a10 	vmov	r0, s16
 8009f8c:	f000 fcbe 	bl	800a90c <__mcmp>
 8009f90:	2800      	cmp	r0, #0
 8009f92:	f73f adbb 	bgt.w	8009b0c <_dtoa_r+0x4b4>
 8009f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f98:	9d01      	ldr	r5, [sp, #4]
 8009f9a:	43db      	mvns	r3, r3
 8009f9c:	9300      	str	r3, [sp, #0]
 8009f9e:	f04f 0800 	mov.w	r8, #0
 8009fa2:	4631      	mov	r1, r6
 8009fa4:	4620      	mov	r0, r4
 8009fa6:	f000 fa6f 	bl	800a488 <_Bfree>
 8009faa:	2f00      	cmp	r7, #0
 8009fac:	f43f aea4 	beq.w	8009cf8 <_dtoa_r+0x6a0>
 8009fb0:	f1b8 0f00 	cmp.w	r8, #0
 8009fb4:	d005      	beq.n	8009fc2 <_dtoa_r+0x96a>
 8009fb6:	45b8      	cmp	r8, r7
 8009fb8:	d003      	beq.n	8009fc2 <_dtoa_r+0x96a>
 8009fba:	4641      	mov	r1, r8
 8009fbc:	4620      	mov	r0, r4
 8009fbe:	f000 fa63 	bl	800a488 <_Bfree>
 8009fc2:	4639      	mov	r1, r7
 8009fc4:	4620      	mov	r0, r4
 8009fc6:	f000 fa5f 	bl	800a488 <_Bfree>
 8009fca:	e695      	b.n	8009cf8 <_dtoa_r+0x6a0>
 8009fcc:	2600      	movs	r6, #0
 8009fce:	4637      	mov	r7, r6
 8009fd0:	e7e1      	b.n	8009f96 <_dtoa_r+0x93e>
 8009fd2:	9700      	str	r7, [sp, #0]
 8009fd4:	4637      	mov	r7, r6
 8009fd6:	e599      	b.n	8009b0c <_dtoa_r+0x4b4>
 8009fd8:	40240000 	.word	0x40240000
 8009fdc:	9b08      	ldr	r3, [sp, #32]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	f000 80ca 	beq.w	800a178 <_dtoa_r+0xb20>
 8009fe4:	9b03      	ldr	r3, [sp, #12]
 8009fe6:	9302      	str	r3, [sp, #8]
 8009fe8:	2d00      	cmp	r5, #0
 8009fea:	dd05      	ble.n	8009ff8 <_dtoa_r+0x9a0>
 8009fec:	4639      	mov	r1, r7
 8009fee:	462a      	mov	r2, r5
 8009ff0:	4620      	mov	r0, r4
 8009ff2:	f000 fc1b 	bl	800a82c <__lshift>
 8009ff6:	4607      	mov	r7, r0
 8009ff8:	f1b8 0f00 	cmp.w	r8, #0
 8009ffc:	d05b      	beq.n	800a0b6 <_dtoa_r+0xa5e>
 8009ffe:	6879      	ldr	r1, [r7, #4]
 800a000:	4620      	mov	r0, r4
 800a002:	f000 fa01 	bl	800a408 <_Balloc>
 800a006:	4605      	mov	r5, r0
 800a008:	b928      	cbnz	r0, 800a016 <_dtoa_r+0x9be>
 800a00a:	4b87      	ldr	r3, [pc, #540]	; (800a228 <_dtoa_r+0xbd0>)
 800a00c:	4602      	mov	r2, r0
 800a00e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a012:	f7ff bb3b 	b.w	800968c <_dtoa_r+0x34>
 800a016:	693a      	ldr	r2, [r7, #16]
 800a018:	3202      	adds	r2, #2
 800a01a:	0092      	lsls	r2, r2, #2
 800a01c:	f107 010c 	add.w	r1, r7, #12
 800a020:	300c      	adds	r0, #12
 800a022:	f7fe fc3d 	bl	80088a0 <memcpy>
 800a026:	2201      	movs	r2, #1
 800a028:	4629      	mov	r1, r5
 800a02a:	4620      	mov	r0, r4
 800a02c:	f000 fbfe 	bl	800a82c <__lshift>
 800a030:	9b01      	ldr	r3, [sp, #4]
 800a032:	f103 0901 	add.w	r9, r3, #1
 800a036:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a03a:	4413      	add	r3, r2
 800a03c:	9305      	str	r3, [sp, #20]
 800a03e:	f00a 0301 	and.w	r3, sl, #1
 800a042:	46b8      	mov	r8, r7
 800a044:	9304      	str	r3, [sp, #16]
 800a046:	4607      	mov	r7, r0
 800a048:	4631      	mov	r1, r6
 800a04a:	ee18 0a10 	vmov	r0, s16
 800a04e:	f7ff fa77 	bl	8009540 <quorem>
 800a052:	4641      	mov	r1, r8
 800a054:	9002      	str	r0, [sp, #8]
 800a056:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a05a:	ee18 0a10 	vmov	r0, s16
 800a05e:	f000 fc55 	bl	800a90c <__mcmp>
 800a062:	463a      	mov	r2, r7
 800a064:	9003      	str	r0, [sp, #12]
 800a066:	4631      	mov	r1, r6
 800a068:	4620      	mov	r0, r4
 800a06a:	f000 fc6b 	bl	800a944 <__mdiff>
 800a06e:	68c2      	ldr	r2, [r0, #12]
 800a070:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800a074:	4605      	mov	r5, r0
 800a076:	bb02      	cbnz	r2, 800a0ba <_dtoa_r+0xa62>
 800a078:	4601      	mov	r1, r0
 800a07a:	ee18 0a10 	vmov	r0, s16
 800a07e:	f000 fc45 	bl	800a90c <__mcmp>
 800a082:	4602      	mov	r2, r0
 800a084:	4629      	mov	r1, r5
 800a086:	4620      	mov	r0, r4
 800a088:	9207      	str	r2, [sp, #28]
 800a08a:	f000 f9fd 	bl	800a488 <_Bfree>
 800a08e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a092:	ea43 0102 	orr.w	r1, r3, r2
 800a096:	9b04      	ldr	r3, [sp, #16]
 800a098:	430b      	orrs	r3, r1
 800a09a:	464d      	mov	r5, r9
 800a09c:	d10f      	bne.n	800a0be <_dtoa_r+0xa66>
 800a09e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a0a2:	d02a      	beq.n	800a0fa <_dtoa_r+0xaa2>
 800a0a4:	9b03      	ldr	r3, [sp, #12]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	dd02      	ble.n	800a0b0 <_dtoa_r+0xa58>
 800a0aa:	9b02      	ldr	r3, [sp, #8]
 800a0ac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a0b0:	f88b a000 	strb.w	sl, [fp]
 800a0b4:	e775      	b.n	8009fa2 <_dtoa_r+0x94a>
 800a0b6:	4638      	mov	r0, r7
 800a0b8:	e7ba      	b.n	800a030 <_dtoa_r+0x9d8>
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	e7e2      	b.n	800a084 <_dtoa_r+0xa2c>
 800a0be:	9b03      	ldr	r3, [sp, #12]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	db04      	blt.n	800a0ce <_dtoa_r+0xa76>
 800a0c4:	9906      	ldr	r1, [sp, #24]
 800a0c6:	430b      	orrs	r3, r1
 800a0c8:	9904      	ldr	r1, [sp, #16]
 800a0ca:	430b      	orrs	r3, r1
 800a0cc:	d122      	bne.n	800a114 <_dtoa_r+0xabc>
 800a0ce:	2a00      	cmp	r2, #0
 800a0d0:	ddee      	ble.n	800a0b0 <_dtoa_r+0xa58>
 800a0d2:	ee18 1a10 	vmov	r1, s16
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	4620      	mov	r0, r4
 800a0da:	f000 fba7 	bl	800a82c <__lshift>
 800a0de:	4631      	mov	r1, r6
 800a0e0:	ee08 0a10 	vmov	s16, r0
 800a0e4:	f000 fc12 	bl	800a90c <__mcmp>
 800a0e8:	2800      	cmp	r0, #0
 800a0ea:	dc03      	bgt.n	800a0f4 <_dtoa_r+0xa9c>
 800a0ec:	d1e0      	bne.n	800a0b0 <_dtoa_r+0xa58>
 800a0ee:	f01a 0f01 	tst.w	sl, #1
 800a0f2:	d0dd      	beq.n	800a0b0 <_dtoa_r+0xa58>
 800a0f4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a0f8:	d1d7      	bne.n	800a0aa <_dtoa_r+0xa52>
 800a0fa:	2339      	movs	r3, #57	; 0x39
 800a0fc:	f88b 3000 	strb.w	r3, [fp]
 800a100:	462b      	mov	r3, r5
 800a102:	461d      	mov	r5, r3
 800a104:	3b01      	subs	r3, #1
 800a106:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a10a:	2a39      	cmp	r2, #57	; 0x39
 800a10c:	d071      	beq.n	800a1f2 <_dtoa_r+0xb9a>
 800a10e:	3201      	adds	r2, #1
 800a110:	701a      	strb	r2, [r3, #0]
 800a112:	e746      	b.n	8009fa2 <_dtoa_r+0x94a>
 800a114:	2a00      	cmp	r2, #0
 800a116:	dd07      	ble.n	800a128 <_dtoa_r+0xad0>
 800a118:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a11c:	d0ed      	beq.n	800a0fa <_dtoa_r+0xaa2>
 800a11e:	f10a 0301 	add.w	r3, sl, #1
 800a122:	f88b 3000 	strb.w	r3, [fp]
 800a126:	e73c      	b.n	8009fa2 <_dtoa_r+0x94a>
 800a128:	9b05      	ldr	r3, [sp, #20]
 800a12a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a12e:	4599      	cmp	r9, r3
 800a130:	d047      	beq.n	800a1c2 <_dtoa_r+0xb6a>
 800a132:	ee18 1a10 	vmov	r1, s16
 800a136:	2300      	movs	r3, #0
 800a138:	220a      	movs	r2, #10
 800a13a:	4620      	mov	r0, r4
 800a13c:	f000 f9c6 	bl	800a4cc <__multadd>
 800a140:	45b8      	cmp	r8, r7
 800a142:	ee08 0a10 	vmov	s16, r0
 800a146:	f04f 0300 	mov.w	r3, #0
 800a14a:	f04f 020a 	mov.w	r2, #10
 800a14e:	4641      	mov	r1, r8
 800a150:	4620      	mov	r0, r4
 800a152:	d106      	bne.n	800a162 <_dtoa_r+0xb0a>
 800a154:	f000 f9ba 	bl	800a4cc <__multadd>
 800a158:	4680      	mov	r8, r0
 800a15a:	4607      	mov	r7, r0
 800a15c:	f109 0901 	add.w	r9, r9, #1
 800a160:	e772      	b.n	800a048 <_dtoa_r+0x9f0>
 800a162:	f000 f9b3 	bl	800a4cc <__multadd>
 800a166:	4639      	mov	r1, r7
 800a168:	4680      	mov	r8, r0
 800a16a:	2300      	movs	r3, #0
 800a16c:	220a      	movs	r2, #10
 800a16e:	4620      	mov	r0, r4
 800a170:	f000 f9ac 	bl	800a4cc <__multadd>
 800a174:	4607      	mov	r7, r0
 800a176:	e7f1      	b.n	800a15c <_dtoa_r+0xb04>
 800a178:	9b03      	ldr	r3, [sp, #12]
 800a17a:	9302      	str	r3, [sp, #8]
 800a17c:	9d01      	ldr	r5, [sp, #4]
 800a17e:	ee18 0a10 	vmov	r0, s16
 800a182:	4631      	mov	r1, r6
 800a184:	f7ff f9dc 	bl	8009540 <quorem>
 800a188:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a18c:	9b01      	ldr	r3, [sp, #4]
 800a18e:	f805 ab01 	strb.w	sl, [r5], #1
 800a192:	1aea      	subs	r2, r5, r3
 800a194:	9b02      	ldr	r3, [sp, #8]
 800a196:	4293      	cmp	r3, r2
 800a198:	dd09      	ble.n	800a1ae <_dtoa_r+0xb56>
 800a19a:	ee18 1a10 	vmov	r1, s16
 800a19e:	2300      	movs	r3, #0
 800a1a0:	220a      	movs	r2, #10
 800a1a2:	4620      	mov	r0, r4
 800a1a4:	f000 f992 	bl	800a4cc <__multadd>
 800a1a8:	ee08 0a10 	vmov	s16, r0
 800a1ac:	e7e7      	b.n	800a17e <_dtoa_r+0xb26>
 800a1ae:	9b02      	ldr	r3, [sp, #8]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	bfc8      	it	gt
 800a1b4:	461d      	movgt	r5, r3
 800a1b6:	9b01      	ldr	r3, [sp, #4]
 800a1b8:	bfd8      	it	le
 800a1ba:	2501      	movle	r5, #1
 800a1bc:	441d      	add	r5, r3
 800a1be:	f04f 0800 	mov.w	r8, #0
 800a1c2:	ee18 1a10 	vmov	r1, s16
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	4620      	mov	r0, r4
 800a1ca:	f000 fb2f 	bl	800a82c <__lshift>
 800a1ce:	4631      	mov	r1, r6
 800a1d0:	ee08 0a10 	vmov	s16, r0
 800a1d4:	f000 fb9a 	bl	800a90c <__mcmp>
 800a1d8:	2800      	cmp	r0, #0
 800a1da:	dc91      	bgt.n	800a100 <_dtoa_r+0xaa8>
 800a1dc:	d102      	bne.n	800a1e4 <_dtoa_r+0xb8c>
 800a1de:	f01a 0f01 	tst.w	sl, #1
 800a1e2:	d18d      	bne.n	800a100 <_dtoa_r+0xaa8>
 800a1e4:	462b      	mov	r3, r5
 800a1e6:	461d      	mov	r5, r3
 800a1e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a1ec:	2a30      	cmp	r2, #48	; 0x30
 800a1ee:	d0fa      	beq.n	800a1e6 <_dtoa_r+0xb8e>
 800a1f0:	e6d7      	b.n	8009fa2 <_dtoa_r+0x94a>
 800a1f2:	9a01      	ldr	r2, [sp, #4]
 800a1f4:	429a      	cmp	r2, r3
 800a1f6:	d184      	bne.n	800a102 <_dtoa_r+0xaaa>
 800a1f8:	9b00      	ldr	r3, [sp, #0]
 800a1fa:	3301      	adds	r3, #1
 800a1fc:	9300      	str	r3, [sp, #0]
 800a1fe:	2331      	movs	r3, #49	; 0x31
 800a200:	7013      	strb	r3, [r2, #0]
 800a202:	e6ce      	b.n	8009fa2 <_dtoa_r+0x94a>
 800a204:	4b09      	ldr	r3, [pc, #36]	; (800a22c <_dtoa_r+0xbd4>)
 800a206:	f7ff ba95 	b.w	8009734 <_dtoa_r+0xdc>
 800a20a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	f47f aa6e 	bne.w	80096ee <_dtoa_r+0x96>
 800a212:	4b07      	ldr	r3, [pc, #28]	; (800a230 <_dtoa_r+0xbd8>)
 800a214:	f7ff ba8e 	b.w	8009734 <_dtoa_r+0xdc>
 800a218:	9b02      	ldr	r3, [sp, #8]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	dcae      	bgt.n	800a17c <_dtoa_r+0xb24>
 800a21e:	9b06      	ldr	r3, [sp, #24]
 800a220:	2b02      	cmp	r3, #2
 800a222:	f73f aea8 	bgt.w	8009f76 <_dtoa_r+0x91e>
 800a226:	e7a9      	b.n	800a17c <_dtoa_r+0xb24>
 800a228:	0800bf43 	.word	0x0800bf43
 800a22c:	0800bea0 	.word	0x0800bea0
 800a230:	0800bec4 	.word	0x0800bec4

0800a234 <__sflush_r>:
 800a234:	898a      	ldrh	r2, [r1, #12]
 800a236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a23a:	4605      	mov	r5, r0
 800a23c:	0710      	lsls	r0, r2, #28
 800a23e:	460c      	mov	r4, r1
 800a240:	d458      	bmi.n	800a2f4 <__sflush_r+0xc0>
 800a242:	684b      	ldr	r3, [r1, #4]
 800a244:	2b00      	cmp	r3, #0
 800a246:	dc05      	bgt.n	800a254 <__sflush_r+0x20>
 800a248:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	dc02      	bgt.n	800a254 <__sflush_r+0x20>
 800a24e:	2000      	movs	r0, #0
 800a250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a254:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a256:	2e00      	cmp	r6, #0
 800a258:	d0f9      	beq.n	800a24e <__sflush_r+0x1a>
 800a25a:	2300      	movs	r3, #0
 800a25c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a260:	682f      	ldr	r7, [r5, #0]
 800a262:	602b      	str	r3, [r5, #0]
 800a264:	d032      	beq.n	800a2cc <__sflush_r+0x98>
 800a266:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a268:	89a3      	ldrh	r3, [r4, #12]
 800a26a:	075a      	lsls	r2, r3, #29
 800a26c:	d505      	bpl.n	800a27a <__sflush_r+0x46>
 800a26e:	6863      	ldr	r3, [r4, #4]
 800a270:	1ac0      	subs	r0, r0, r3
 800a272:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a274:	b10b      	cbz	r3, 800a27a <__sflush_r+0x46>
 800a276:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a278:	1ac0      	subs	r0, r0, r3
 800a27a:	2300      	movs	r3, #0
 800a27c:	4602      	mov	r2, r0
 800a27e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a280:	6a21      	ldr	r1, [r4, #32]
 800a282:	4628      	mov	r0, r5
 800a284:	47b0      	blx	r6
 800a286:	1c43      	adds	r3, r0, #1
 800a288:	89a3      	ldrh	r3, [r4, #12]
 800a28a:	d106      	bne.n	800a29a <__sflush_r+0x66>
 800a28c:	6829      	ldr	r1, [r5, #0]
 800a28e:	291d      	cmp	r1, #29
 800a290:	d82c      	bhi.n	800a2ec <__sflush_r+0xb8>
 800a292:	4a2a      	ldr	r2, [pc, #168]	; (800a33c <__sflush_r+0x108>)
 800a294:	40ca      	lsrs	r2, r1
 800a296:	07d6      	lsls	r6, r2, #31
 800a298:	d528      	bpl.n	800a2ec <__sflush_r+0xb8>
 800a29a:	2200      	movs	r2, #0
 800a29c:	6062      	str	r2, [r4, #4]
 800a29e:	04d9      	lsls	r1, r3, #19
 800a2a0:	6922      	ldr	r2, [r4, #16]
 800a2a2:	6022      	str	r2, [r4, #0]
 800a2a4:	d504      	bpl.n	800a2b0 <__sflush_r+0x7c>
 800a2a6:	1c42      	adds	r2, r0, #1
 800a2a8:	d101      	bne.n	800a2ae <__sflush_r+0x7a>
 800a2aa:	682b      	ldr	r3, [r5, #0]
 800a2ac:	b903      	cbnz	r3, 800a2b0 <__sflush_r+0x7c>
 800a2ae:	6560      	str	r0, [r4, #84]	; 0x54
 800a2b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2b2:	602f      	str	r7, [r5, #0]
 800a2b4:	2900      	cmp	r1, #0
 800a2b6:	d0ca      	beq.n	800a24e <__sflush_r+0x1a>
 800a2b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2bc:	4299      	cmp	r1, r3
 800a2be:	d002      	beq.n	800a2c6 <__sflush_r+0x92>
 800a2c0:	4628      	mov	r0, r5
 800a2c2:	f7fe fb03 	bl	80088cc <_free_r>
 800a2c6:	2000      	movs	r0, #0
 800a2c8:	6360      	str	r0, [r4, #52]	; 0x34
 800a2ca:	e7c1      	b.n	800a250 <__sflush_r+0x1c>
 800a2cc:	6a21      	ldr	r1, [r4, #32]
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	4628      	mov	r0, r5
 800a2d2:	47b0      	blx	r6
 800a2d4:	1c41      	adds	r1, r0, #1
 800a2d6:	d1c7      	bne.n	800a268 <__sflush_r+0x34>
 800a2d8:	682b      	ldr	r3, [r5, #0]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d0c4      	beq.n	800a268 <__sflush_r+0x34>
 800a2de:	2b1d      	cmp	r3, #29
 800a2e0:	d001      	beq.n	800a2e6 <__sflush_r+0xb2>
 800a2e2:	2b16      	cmp	r3, #22
 800a2e4:	d101      	bne.n	800a2ea <__sflush_r+0xb6>
 800a2e6:	602f      	str	r7, [r5, #0]
 800a2e8:	e7b1      	b.n	800a24e <__sflush_r+0x1a>
 800a2ea:	89a3      	ldrh	r3, [r4, #12]
 800a2ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2f0:	81a3      	strh	r3, [r4, #12]
 800a2f2:	e7ad      	b.n	800a250 <__sflush_r+0x1c>
 800a2f4:	690f      	ldr	r7, [r1, #16]
 800a2f6:	2f00      	cmp	r7, #0
 800a2f8:	d0a9      	beq.n	800a24e <__sflush_r+0x1a>
 800a2fa:	0793      	lsls	r3, r2, #30
 800a2fc:	680e      	ldr	r6, [r1, #0]
 800a2fe:	bf08      	it	eq
 800a300:	694b      	ldreq	r3, [r1, #20]
 800a302:	600f      	str	r7, [r1, #0]
 800a304:	bf18      	it	ne
 800a306:	2300      	movne	r3, #0
 800a308:	eba6 0807 	sub.w	r8, r6, r7
 800a30c:	608b      	str	r3, [r1, #8]
 800a30e:	f1b8 0f00 	cmp.w	r8, #0
 800a312:	dd9c      	ble.n	800a24e <__sflush_r+0x1a>
 800a314:	6a21      	ldr	r1, [r4, #32]
 800a316:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a318:	4643      	mov	r3, r8
 800a31a:	463a      	mov	r2, r7
 800a31c:	4628      	mov	r0, r5
 800a31e:	47b0      	blx	r6
 800a320:	2800      	cmp	r0, #0
 800a322:	dc06      	bgt.n	800a332 <__sflush_r+0xfe>
 800a324:	89a3      	ldrh	r3, [r4, #12]
 800a326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a32a:	81a3      	strh	r3, [r4, #12]
 800a32c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a330:	e78e      	b.n	800a250 <__sflush_r+0x1c>
 800a332:	4407      	add	r7, r0
 800a334:	eba8 0800 	sub.w	r8, r8, r0
 800a338:	e7e9      	b.n	800a30e <__sflush_r+0xda>
 800a33a:	bf00      	nop
 800a33c:	20400001 	.word	0x20400001

0800a340 <_fflush_r>:
 800a340:	b538      	push	{r3, r4, r5, lr}
 800a342:	690b      	ldr	r3, [r1, #16]
 800a344:	4605      	mov	r5, r0
 800a346:	460c      	mov	r4, r1
 800a348:	b913      	cbnz	r3, 800a350 <_fflush_r+0x10>
 800a34a:	2500      	movs	r5, #0
 800a34c:	4628      	mov	r0, r5
 800a34e:	bd38      	pop	{r3, r4, r5, pc}
 800a350:	b118      	cbz	r0, 800a35a <_fflush_r+0x1a>
 800a352:	6983      	ldr	r3, [r0, #24]
 800a354:	b90b      	cbnz	r3, 800a35a <_fflush_r+0x1a>
 800a356:	f7fe f9cd 	bl	80086f4 <__sinit>
 800a35a:	4b14      	ldr	r3, [pc, #80]	; (800a3ac <_fflush_r+0x6c>)
 800a35c:	429c      	cmp	r4, r3
 800a35e:	d11b      	bne.n	800a398 <_fflush_r+0x58>
 800a360:	686c      	ldr	r4, [r5, #4]
 800a362:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d0ef      	beq.n	800a34a <_fflush_r+0xa>
 800a36a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a36c:	07d0      	lsls	r0, r2, #31
 800a36e:	d404      	bmi.n	800a37a <_fflush_r+0x3a>
 800a370:	0599      	lsls	r1, r3, #22
 800a372:	d402      	bmi.n	800a37a <_fflush_r+0x3a>
 800a374:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a376:	f7fe fa80 	bl	800887a <__retarget_lock_acquire_recursive>
 800a37a:	4628      	mov	r0, r5
 800a37c:	4621      	mov	r1, r4
 800a37e:	f7ff ff59 	bl	800a234 <__sflush_r>
 800a382:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a384:	07da      	lsls	r2, r3, #31
 800a386:	4605      	mov	r5, r0
 800a388:	d4e0      	bmi.n	800a34c <_fflush_r+0xc>
 800a38a:	89a3      	ldrh	r3, [r4, #12]
 800a38c:	059b      	lsls	r3, r3, #22
 800a38e:	d4dd      	bmi.n	800a34c <_fflush_r+0xc>
 800a390:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a392:	f7fe fa73 	bl	800887c <__retarget_lock_release_recursive>
 800a396:	e7d9      	b.n	800a34c <_fflush_r+0xc>
 800a398:	4b05      	ldr	r3, [pc, #20]	; (800a3b0 <_fflush_r+0x70>)
 800a39a:	429c      	cmp	r4, r3
 800a39c:	d101      	bne.n	800a3a2 <_fflush_r+0x62>
 800a39e:	68ac      	ldr	r4, [r5, #8]
 800a3a0:	e7df      	b.n	800a362 <_fflush_r+0x22>
 800a3a2:	4b04      	ldr	r3, [pc, #16]	; (800a3b4 <_fflush_r+0x74>)
 800a3a4:	429c      	cmp	r4, r3
 800a3a6:	bf08      	it	eq
 800a3a8:	68ec      	ldreq	r4, [r5, #12]
 800a3aa:	e7da      	b.n	800a362 <_fflush_r+0x22>
 800a3ac:	0800be4c 	.word	0x0800be4c
 800a3b0:	0800be6c 	.word	0x0800be6c
 800a3b4:	0800be2c 	.word	0x0800be2c

0800a3b8 <fiprintf>:
 800a3b8:	b40e      	push	{r1, r2, r3}
 800a3ba:	b503      	push	{r0, r1, lr}
 800a3bc:	4601      	mov	r1, r0
 800a3be:	ab03      	add	r3, sp, #12
 800a3c0:	4805      	ldr	r0, [pc, #20]	; (800a3d8 <fiprintf+0x20>)
 800a3c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3c6:	6800      	ldr	r0, [r0, #0]
 800a3c8:	9301      	str	r3, [sp, #4]
 800a3ca:	f000 fd3d 	bl	800ae48 <_vfiprintf_r>
 800a3ce:	b002      	add	sp, #8
 800a3d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3d4:	b003      	add	sp, #12
 800a3d6:	4770      	bx	lr
 800a3d8:	200001ec 	.word	0x200001ec

0800a3dc <_localeconv_r>:
 800a3dc:	4800      	ldr	r0, [pc, #0]	; (800a3e0 <_localeconv_r+0x4>)
 800a3de:	4770      	bx	lr
 800a3e0:	20000340 	.word	0x20000340

0800a3e4 <_lseek_r>:
 800a3e4:	b538      	push	{r3, r4, r5, lr}
 800a3e6:	4d07      	ldr	r5, [pc, #28]	; (800a404 <_lseek_r+0x20>)
 800a3e8:	4604      	mov	r4, r0
 800a3ea:	4608      	mov	r0, r1
 800a3ec:	4611      	mov	r1, r2
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	602a      	str	r2, [r5, #0]
 800a3f2:	461a      	mov	r2, r3
 800a3f4:	f7f9 fa38 	bl	8003868 <_lseek>
 800a3f8:	1c43      	adds	r3, r0, #1
 800a3fa:	d102      	bne.n	800a402 <_lseek_r+0x1e>
 800a3fc:	682b      	ldr	r3, [r5, #0]
 800a3fe:	b103      	cbz	r3, 800a402 <_lseek_r+0x1e>
 800a400:	6023      	str	r3, [r4, #0]
 800a402:	bd38      	pop	{r3, r4, r5, pc}
 800a404:	20001514 	.word	0x20001514

0800a408 <_Balloc>:
 800a408:	b570      	push	{r4, r5, r6, lr}
 800a40a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a40c:	4604      	mov	r4, r0
 800a40e:	460d      	mov	r5, r1
 800a410:	b976      	cbnz	r6, 800a430 <_Balloc+0x28>
 800a412:	2010      	movs	r0, #16
 800a414:	f7fe fa34 	bl	8008880 <malloc>
 800a418:	4602      	mov	r2, r0
 800a41a:	6260      	str	r0, [r4, #36]	; 0x24
 800a41c:	b920      	cbnz	r0, 800a428 <_Balloc+0x20>
 800a41e:	4b18      	ldr	r3, [pc, #96]	; (800a480 <_Balloc+0x78>)
 800a420:	4818      	ldr	r0, [pc, #96]	; (800a484 <_Balloc+0x7c>)
 800a422:	2166      	movs	r1, #102	; 0x66
 800a424:	f000 ff12 	bl	800b24c <__assert_func>
 800a428:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a42c:	6006      	str	r6, [r0, #0]
 800a42e:	60c6      	str	r6, [r0, #12]
 800a430:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a432:	68f3      	ldr	r3, [r6, #12]
 800a434:	b183      	cbz	r3, 800a458 <_Balloc+0x50>
 800a436:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a438:	68db      	ldr	r3, [r3, #12]
 800a43a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a43e:	b9b8      	cbnz	r0, 800a470 <_Balloc+0x68>
 800a440:	2101      	movs	r1, #1
 800a442:	fa01 f605 	lsl.w	r6, r1, r5
 800a446:	1d72      	adds	r2, r6, #5
 800a448:	0092      	lsls	r2, r2, #2
 800a44a:	4620      	mov	r0, r4
 800a44c:	f000 fb60 	bl	800ab10 <_calloc_r>
 800a450:	b160      	cbz	r0, 800a46c <_Balloc+0x64>
 800a452:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a456:	e00e      	b.n	800a476 <_Balloc+0x6e>
 800a458:	2221      	movs	r2, #33	; 0x21
 800a45a:	2104      	movs	r1, #4
 800a45c:	4620      	mov	r0, r4
 800a45e:	f000 fb57 	bl	800ab10 <_calloc_r>
 800a462:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a464:	60f0      	str	r0, [r6, #12]
 800a466:	68db      	ldr	r3, [r3, #12]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d1e4      	bne.n	800a436 <_Balloc+0x2e>
 800a46c:	2000      	movs	r0, #0
 800a46e:	bd70      	pop	{r4, r5, r6, pc}
 800a470:	6802      	ldr	r2, [r0, #0]
 800a472:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a476:	2300      	movs	r3, #0
 800a478:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a47c:	e7f7      	b.n	800a46e <_Balloc+0x66>
 800a47e:	bf00      	nop
 800a480:	0800bed1 	.word	0x0800bed1
 800a484:	0800bf54 	.word	0x0800bf54

0800a488 <_Bfree>:
 800a488:	b570      	push	{r4, r5, r6, lr}
 800a48a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a48c:	4605      	mov	r5, r0
 800a48e:	460c      	mov	r4, r1
 800a490:	b976      	cbnz	r6, 800a4b0 <_Bfree+0x28>
 800a492:	2010      	movs	r0, #16
 800a494:	f7fe f9f4 	bl	8008880 <malloc>
 800a498:	4602      	mov	r2, r0
 800a49a:	6268      	str	r0, [r5, #36]	; 0x24
 800a49c:	b920      	cbnz	r0, 800a4a8 <_Bfree+0x20>
 800a49e:	4b09      	ldr	r3, [pc, #36]	; (800a4c4 <_Bfree+0x3c>)
 800a4a0:	4809      	ldr	r0, [pc, #36]	; (800a4c8 <_Bfree+0x40>)
 800a4a2:	218a      	movs	r1, #138	; 0x8a
 800a4a4:	f000 fed2 	bl	800b24c <__assert_func>
 800a4a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a4ac:	6006      	str	r6, [r0, #0]
 800a4ae:	60c6      	str	r6, [r0, #12]
 800a4b0:	b13c      	cbz	r4, 800a4c2 <_Bfree+0x3a>
 800a4b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a4b4:	6862      	ldr	r2, [r4, #4]
 800a4b6:	68db      	ldr	r3, [r3, #12]
 800a4b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a4bc:	6021      	str	r1, [r4, #0]
 800a4be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a4c2:	bd70      	pop	{r4, r5, r6, pc}
 800a4c4:	0800bed1 	.word	0x0800bed1
 800a4c8:	0800bf54 	.word	0x0800bf54

0800a4cc <__multadd>:
 800a4cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4d0:	690d      	ldr	r5, [r1, #16]
 800a4d2:	4607      	mov	r7, r0
 800a4d4:	460c      	mov	r4, r1
 800a4d6:	461e      	mov	r6, r3
 800a4d8:	f101 0c14 	add.w	ip, r1, #20
 800a4dc:	2000      	movs	r0, #0
 800a4de:	f8dc 3000 	ldr.w	r3, [ip]
 800a4e2:	b299      	uxth	r1, r3
 800a4e4:	fb02 6101 	mla	r1, r2, r1, r6
 800a4e8:	0c1e      	lsrs	r6, r3, #16
 800a4ea:	0c0b      	lsrs	r3, r1, #16
 800a4ec:	fb02 3306 	mla	r3, r2, r6, r3
 800a4f0:	b289      	uxth	r1, r1
 800a4f2:	3001      	adds	r0, #1
 800a4f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a4f8:	4285      	cmp	r5, r0
 800a4fa:	f84c 1b04 	str.w	r1, [ip], #4
 800a4fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a502:	dcec      	bgt.n	800a4de <__multadd+0x12>
 800a504:	b30e      	cbz	r6, 800a54a <__multadd+0x7e>
 800a506:	68a3      	ldr	r3, [r4, #8]
 800a508:	42ab      	cmp	r3, r5
 800a50a:	dc19      	bgt.n	800a540 <__multadd+0x74>
 800a50c:	6861      	ldr	r1, [r4, #4]
 800a50e:	4638      	mov	r0, r7
 800a510:	3101      	adds	r1, #1
 800a512:	f7ff ff79 	bl	800a408 <_Balloc>
 800a516:	4680      	mov	r8, r0
 800a518:	b928      	cbnz	r0, 800a526 <__multadd+0x5a>
 800a51a:	4602      	mov	r2, r0
 800a51c:	4b0c      	ldr	r3, [pc, #48]	; (800a550 <__multadd+0x84>)
 800a51e:	480d      	ldr	r0, [pc, #52]	; (800a554 <__multadd+0x88>)
 800a520:	21b5      	movs	r1, #181	; 0xb5
 800a522:	f000 fe93 	bl	800b24c <__assert_func>
 800a526:	6922      	ldr	r2, [r4, #16]
 800a528:	3202      	adds	r2, #2
 800a52a:	f104 010c 	add.w	r1, r4, #12
 800a52e:	0092      	lsls	r2, r2, #2
 800a530:	300c      	adds	r0, #12
 800a532:	f7fe f9b5 	bl	80088a0 <memcpy>
 800a536:	4621      	mov	r1, r4
 800a538:	4638      	mov	r0, r7
 800a53a:	f7ff ffa5 	bl	800a488 <_Bfree>
 800a53e:	4644      	mov	r4, r8
 800a540:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a544:	3501      	adds	r5, #1
 800a546:	615e      	str	r6, [r3, #20]
 800a548:	6125      	str	r5, [r4, #16]
 800a54a:	4620      	mov	r0, r4
 800a54c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a550:	0800bf43 	.word	0x0800bf43
 800a554:	0800bf54 	.word	0x0800bf54

0800a558 <__hi0bits>:
 800a558:	0c03      	lsrs	r3, r0, #16
 800a55a:	041b      	lsls	r3, r3, #16
 800a55c:	b9d3      	cbnz	r3, 800a594 <__hi0bits+0x3c>
 800a55e:	0400      	lsls	r0, r0, #16
 800a560:	2310      	movs	r3, #16
 800a562:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a566:	bf04      	itt	eq
 800a568:	0200      	lsleq	r0, r0, #8
 800a56a:	3308      	addeq	r3, #8
 800a56c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a570:	bf04      	itt	eq
 800a572:	0100      	lsleq	r0, r0, #4
 800a574:	3304      	addeq	r3, #4
 800a576:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a57a:	bf04      	itt	eq
 800a57c:	0080      	lsleq	r0, r0, #2
 800a57e:	3302      	addeq	r3, #2
 800a580:	2800      	cmp	r0, #0
 800a582:	db05      	blt.n	800a590 <__hi0bits+0x38>
 800a584:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a588:	f103 0301 	add.w	r3, r3, #1
 800a58c:	bf08      	it	eq
 800a58e:	2320      	moveq	r3, #32
 800a590:	4618      	mov	r0, r3
 800a592:	4770      	bx	lr
 800a594:	2300      	movs	r3, #0
 800a596:	e7e4      	b.n	800a562 <__hi0bits+0xa>

0800a598 <__lo0bits>:
 800a598:	6803      	ldr	r3, [r0, #0]
 800a59a:	f013 0207 	ands.w	r2, r3, #7
 800a59e:	4601      	mov	r1, r0
 800a5a0:	d00b      	beq.n	800a5ba <__lo0bits+0x22>
 800a5a2:	07da      	lsls	r2, r3, #31
 800a5a4:	d423      	bmi.n	800a5ee <__lo0bits+0x56>
 800a5a6:	0798      	lsls	r0, r3, #30
 800a5a8:	bf49      	itett	mi
 800a5aa:	085b      	lsrmi	r3, r3, #1
 800a5ac:	089b      	lsrpl	r3, r3, #2
 800a5ae:	2001      	movmi	r0, #1
 800a5b0:	600b      	strmi	r3, [r1, #0]
 800a5b2:	bf5c      	itt	pl
 800a5b4:	600b      	strpl	r3, [r1, #0]
 800a5b6:	2002      	movpl	r0, #2
 800a5b8:	4770      	bx	lr
 800a5ba:	b298      	uxth	r0, r3
 800a5bc:	b9a8      	cbnz	r0, 800a5ea <__lo0bits+0x52>
 800a5be:	0c1b      	lsrs	r3, r3, #16
 800a5c0:	2010      	movs	r0, #16
 800a5c2:	b2da      	uxtb	r2, r3
 800a5c4:	b90a      	cbnz	r2, 800a5ca <__lo0bits+0x32>
 800a5c6:	3008      	adds	r0, #8
 800a5c8:	0a1b      	lsrs	r3, r3, #8
 800a5ca:	071a      	lsls	r2, r3, #28
 800a5cc:	bf04      	itt	eq
 800a5ce:	091b      	lsreq	r3, r3, #4
 800a5d0:	3004      	addeq	r0, #4
 800a5d2:	079a      	lsls	r2, r3, #30
 800a5d4:	bf04      	itt	eq
 800a5d6:	089b      	lsreq	r3, r3, #2
 800a5d8:	3002      	addeq	r0, #2
 800a5da:	07da      	lsls	r2, r3, #31
 800a5dc:	d403      	bmi.n	800a5e6 <__lo0bits+0x4e>
 800a5de:	085b      	lsrs	r3, r3, #1
 800a5e0:	f100 0001 	add.w	r0, r0, #1
 800a5e4:	d005      	beq.n	800a5f2 <__lo0bits+0x5a>
 800a5e6:	600b      	str	r3, [r1, #0]
 800a5e8:	4770      	bx	lr
 800a5ea:	4610      	mov	r0, r2
 800a5ec:	e7e9      	b.n	800a5c2 <__lo0bits+0x2a>
 800a5ee:	2000      	movs	r0, #0
 800a5f0:	4770      	bx	lr
 800a5f2:	2020      	movs	r0, #32
 800a5f4:	4770      	bx	lr
	...

0800a5f8 <__i2b>:
 800a5f8:	b510      	push	{r4, lr}
 800a5fa:	460c      	mov	r4, r1
 800a5fc:	2101      	movs	r1, #1
 800a5fe:	f7ff ff03 	bl	800a408 <_Balloc>
 800a602:	4602      	mov	r2, r0
 800a604:	b928      	cbnz	r0, 800a612 <__i2b+0x1a>
 800a606:	4b05      	ldr	r3, [pc, #20]	; (800a61c <__i2b+0x24>)
 800a608:	4805      	ldr	r0, [pc, #20]	; (800a620 <__i2b+0x28>)
 800a60a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a60e:	f000 fe1d 	bl	800b24c <__assert_func>
 800a612:	2301      	movs	r3, #1
 800a614:	6144      	str	r4, [r0, #20]
 800a616:	6103      	str	r3, [r0, #16]
 800a618:	bd10      	pop	{r4, pc}
 800a61a:	bf00      	nop
 800a61c:	0800bf43 	.word	0x0800bf43
 800a620:	0800bf54 	.word	0x0800bf54

0800a624 <__multiply>:
 800a624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a628:	4691      	mov	r9, r2
 800a62a:	690a      	ldr	r2, [r1, #16]
 800a62c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a630:	429a      	cmp	r2, r3
 800a632:	bfb8      	it	lt
 800a634:	460b      	movlt	r3, r1
 800a636:	460c      	mov	r4, r1
 800a638:	bfbc      	itt	lt
 800a63a:	464c      	movlt	r4, r9
 800a63c:	4699      	movlt	r9, r3
 800a63e:	6927      	ldr	r7, [r4, #16]
 800a640:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a644:	68a3      	ldr	r3, [r4, #8]
 800a646:	6861      	ldr	r1, [r4, #4]
 800a648:	eb07 060a 	add.w	r6, r7, sl
 800a64c:	42b3      	cmp	r3, r6
 800a64e:	b085      	sub	sp, #20
 800a650:	bfb8      	it	lt
 800a652:	3101      	addlt	r1, #1
 800a654:	f7ff fed8 	bl	800a408 <_Balloc>
 800a658:	b930      	cbnz	r0, 800a668 <__multiply+0x44>
 800a65a:	4602      	mov	r2, r0
 800a65c:	4b44      	ldr	r3, [pc, #272]	; (800a770 <__multiply+0x14c>)
 800a65e:	4845      	ldr	r0, [pc, #276]	; (800a774 <__multiply+0x150>)
 800a660:	f240 115d 	movw	r1, #349	; 0x15d
 800a664:	f000 fdf2 	bl	800b24c <__assert_func>
 800a668:	f100 0514 	add.w	r5, r0, #20
 800a66c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a670:	462b      	mov	r3, r5
 800a672:	2200      	movs	r2, #0
 800a674:	4543      	cmp	r3, r8
 800a676:	d321      	bcc.n	800a6bc <__multiply+0x98>
 800a678:	f104 0314 	add.w	r3, r4, #20
 800a67c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a680:	f109 0314 	add.w	r3, r9, #20
 800a684:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a688:	9202      	str	r2, [sp, #8]
 800a68a:	1b3a      	subs	r2, r7, r4
 800a68c:	3a15      	subs	r2, #21
 800a68e:	f022 0203 	bic.w	r2, r2, #3
 800a692:	3204      	adds	r2, #4
 800a694:	f104 0115 	add.w	r1, r4, #21
 800a698:	428f      	cmp	r7, r1
 800a69a:	bf38      	it	cc
 800a69c:	2204      	movcc	r2, #4
 800a69e:	9201      	str	r2, [sp, #4]
 800a6a0:	9a02      	ldr	r2, [sp, #8]
 800a6a2:	9303      	str	r3, [sp, #12]
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d80c      	bhi.n	800a6c2 <__multiply+0x9e>
 800a6a8:	2e00      	cmp	r6, #0
 800a6aa:	dd03      	ble.n	800a6b4 <__multiply+0x90>
 800a6ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d05a      	beq.n	800a76a <__multiply+0x146>
 800a6b4:	6106      	str	r6, [r0, #16]
 800a6b6:	b005      	add	sp, #20
 800a6b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6bc:	f843 2b04 	str.w	r2, [r3], #4
 800a6c0:	e7d8      	b.n	800a674 <__multiply+0x50>
 800a6c2:	f8b3 a000 	ldrh.w	sl, [r3]
 800a6c6:	f1ba 0f00 	cmp.w	sl, #0
 800a6ca:	d024      	beq.n	800a716 <__multiply+0xf2>
 800a6cc:	f104 0e14 	add.w	lr, r4, #20
 800a6d0:	46a9      	mov	r9, r5
 800a6d2:	f04f 0c00 	mov.w	ip, #0
 800a6d6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a6da:	f8d9 1000 	ldr.w	r1, [r9]
 800a6de:	fa1f fb82 	uxth.w	fp, r2
 800a6e2:	b289      	uxth	r1, r1
 800a6e4:	fb0a 110b 	mla	r1, sl, fp, r1
 800a6e8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a6ec:	f8d9 2000 	ldr.w	r2, [r9]
 800a6f0:	4461      	add	r1, ip
 800a6f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a6f6:	fb0a c20b 	mla	r2, sl, fp, ip
 800a6fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a6fe:	b289      	uxth	r1, r1
 800a700:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a704:	4577      	cmp	r7, lr
 800a706:	f849 1b04 	str.w	r1, [r9], #4
 800a70a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a70e:	d8e2      	bhi.n	800a6d6 <__multiply+0xb2>
 800a710:	9a01      	ldr	r2, [sp, #4]
 800a712:	f845 c002 	str.w	ip, [r5, r2]
 800a716:	9a03      	ldr	r2, [sp, #12]
 800a718:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a71c:	3304      	adds	r3, #4
 800a71e:	f1b9 0f00 	cmp.w	r9, #0
 800a722:	d020      	beq.n	800a766 <__multiply+0x142>
 800a724:	6829      	ldr	r1, [r5, #0]
 800a726:	f104 0c14 	add.w	ip, r4, #20
 800a72a:	46ae      	mov	lr, r5
 800a72c:	f04f 0a00 	mov.w	sl, #0
 800a730:	f8bc b000 	ldrh.w	fp, [ip]
 800a734:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a738:	fb09 220b 	mla	r2, r9, fp, r2
 800a73c:	4492      	add	sl, r2
 800a73e:	b289      	uxth	r1, r1
 800a740:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a744:	f84e 1b04 	str.w	r1, [lr], #4
 800a748:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a74c:	f8be 1000 	ldrh.w	r1, [lr]
 800a750:	0c12      	lsrs	r2, r2, #16
 800a752:	fb09 1102 	mla	r1, r9, r2, r1
 800a756:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a75a:	4567      	cmp	r7, ip
 800a75c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a760:	d8e6      	bhi.n	800a730 <__multiply+0x10c>
 800a762:	9a01      	ldr	r2, [sp, #4]
 800a764:	50a9      	str	r1, [r5, r2]
 800a766:	3504      	adds	r5, #4
 800a768:	e79a      	b.n	800a6a0 <__multiply+0x7c>
 800a76a:	3e01      	subs	r6, #1
 800a76c:	e79c      	b.n	800a6a8 <__multiply+0x84>
 800a76e:	bf00      	nop
 800a770:	0800bf43 	.word	0x0800bf43
 800a774:	0800bf54 	.word	0x0800bf54

0800a778 <__pow5mult>:
 800a778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a77c:	4615      	mov	r5, r2
 800a77e:	f012 0203 	ands.w	r2, r2, #3
 800a782:	4606      	mov	r6, r0
 800a784:	460f      	mov	r7, r1
 800a786:	d007      	beq.n	800a798 <__pow5mult+0x20>
 800a788:	4c25      	ldr	r4, [pc, #148]	; (800a820 <__pow5mult+0xa8>)
 800a78a:	3a01      	subs	r2, #1
 800a78c:	2300      	movs	r3, #0
 800a78e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a792:	f7ff fe9b 	bl	800a4cc <__multadd>
 800a796:	4607      	mov	r7, r0
 800a798:	10ad      	asrs	r5, r5, #2
 800a79a:	d03d      	beq.n	800a818 <__pow5mult+0xa0>
 800a79c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a79e:	b97c      	cbnz	r4, 800a7c0 <__pow5mult+0x48>
 800a7a0:	2010      	movs	r0, #16
 800a7a2:	f7fe f86d 	bl	8008880 <malloc>
 800a7a6:	4602      	mov	r2, r0
 800a7a8:	6270      	str	r0, [r6, #36]	; 0x24
 800a7aa:	b928      	cbnz	r0, 800a7b8 <__pow5mult+0x40>
 800a7ac:	4b1d      	ldr	r3, [pc, #116]	; (800a824 <__pow5mult+0xac>)
 800a7ae:	481e      	ldr	r0, [pc, #120]	; (800a828 <__pow5mult+0xb0>)
 800a7b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a7b4:	f000 fd4a 	bl	800b24c <__assert_func>
 800a7b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a7bc:	6004      	str	r4, [r0, #0]
 800a7be:	60c4      	str	r4, [r0, #12]
 800a7c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a7c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a7c8:	b94c      	cbnz	r4, 800a7de <__pow5mult+0x66>
 800a7ca:	f240 2171 	movw	r1, #625	; 0x271
 800a7ce:	4630      	mov	r0, r6
 800a7d0:	f7ff ff12 	bl	800a5f8 <__i2b>
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	f8c8 0008 	str.w	r0, [r8, #8]
 800a7da:	4604      	mov	r4, r0
 800a7dc:	6003      	str	r3, [r0, #0]
 800a7de:	f04f 0900 	mov.w	r9, #0
 800a7e2:	07eb      	lsls	r3, r5, #31
 800a7e4:	d50a      	bpl.n	800a7fc <__pow5mult+0x84>
 800a7e6:	4639      	mov	r1, r7
 800a7e8:	4622      	mov	r2, r4
 800a7ea:	4630      	mov	r0, r6
 800a7ec:	f7ff ff1a 	bl	800a624 <__multiply>
 800a7f0:	4639      	mov	r1, r7
 800a7f2:	4680      	mov	r8, r0
 800a7f4:	4630      	mov	r0, r6
 800a7f6:	f7ff fe47 	bl	800a488 <_Bfree>
 800a7fa:	4647      	mov	r7, r8
 800a7fc:	106d      	asrs	r5, r5, #1
 800a7fe:	d00b      	beq.n	800a818 <__pow5mult+0xa0>
 800a800:	6820      	ldr	r0, [r4, #0]
 800a802:	b938      	cbnz	r0, 800a814 <__pow5mult+0x9c>
 800a804:	4622      	mov	r2, r4
 800a806:	4621      	mov	r1, r4
 800a808:	4630      	mov	r0, r6
 800a80a:	f7ff ff0b 	bl	800a624 <__multiply>
 800a80e:	6020      	str	r0, [r4, #0]
 800a810:	f8c0 9000 	str.w	r9, [r0]
 800a814:	4604      	mov	r4, r0
 800a816:	e7e4      	b.n	800a7e2 <__pow5mult+0x6a>
 800a818:	4638      	mov	r0, r7
 800a81a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a81e:	bf00      	nop
 800a820:	0800c0a0 	.word	0x0800c0a0
 800a824:	0800bed1 	.word	0x0800bed1
 800a828:	0800bf54 	.word	0x0800bf54

0800a82c <__lshift>:
 800a82c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a830:	460c      	mov	r4, r1
 800a832:	6849      	ldr	r1, [r1, #4]
 800a834:	6923      	ldr	r3, [r4, #16]
 800a836:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a83a:	68a3      	ldr	r3, [r4, #8]
 800a83c:	4607      	mov	r7, r0
 800a83e:	4691      	mov	r9, r2
 800a840:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a844:	f108 0601 	add.w	r6, r8, #1
 800a848:	42b3      	cmp	r3, r6
 800a84a:	db0b      	blt.n	800a864 <__lshift+0x38>
 800a84c:	4638      	mov	r0, r7
 800a84e:	f7ff fddb 	bl	800a408 <_Balloc>
 800a852:	4605      	mov	r5, r0
 800a854:	b948      	cbnz	r0, 800a86a <__lshift+0x3e>
 800a856:	4602      	mov	r2, r0
 800a858:	4b2a      	ldr	r3, [pc, #168]	; (800a904 <__lshift+0xd8>)
 800a85a:	482b      	ldr	r0, [pc, #172]	; (800a908 <__lshift+0xdc>)
 800a85c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a860:	f000 fcf4 	bl	800b24c <__assert_func>
 800a864:	3101      	adds	r1, #1
 800a866:	005b      	lsls	r3, r3, #1
 800a868:	e7ee      	b.n	800a848 <__lshift+0x1c>
 800a86a:	2300      	movs	r3, #0
 800a86c:	f100 0114 	add.w	r1, r0, #20
 800a870:	f100 0210 	add.w	r2, r0, #16
 800a874:	4618      	mov	r0, r3
 800a876:	4553      	cmp	r3, sl
 800a878:	db37      	blt.n	800a8ea <__lshift+0xbe>
 800a87a:	6920      	ldr	r0, [r4, #16]
 800a87c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a880:	f104 0314 	add.w	r3, r4, #20
 800a884:	f019 091f 	ands.w	r9, r9, #31
 800a888:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a88c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a890:	d02f      	beq.n	800a8f2 <__lshift+0xc6>
 800a892:	f1c9 0e20 	rsb	lr, r9, #32
 800a896:	468a      	mov	sl, r1
 800a898:	f04f 0c00 	mov.w	ip, #0
 800a89c:	681a      	ldr	r2, [r3, #0]
 800a89e:	fa02 f209 	lsl.w	r2, r2, r9
 800a8a2:	ea42 020c 	orr.w	r2, r2, ip
 800a8a6:	f84a 2b04 	str.w	r2, [sl], #4
 800a8aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8ae:	4298      	cmp	r0, r3
 800a8b0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a8b4:	d8f2      	bhi.n	800a89c <__lshift+0x70>
 800a8b6:	1b03      	subs	r3, r0, r4
 800a8b8:	3b15      	subs	r3, #21
 800a8ba:	f023 0303 	bic.w	r3, r3, #3
 800a8be:	3304      	adds	r3, #4
 800a8c0:	f104 0215 	add.w	r2, r4, #21
 800a8c4:	4290      	cmp	r0, r2
 800a8c6:	bf38      	it	cc
 800a8c8:	2304      	movcc	r3, #4
 800a8ca:	f841 c003 	str.w	ip, [r1, r3]
 800a8ce:	f1bc 0f00 	cmp.w	ip, #0
 800a8d2:	d001      	beq.n	800a8d8 <__lshift+0xac>
 800a8d4:	f108 0602 	add.w	r6, r8, #2
 800a8d8:	3e01      	subs	r6, #1
 800a8da:	4638      	mov	r0, r7
 800a8dc:	612e      	str	r6, [r5, #16]
 800a8de:	4621      	mov	r1, r4
 800a8e0:	f7ff fdd2 	bl	800a488 <_Bfree>
 800a8e4:	4628      	mov	r0, r5
 800a8e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8ea:	f842 0f04 	str.w	r0, [r2, #4]!
 800a8ee:	3301      	adds	r3, #1
 800a8f0:	e7c1      	b.n	800a876 <__lshift+0x4a>
 800a8f2:	3904      	subs	r1, #4
 800a8f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8f8:	f841 2f04 	str.w	r2, [r1, #4]!
 800a8fc:	4298      	cmp	r0, r3
 800a8fe:	d8f9      	bhi.n	800a8f4 <__lshift+0xc8>
 800a900:	e7ea      	b.n	800a8d8 <__lshift+0xac>
 800a902:	bf00      	nop
 800a904:	0800bf43 	.word	0x0800bf43
 800a908:	0800bf54 	.word	0x0800bf54

0800a90c <__mcmp>:
 800a90c:	b530      	push	{r4, r5, lr}
 800a90e:	6902      	ldr	r2, [r0, #16]
 800a910:	690c      	ldr	r4, [r1, #16]
 800a912:	1b12      	subs	r2, r2, r4
 800a914:	d10e      	bne.n	800a934 <__mcmp+0x28>
 800a916:	f100 0314 	add.w	r3, r0, #20
 800a91a:	3114      	adds	r1, #20
 800a91c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a920:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a924:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a928:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a92c:	42a5      	cmp	r5, r4
 800a92e:	d003      	beq.n	800a938 <__mcmp+0x2c>
 800a930:	d305      	bcc.n	800a93e <__mcmp+0x32>
 800a932:	2201      	movs	r2, #1
 800a934:	4610      	mov	r0, r2
 800a936:	bd30      	pop	{r4, r5, pc}
 800a938:	4283      	cmp	r3, r0
 800a93a:	d3f3      	bcc.n	800a924 <__mcmp+0x18>
 800a93c:	e7fa      	b.n	800a934 <__mcmp+0x28>
 800a93e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a942:	e7f7      	b.n	800a934 <__mcmp+0x28>

0800a944 <__mdiff>:
 800a944:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a948:	460c      	mov	r4, r1
 800a94a:	4606      	mov	r6, r0
 800a94c:	4611      	mov	r1, r2
 800a94e:	4620      	mov	r0, r4
 800a950:	4690      	mov	r8, r2
 800a952:	f7ff ffdb 	bl	800a90c <__mcmp>
 800a956:	1e05      	subs	r5, r0, #0
 800a958:	d110      	bne.n	800a97c <__mdiff+0x38>
 800a95a:	4629      	mov	r1, r5
 800a95c:	4630      	mov	r0, r6
 800a95e:	f7ff fd53 	bl	800a408 <_Balloc>
 800a962:	b930      	cbnz	r0, 800a972 <__mdiff+0x2e>
 800a964:	4b3a      	ldr	r3, [pc, #232]	; (800aa50 <__mdiff+0x10c>)
 800a966:	4602      	mov	r2, r0
 800a968:	f240 2132 	movw	r1, #562	; 0x232
 800a96c:	4839      	ldr	r0, [pc, #228]	; (800aa54 <__mdiff+0x110>)
 800a96e:	f000 fc6d 	bl	800b24c <__assert_func>
 800a972:	2301      	movs	r3, #1
 800a974:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a978:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a97c:	bfa4      	itt	ge
 800a97e:	4643      	movge	r3, r8
 800a980:	46a0      	movge	r8, r4
 800a982:	4630      	mov	r0, r6
 800a984:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a988:	bfa6      	itte	ge
 800a98a:	461c      	movge	r4, r3
 800a98c:	2500      	movge	r5, #0
 800a98e:	2501      	movlt	r5, #1
 800a990:	f7ff fd3a 	bl	800a408 <_Balloc>
 800a994:	b920      	cbnz	r0, 800a9a0 <__mdiff+0x5c>
 800a996:	4b2e      	ldr	r3, [pc, #184]	; (800aa50 <__mdiff+0x10c>)
 800a998:	4602      	mov	r2, r0
 800a99a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a99e:	e7e5      	b.n	800a96c <__mdiff+0x28>
 800a9a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a9a4:	6926      	ldr	r6, [r4, #16]
 800a9a6:	60c5      	str	r5, [r0, #12]
 800a9a8:	f104 0914 	add.w	r9, r4, #20
 800a9ac:	f108 0514 	add.w	r5, r8, #20
 800a9b0:	f100 0e14 	add.w	lr, r0, #20
 800a9b4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a9b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a9bc:	f108 0210 	add.w	r2, r8, #16
 800a9c0:	46f2      	mov	sl, lr
 800a9c2:	2100      	movs	r1, #0
 800a9c4:	f859 3b04 	ldr.w	r3, [r9], #4
 800a9c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a9cc:	fa1f f883 	uxth.w	r8, r3
 800a9d0:	fa11 f18b 	uxtah	r1, r1, fp
 800a9d4:	0c1b      	lsrs	r3, r3, #16
 800a9d6:	eba1 0808 	sub.w	r8, r1, r8
 800a9da:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a9de:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a9e2:	fa1f f888 	uxth.w	r8, r8
 800a9e6:	1419      	asrs	r1, r3, #16
 800a9e8:	454e      	cmp	r6, r9
 800a9ea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a9ee:	f84a 3b04 	str.w	r3, [sl], #4
 800a9f2:	d8e7      	bhi.n	800a9c4 <__mdiff+0x80>
 800a9f4:	1b33      	subs	r3, r6, r4
 800a9f6:	3b15      	subs	r3, #21
 800a9f8:	f023 0303 	bic.w	r3, r3, #3
 800a9fc:	3304      	adds	r3, #4
 800a9fe:	3415      	adds	r4, #21
 800aa00:	42a6      	cmp	r6, r4
 800aa02:	bf38      	it	cc
 800aa04:	2304      	movcc	r3, #4
 800aa06:	441d      	add	r5, r3
 800aa08:	4473      	add	r3, lr
 800aa0a:	469e      	mov	lr, r3
 800aa0c:	462e      	mov	r6, r5
 800aa0e:	4566      	cmp	r6, ip
 800aa10:	d30e      	bcc.n	800aa30 <__mdiff+0xec>
 800aa12:	f10c 0203 	add.w	r2, ip, #3
 800aa16:	1b52      	subs	r2, r2, r5
 800aa18:	f022 0203 	bic.w	r2, r2, #3
 800aa1c:	3d03      	subs	r5, #3
 800aa1e:	45ac      	cmp	ip, r5
 800aa20:	bf38      	it	cc
 800aa22:	2200      	movcc	r2, #0
 800aa24:	441a      	add	r2, r3
 800aa26:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800aa2a:	b17b      	cbz	r3, 800aa4c <__mdiff+0x108>
 800aa2c:	6107      	str	r7, [r0, #16]
 800aa2e:	e7a3      	b.n	800a978 <__mdiff+0x34>
 800aa30:	f856 8b04 	ldr.w	r8, [r6], #4
 800aa34:	fa11 f288 	uxtah	r2, r1, r8
 800aa38:	1414      	asrs	r4, r2, #16
 800aa3a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800aa3e:	b292      	uxth	r2, r2
 800aa40:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800aa44:	f84e 2b04 	str.w	r2, [lr], #4
 800aa48:	1421      	asrs	r1, r4, #16
 800aa4a:	e7e0      	b.n	800aa0e <__mdiff+0xca>
 800aa4c:	3f01      	subs	r7, #1
 800aa4e:	e7ea      	b.n	800aa26 <__mdiff+0xe2>
 800aa50:	0800bf43 	.word	0x0800bf43
 800aa54:	0800bf54 	.word	0x0800bf54

0800aa58 <__d2b>:
 800aa58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aa5c:	4689      	mov	r9, r1
 800aa5e:	2101      	movs	r1, #1
 800aa60:	ec57 6b10 	vmov	r6, r7, d0
 800aa64:	4690      	mov	r8, r2
 800aa66:	f7ff fccf 	bl	800a408 <_Balloc>
 800aa6a:	4604      	mov	r4, r0
 800aa6c:	b930      	cbnz	r0, 800aa7c <__d2b+0x24>
 800aa6e:	4602      	mov	r2, r0
 800aa70:	4b25      	ldr	r3, [pc, #148]	; (800ab08 <__d2b+0xb0>)
 800aa72:	4826      	ldr	r0, [pc, #152]	; (800ab0c <__d2b+0xb4>)
 800aa74:	f240 310a 	movw	r1, #778	; 0x30a
 800aa78:	f000 fbe8 	bl	800b24c <__assert_func>
 800aa7c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800aa80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aa84:	bb35      	cbnz	r5, 800aad4 <__d2b+0x7c>
 800aa86:	2e00      	cmp	r6, #0
 800aa88:	9301      	str	r3, [sp, #4]
 800aa8a:	d028      	beq.n	800aade <__d2b+0x86>
 800aa8c:	4668      	mov	r0, sp
 800aa8e:	9600      	str	r6, [sp, #0]
 800aa90:	f7ff fd82 	bl	800a598 <__lo0bits>
 800aa94:	9900      	ldr	r1, [sp, #0]
 800aa96:	b300      	cbz	r0, 800aada <__d2b+0x82>
 800aa98:	9a01      	ldr	r2, [sp, #4]
 800aa9a:	f1c0 0320 	rsb	r3, r0, #32
 800aa9e:	fa02 f303 	lsl.w	r3, r2, r3
 800aaa2:	430b      	orrs	r3, r1
 800aaa4:	40c2      	lsrs	r2, r0
 800aaa6:	6163      	str	r3, [r4, #20]
 800aaa8:	9201      	str	r2, [sp, #4]
 800aaaa:	9b01      	ldr	r3, [sp, #4]
 800aaac:	61a3      	str	r3, [r4, #24]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	bf14      	ite	ne
 800aab2:	2202      	movne	r2, #2
 800aab4:	2201      	moveq	r2, #1
 800aab6:	6122      	str	r2, [r4, #16]
 800aab8:	b1d5      	cbz	r5, 800aaf0 <__d2b+0x98>
 800aaba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800aabe:	4405      	add	r5, r0
 800aac0:	f8c9 5000 	str.w	r5, [r9]
 800aac4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aac8:	f8c8 0000 	str.w	r0, [r8]
 800aacc:	4620      	mov	r0, r4
 800aace:	b003      	add	sp, #12
 800aad0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aad4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aad8:	e7d5      	b.n	800aa86 <__d2b+0x2e>
 800aada:	6161      	str	r1, [r4, #20]
 800aadc:	e7e5      	b.n	800aaaa <__d2b+0x52>
 800aade:	a801      	add	r0, sp, #4
 800aae0:	f7ff fd5a 	bl	800a598 <__lo0bits>
 800aae4:	9b01      	ldr	r3, [sp, #4]
 800aae6:	6163      	str	r3, [r4, #20]
 800aae8:	2201      	movs	r2, #1
 800aaea:	6122      	str	r2, [r4, #16]
 800aaec:	3020      	adds	r0, #32
 800aaee:	e7e3      	b.n	800aab8 <__d2b+0x60>
 800aaf0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aaf4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aaf8:	f8c9 0000 	str.w	r0, [r9]
 800aafc:	6918      	ldr	r0, [r3, #16]
 800aafe:	f7ff fd2b 	bl	800a558 <__hi0bits>
 800ab02:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ab06:	e7df      	b.n	800aac8 <__d2b+0x70>
 800ab08:	0800bf43 	.word	0x0800bf43
 800ab0c:	0800bf54 	.word	0x0800bf54

0800ab10 <_calloc_r>:
 800ab10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab12:	fba1 2402 	umull	r2, r4, r1, r2
 800ab16:	b94c      	cbnz	r4, 800ab2c <_calloc_r+0x1c>
 800ab18:	4611      	mov	r1, r2
 800ab1a:	9201      	str	r2, [sp, #4]
 800ab1c:	f7fd ff42 	bl	80089a4 <_malloc_r>
 800ab20:	9a01      	ldr	r2, [sp, #4]
 800ab22:	4605      	mov	r5, r0
 800ab24:	b930      	cbnz	r0, 800ab34 <_calloc_r+0x24>
 800ab26:	4628      	mov	r0, r5
 800ab28:	b003      	add	sp, #12
 800ab2a:	bd30      	pop	{r4, r5, pc}
 800ab2c:	220c      	movs	r2, #12
 800ab2e:	6002      	str	r2, [r0, #0]
 800ab30:	2500      	movs	r5, #0
 800ab32:	e7f8      	b.n	800ab26 <_calloc_r+0x16>
 800ab34:	4621      	mov	r1, r4
 800ab36:	f7fd fec1 	bl	80088bc <memset>
 800ab3a:	e7f4      	b.n	800ab26 <_calloc_r+0x16>

0800ab3c <__ssputs_r>:
 800ab3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab40:	688e      	ldr	r6, [r1, #8]
 800ab42:	429e      	cmp	r6, r3
 800ab44:	4682      	mov	sl, r0
 800ab46:	460c      	mov	r4, r1
 800ab48:	4690      	mov	r8, r2
 800ab4a:	461f      	mov	r7, r3
 800ab4c:	d838      	bhi.n	800abc0 <__ssputs_r+0x84>
 800ab4e:	898a      	ldrh	r2, [r1, #12]
 800ab50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ab54:	d032      	beq.n	800abbc <__ssputs_r+0x80>
 800ab56:	6825      	ldr	r5, [r4, #0]
 800ab58:	6909      	ldr	r1, [r1, #16]
 800ab5a:	eba5 0901 	sub.w	r9, r5, r1
 800ab5e:	6965      	ldr	r5, [r4, #20]
 800ab60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ab64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ab68:	3301      	adds	r3, #1
 800ab6a:	444b      	add	r3, r9
 800ab6c:	106d      	asrs	r5, r5, #1
 800ab6e:	429d      	cmp	r5, r3
 800ab70:	bf38      	it	cc
 800ab72:	461d      	movcc	r5, r3
 800ab74:	0553      	lsls	r3, r2, #21
 800ab76:	d531      	bpl.n	800abdc <__ssputs_r+0xa0>
 800ab78:	4629      	mov	r1, r5
 800ab7a:	f7fd ff13 	bl	80089a4 <_malloc_r>
 800ab7e:	4606      	mov	r6, r0
 800ab80:	b950      	cbnz	r0, 800ab98 <__ssputs_r+0x5c>
 800ab82:	230c      	movs	r3, #12
 800ab84:	f8ca 3000 	str.w	r3, [sl]
 800ab88:	89a3      	ldrh	r3, [r4, #12]
 800ab8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab8e:	81a3      	strh	r3, [r4, #12]
 800ab90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab98:	6921      	ldr	r1, [r4, #16]
 800ab9a:	464a      	mov	r2, r9
 800ab9c:	f7fd fe80 	bl	80088a0 <memcpy>
 800aba0:	89a3      	ldrh	r3, [r4, #12]
 800aba2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abaa:	81a3      	strh	r3, [r4, #12]
 800abac:	6126      	str	r6, [r4, #16]
 800abae:	6165      	str	r5, [r4, #20]
 800abb0:	444e      	add	r6, r9
 800abb2:	eba5 0509 	sub.w	r5, r5, r9
 800abb6:	6026      	str	r6, [r4, #0]
 800abb8:	60a5      	str	r5, [r4, #8]
 800abba:	463e      	mov	r6, r7
 800abbc:	42be      	cmp	r6, r7
 800abbe:	d900      	bls.n	800abc2 <__ssputs_r+0x86>
 800abc0:	463e      	mov	r6, r7
 800abc2:	6820      	ldr	r0, [r4, #0]
 800abc4:	4632      	mov	r2, r6
 800abc6:	4641      	mov	r1, r8
 800abc8:	f000 fbd6 	bl	800b378 <memmove>
 800abcc:	68a3      	ldr	r3, [r4, #8]
 800abce:	1b9b      	subs	r3, r3, r6
 800abd0:	60a3      	str	r3, [r4, #8]
 800abd2:	6823      	ldr	r3, [r4, #0]
 800abd4:	4433      	add	r3, r6
 800abd6:	6023      	str	r3, [r4, #0]
 800abd8:	2000      	movs	r0, #0
 800abda:	e7db      	b.n	800ab94 <__ssputs_r+0x58>
 800abdc:	462a      	mov	r2, r5
 800abde:	f000 fbe5 	bl	800b3ac <_realloc_r>
 800abe2:	4606      	mov	r6, r0
 800abe4:	2800      	cmp	r0, #0
 800abe6:	d1e1      	bne.n	800abac <__ssputs_r+0x70>
 800abe8:	6921      	ldr	r1, [r4, #16]
 800abea:	4650      	mov	r0, sl
 800abec:	f7fd fe6e 	bl	80088cc <_free_r>
 800abf0:	e7c7      	b.n	800ab82 <__ssputs_r+0x46>
	...

0800abf4 <_svfiprintf_r>:
 800abf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abf8:	4698      	mov	r8, r3
 800abfa:	898b      	ldrh	r3, [r1, #12]
 800abfc:	061b      	lsls	r3, r3, #24
 800abfe:	b09d      	sub	sp, #116	; 0x74
 800ac00:	4607      	mov	r7, r0
 800ac02:	460d      	mov	r5, r1
 800ac04:	4614      	mov	r4, r2
 800ac06:	d50e      	bpl.n	800ac26 <_svfiprintf_r+0x32>
 800ac08:	690b      	ldr	r3, [r1, #16]
 800ac0a:	b963      	cbnz	r3, 800ac26 <_svfiprintf_r+0x32>
 800ac0c:	2140      	movs	r1, #64	; 0x40
 800ac0e:	f7fd fec9 	bl	80089a4 <_malloc_r>
 800ac12:	6028      	str	r0, [r5, #0]
 800ac14:	6128      	str	r0, [r5, #16]
 800ac16:	b920      	cbnz	r0, 800ac22 <_svfiprintf_r+0x2e>
 800ac18:	230c      	movs	r3, #12
 800ac1a:	603b      	str	r3, [r7, #0]
 800ac1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac20:	e0d1      	b.n	800adc6 <_svfiprintf_r+0x1d2>
 800ac22:	2340      	movs	r3, #64	; 0x40
 800ac24:	616b      	str	r3, [r5, #20]
 800ac26:	2300      	movs	r3, #0
 800ac28:	9309      	str	r3, [sp, #36]	; 0x24
 800ac2a:	2320      	movs	r3, #32
 800ac2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac30:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac34:	2330      	movs	r3, #48	; 0x30
 800ac36:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ade0 <_svfiprintf_r+0x1ec>
 800ac3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac3e:	f04f 0901 	mov.w	r9, #1
 800ac42:	4623      	mov	r3, r4
 800ac44:	469a      	mov	sl, r3
 800ac46:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac4a:	b10a      	cbz	r2, 800ac50 <_svfiprintf_r+0x5c>
 800ac4c:	2a25      	cmp	r2, #37	; 0x25
 800ac4e:	d1f9      	bne.n	800ac44 <_svfiprintf_r+0x50>
 800ac50:	ebba 0b04 	subs.w	fp, sl, r4
 800ac54:	d00b      	beq.n	800ac6e <_svfiprintf_r+0x7a>
 800ac56:	465b      	mov	r3, fp
 800ac58:	4622      	mov	r2, r4
 800ac5a:	4629      	mov	r1, r5
 800ac5c:	4638      	mov	r0, r7
 800ac5e:	f7ff ff6d 	bl	800ab3c <__ssputs_r>
 800ac62:	3001      	adds	r0, #1
 800ac64:	f000 80aa 	beq.w	800adbc <_svfiprintf_r+0x1c8>
 800ac68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac6a:	445a      	add	r2, fp
 800ac6c:	9209      	str	r2, [sp, #36]	; 0x24
 800ac6e:	f89a 3000 	ldrb.w	r3, [sl]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	f000 80a2 	beq.w	800adbc <_svfiprintf_r+0x1c8>
 800ac78:	2300      	movs	r3, #0
 800ac7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ac7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac82:	f10a 0a01 	add.w	sl, sl, #1
 800ac86:	9304      	str	r3, [sp, #16]
 800ac88:	9307      	str	r3, [sp, #28]
 800ac8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ac8e:	931a      	str	r3, [sp, #104]	; 0x68
 800ac90:	4654      	mov	r4, sl
 800ac92:	2205      	movs	r2, #5
 800ac94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac98:	4851      	ldr	r0, [pc, #324]	; (800ade0 <_svfiprintf_r+0x1ec>)
 800ac9a:	f7f5 faa1 	bl	80001e0 <memchr>
 800ac9e:	9a04      	ldr	r2, [sp, #16]
 800aca0:	b9d8      	cbnz	r0, 800acda <_svfiprintf_r+0xe6>
 800aca2:	06d0      	lsls	r0, r2, #27
 800aca4:	bf44      	itt	mi
 800aca6:	2320      	movmi	r3, #32
 800aca8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acac:	0711      	lsls	r1, r2, #28
 800acae:	bf44      	itt	mi
 800acb0:	232b      	movmi	r3, #43	; 0x2b
 800acb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acb6:	f89a 3000 	ldrb.w	r3, [sl]
 800acba:	2b2a      	cmp	r3, #42	; 0x2a
 800acbc:	d015      	beq.n	800acea <_svfiprintf_r+0xf6>
 800acbe:	9a07      	ldr	r2, [sp, #28]
 800acc0:	4654      	mov	r4, sl
 800acc2:	2000      	movs	r0, #0
 800acc4:	f04f 0c0a 	mov.w	ip, #10
 800acc8:	4621      	mov	r1, r4
 800acca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800acce:	3b30      	subs	r3, #48	; 0x30
 800acd0:	2b09      	cmp	r3, #9
 800acd2:	d94e      	bls.n	800ad72 <_svfiprintf_r+0x17e>
 800acd4:	b1b0      	cbz	r0, 800ad04 <_svfiprintf_r+0x110>
 800acd6:	9207      	str	r2, [sp, #28]
 800acd8:	e014      	b.n	800ad04 <_svfiprintf_r+0x110>
 800acda:	eba0 0308 	sub.w	r3, r0, r8
 800acde:	fa09 f303 	lsl.w	r3, r9, r3
 800ace2:	4313      	orrs	r3, r2
 800ace4:	9304      	str	r3, [sp, #16]
 800ace6:	46a2      	mov	sl, r4
 800ace8:	e7d2      	b.n	800ac90 <_svfiprintf_r+0x9c>
 800acea:	9b03      	ldr	r3, [sp, #12]
 800acec:	1d19      	adds	r1, r3, #4
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	9103      	str	r1, [sp, #12]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	bfbb      	ittet	lt
 800acf6:	425b      	neglt	r3, r3
 800acf8:	f042 0202 	orrlt.w	r2, r2, #2
 800acfc:	9307      	strge	r3, [sp, #28]
 800acfe:	9307      	strlt	r3, [sp, #28]
 800ad00:	bfb8      	it	lt
 800ad02:	9204      	strlt	r2, [sp, #16]
 800ad04:	7823      	ldrb	r3, [r4, #0]
 800ad06:	2b2e      	cmp	r3, #46	; 0x2e
 800ad08:	d10c      	bne.n	800ad24 <_svfiprintf_r+0x130>
 800ad0a:	7863      	ldrb	r3, [r4, #1]
 800ad0c:	2b2a      	cmp	r3, #42	; 0x2a
 800ad0e:	d135      	bne.n	800ad7c <_svfiprintf_r+0x188>
 800ad10:	9b03      	ldr	r3, [sp, #12]
 800ad12:	1d1a      	adds	r2, r3, #4
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	9203      	str	r2, [sp, #12]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	bfb8      	it	lt
 800ad1c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ad20:	3402      	adds	r4, #2
 800ad22:	9305      	str	r3, [sp, #20]
 800ad24:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800adf0 <_svfiprintf_r+0x1fc>
 800ad28:	7821      	ldrb	r1, [r4, #0]
 800ad2a:	2203      	movs	r2, #3
 800ad2c:	4650      	mov	r0, sl
 800ad2e:	f7f5 fa57 	bl	80001e0 <memchr>
 800ad32:	b140      	cbz	r0, 800ad46 <_svfiprintf_r+0x152>
 800ad34:	2340      	movs	r3, #64	; 0x40
 800ad36:	eba0 000a 	sub.w	r0, r0, sl
 800ad3a:	fa03 f000 	lsl.w	r0, r3, r0
 800ad3e:	9b04      	ldr	r3, [sp, #16]
 800ad40:	4303      	orrs	r3, r0
 800ad42:	3401      	adds	r4, #1
 800ad44:	9304      	str	r3, [sp, #16]
 800ad46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad4a:	4826      	ldr	r0, [pc, #152]	; (800ade4 <_svfiprintf_r+0x1f0>)
 800ad4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad50:	2206      	movs	r2, #6
 800ad52:	f7f5 fa45 	bl	80001e0 <memchr>
 800ad56:	2800      	cmp	r0, #0
 800ad58:	d038      	beq.n	800adcc <_svfiprintf_r+0x1d8>
 800ad5a:	4b23      	ldr	r3, [pc, #140]	; (800ade8 <_svfiprintf_r+0x1f4>)
 800ad5c:	bb1b      	cbnz	r3, 800ada6 <_svfiprintf_r+0x1b2>
 800ad5e:	9b03      	ldr	r3, [sp, #12]
 800ad60:	3307      	adds	r3, #7
 800ad62:	f023 0307 	bic.w	r3, r3, #7
 800ad66:	3308      	adds	r3, #8
 800ad68:	9303      	str	r3, [sp, #12]
 800ad6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad6c:	4433      	add	r3, r6
 800ad6e:	9309      	str	r3, [sp, #36]	; 0x24
 800ad70:	e767      	b.n	800ac42 <_svfiprintf_r+0x4e>
 800ad72:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad76:	460c      	mov	r4, r1
 800ad78:	2001      	movs	r0, #1
 800ad7a:	e7a5      	b.n	800acc8 <_svfiprintf_r+0xd4>
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	3401      	adds	r4, #1
 800ad80:	9305      	str	r3, [sp, #20]
 800ad82:	4619      	mov	r1, r3
 800ad84:	f04f 0c0a 	mov.w	ip, #10
 800ad88:	4620      	mov	r0, r4
 800ad8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad8e:	3a30      	subs	r2, #48	; 0x30
 800ad90:	2a09      	cmp	r2, #9
 800ad92:	d903      	bls.n	800ad9c <_svfiprintf_r+0x1a8>
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d0c5      	beq.n	800ad24 <_svfiprintf_r+0x130>
 800ad98:	9105      	str	r1, [sp, #20]
 800ad9a:	e7c3      	b.n	800ad24 <_svfiprintf_r+0x130>
 800ad9c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ada0:	4604      	mov	r4, r0
 800ada2:	2301      	movs	r3, #1
 800ada4:	e7f0      	b.n	800ad88 <_svfiprintf_r+0x194>
 800ada6:	ab03      	add	r3, sp, #12
 800ada8:	9300      	str	r3, [sp, #0]
 800adaa:	462a      	mov	r2, r5
 800adac:	4b0f      	ldr	r3, [pc, #60]	; (800adec <_svfiprintf_r+0x1f8>)
 800adae:	a904      	add	r1, sp, #16
 800adb0:	4638      	mov	r0, r7
 800adb2:	f7fd ff0b 	bl	8008bcc <_printf_float>
 800adb6:	1c42      	adds	r2, r0, #1
 800adb8:	4606      	mov	r6, r0
 800adba:	d1d6      	bne.n	800ad6a <_svfiprintf_r+0x176>
 800adbc:	89ab      	ldrh	r3, [r5, #12]
 800adbe:	065b      	lsls	r3, r3, #25
 800adc0:	f53f af2c 	bmi.w	800ac1c <_svfiprintf_r+0x28>
 800adc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800adc6:	b01d      	add	sp, #116	; 0x74
 800adc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adcc:	ab03      	add	r3, sp, #12
 800adce:	9300      	str	r3, [sp, #0]
 800add0:	462a      	mov	r2, r5
 800add2:	4b06      	ldr	r3, [pc, #24]	; (800adec <_svfiprintf_r+0x1f8>)
 800add4:	a904      	add	r1, sp, #16
 800add6:	4638      	mov	r0, r7
 800add8:	f7fe f99c 	bl	8009114 <_printf_i>
 800addc:	e7eb      	b.n	800adb6 <_svfiprintf_r+0x1c2>
 800adde:	bf00      	nop
 800ade0:	0800c0ac 	.word	0x0800c0ac
 800ade4:	0800c0b6 	.word	0x0800c0b6
 800ade8:	08008bcd 	.word	0x08008bcd
 800adec:	0800ab3d 	.word	0x0800ab3d
 800adf0:	0800c0b2 	.word	0x0800c0b2

0800adf4 <__sfputc_r>:
 800adf4:	6893      	ldr	r3, [r2, #8]
 800adf6:	3b01      	subs	r3, #1
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	b410      	push	{r4}
 800adfc:	6093      	str	r3, [r2, #8]
 800adfe:	da08      	bge.n	800ae12 <__sfputc_r+0x1e>
 800ae00:	6994      	ldr	r4, [r2, #24]
 800ae02:	42a3      	cmp	r3, r4
 800ae04:	db01      	blt.n	800ae0a <__sfputc_r+0x16>
 800ae06:	290a      	cmp	r1, #10
 800ae08:	d103      	bne.n	800ae12 <__sfputc_r+0x1e>
 800ae0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae0e:	f000 b95d 	b.w	800b0cc <__swbuf_r>
 800ae12:	6813      	ldr	r3, [r2, #0]
 800ae14:	1c58      	adds	r0, r3, #1
 800ae16:	6010      	str	r0, [r2, #0]
 800ae18:	7019      	strb	r1, [r3, #0]
 800ae1a:	4608      	mov	r0, r1
 800ae1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae20:	4770      	bx	lr

0800ae22 <__sfputs_r>:
 800ae22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae24:	4606      	mov	r6, r0
 800ae26:	460f      	mov	r7, r1
 800ae28:	4614      	mov	r4, r2
 800ae2a:	18d5      	adds	r5, r2, r3
 800ae2c:	42ac      	cmp	r4, r5
 800ae2e:	d101      	bne.n	800ae34 <__sfputs_r+0x12>
 800ae30:	2000      	movs	r0, #0
 800ae32:	e007      	b.n	800ae44 <__sfputs_r+0x22>
 800ae34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae38:	463a      	mov	r2, r7
 800ae3a:	4630      	mov	r0, r6
 800ae3c:	f7ff ffda 	bl	800adf4 <__sfputc_r>
 800ae40:	1c43      	adds	r3, r0, #1
 800ae42:	d1f3      	bne.n	800ae2c <__sfputs_r+0xa>
 800ae44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ae48 <_vfiprintf_r>:
 800ae48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae4c:	460d      	mov	r5, r1
 800ae4e:	b09d      	sub	sp, #116	; 0x74
 800ae50:	4614      	mov	r4, r2
 800ae52:	4698      	mov	r8, r3
 800ae54:	4606      	mov	r6, r0
 800ae56:	b118      	cbz	r0, 800ae60 <_vfiprintf_r+0x18>
 800ae58:	6983      	ldr	r3, [r0, #24]
 800ae5a:	b90b      	cbnz	r3, 800ae60 <_vfiprintf_r+0x18>
 800ae5c:	f7fd fc4a 	bl	80086f4 <__sinit>
 800ae60:	4b89      	ldr	r3, [pc, #548]	; (800b088 <_vfiprintf_r+0x240>)
 800ae62:	429d      	cmp	r5, r3
 800ae64:	d11b      	bne.n	800ae9e <_vfiprintf_r+0x56>
 800ae66:	6875      	ldr	r5, [r6, #4]
 800ae68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae6a:	07d9      	lsls	r1, r3, #31
 800ae6c:	d405      	bmi.n	800ae7a <_vfiprintf_r+0x32>
 800ae6e:	89ab      	ldrh	r3, [r5, #12]
 800ae70:	059a      	lsls	r2, r3, #22
 800ae72:	d402      	bmi.n	800ae7a <_vfiprintf_r+0x32>
 800ae74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae76:	f7fd fd00 	bl	800887a <__retarget_lock_acquire_recursive>
 800ae7a:	89ab      	ldrh	r3, [r5, #12]
 800ae7c:	071b      	lsls	r3, r3, #28
 800ae7e:	d501      	bpl.n	800ae84 <_vfiprintf_r+0x3c>
 800ae80:	692b      	ldr	r3, [r5, #16]
 800ae82:	b9eb      	cbnz	r3, 800aec0 <_vfiprintf_r+0x78>
 800ae84:	4629      	mov	r1, r5
 800ae86:	4630      	mov	r0, r6
 800ae88:	f000 f972 	bl	800b170 <__swsetup_r>
 800ae8c:	b1c0      	cbz	r0, 800aec0 <_vfiprintf_r+0x78>
 800ae8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae90:	07dc      	lsls	r4, r3, #31
 800ae92:	d50e      	bpl.n	800aeb2 <_vfiprintf_r+0x6a>
 800ae94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae98:	b01d      	add	sp, #116	; 0x74
 800ae9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae9e:	4b7b      	ldr	r3, [pc, #492]	; (800b08c <_vfiprintf_r+0x244>)
 800aea0:	429d      	cmp	r5, r3
 800aea2:	d101      	bne.n	800aea8 <_vfiprintf_r+0x60>
 800aea4:	68b5      	ldr	r5, [r6, #8]
 800aea6:	e7df      	b.n	800ae68 <_vfiprintf_r+0x20>
 800aea8:	4b79      	ldr	r3, [pc, #484]	; (800b090 <_vfiprintf_r+0x248>)
 800aeaa:	429d      	cmp	r5, r3
 800aeac:	bf08      	it	eq
 800aeae:	68f5      	ldreq	r5, [r6, #12]
 800aeb0:	e7da      	b.n	800ae68 <_vfiprintf_r+0x20>
 800aeb2:	89ab      	ldrh	r3, [r5, #12]
 800aeb4:	0598      	lsls	r0, r3, #22
 800aeb6:	d4ed      	bmi.n	800ae94 <_vfiprintf_r+0x4c>
 800aeb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aeba:	f7fd fcdf 	bl	800887c <__retarget_lock_release_recursive>
 800aebe:	e7e9      	b.n	800ae94 <_vfiprintf_r+0x4c>
 800aec0:	2300      	movs	r3, #0
 800aec2:	9309      	str	r3, [sp, #36]	; 0x24
 800aec4:	2320      	movs	r3, #32
 800aec6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aeca:	f8cd 800c 	str.w	r8, [sp, #12]
 800aece:	2330      	movs	r3, #48	; 0x30
 800aed0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b094 <_vfiprintf_r+0x24c>
 800aed4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aed8:	f04f 0901 	mov.w	r9, #1
 800aedc:	4623      	mov	r3, r4
 800aede:	469a      	mov	sl, r3
 800aee0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aee4:	b10a      	cbz	r2, 800aeea <_vfiprintf_r+0xa2>
 800aee6:	2a25      	cmp	r2, #37	; 0x25
 800aee8:	d1f9      	bne.n	800aede <_vfiprintf_r+0x96>
 800aeea:	ebba 0b04 	subs.w	fp, sl, r4
 800aeee:	d00b      	beq.n	800af08 <_vfiprintf_r+0xc0>
 800aef0:	465b      	mov	r3, fp
 800aef2:	4622      	mov	r2, r4
 800aef4:	4629      	mov	r1, r5
 800aef6:	4630      	mov	r0, r6
 800aef8:	f7ff ff93 	bl	800ae22 <__sfputs_r>
 800aefc:	3001      	adds	r0, #1
 800aefe:	f000 80aa 	beq.w	800b056 <_vfiprintf_r+0x20e>
 800af02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af04:	445a      	add	r2, fp
 800af06:	9209      	str	r2, [sp, #36]	; 0x24
 800af08:	f89a 3000 	ldrb.w	r3, [sl]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	f000 80a2 	beq.w	800b056 <_vfiprintf_r+0x20e>
 800af12:	2300      	movs	r3, #0
 800af14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af1c:	f10a 0a01 	add.w	sl, sl, #1
 800af20:	9304      	str	r3, [sp, #16]
 800af22:	9307      	str	r3, [sp, #28]
 800af24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af28:	931a      	str	r3, [sp, #104]	; 0x68
 800af2a:	4654      	mov	r4, sl
 800af2c:	2205      	movs	r2, #5
 800af2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af32:	4858      	ldr	r0, [pc, #352]	; (800b094 <_vfiprintf_r+0x24c>)
 800af34:	f7f5 f954 	bl	80001e0 <memchr>
 800af38:	9a04      	ldr	r2, [sp, #16]
 800af3a:	b9d8      	cbnz	r0, 800af74 <_vfiprintf_r+0x12c>
 800af3c:	06d1      	lsls	r1, r2, #27
 800af3e:	bf44      	itt	mi
 800af40:	2320      	movmi	r3, #32
 800af42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af46:	0713      	lsls	r3, r2, #28
 800af48:	bf44      	itt	mi
 800af4a:	232b      	movmi	r3, #43	; 0x2b
 800af4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af50:	f89a 3000 	ldrb.w	r3, [sl]
 800af54:	2b2a      	cmp	r3, #42	; 0x2a
 800af56:	d015      	beq.n	800af84 <_vfiprintf_r+0x13c>
 800af58:	9a07      	ldr	r2, [sp, #28]
 800af5a:	4654      	mov	r4, sl
 800af5c:	2000      	movs	r0, #0
 800af5e:	f04f 0c0a 	mov.w	ip, #10
 800af62:	4621      	mov	r1, r4
 800af64:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af68:	3b30      	subs	r3, #48	; 0x30
 800af6a:	2b09      	cmp	r3, #9
 800af6c:	d94e      	bls.n	800b00c <_vfiprintf_r+0x1c4>
 800af6e:	b1b0      	cbz	r0, 800af9e <_vfiprintf_r+0x156>
 800af70:	9207      	str	r2, [sp, #28]
 800af72:	e014      	b.n	800af9e <_vfiprintf_r+0x156>
 800af74:	eba0 0308 	sub.w	r3, r0, r8
 800af78:	fa09 f303 	lsl.w	r3, r9, r3
 800af7c:	4313      	orrs	r3, r2
 800af7e:	9304      	str	r3, [sp, #16]
 800af80:	46a2      	mov	sl, r4
 800af82:	e7d2      	b.n	800af2a <_vfiprintf_r+0xe2>
 800af84:	9b03      	ldr	r3, [sp, #12]
 800af86:	1d19      	adds	r1, r3, #4
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	9103      	str	r1, [sp, #12]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	bfbb      	ittet	lt
 800af90:	425b      	neglt	r3, r3
 800af92:	f042 0202 	orrlt.w	r2, r2, #2
 800af96:	9307      	strge	r3, [sp, #28]
 800af98:	9307      	strlt	r3, [sp, #28]
 800af9a:	bfb8      	it	lt
 800af9c:	9204      	strlt	r2, [sp, #16]
 800af9e:	7823      	ldrb	r3, [r4, #0]
 800afa0:	2b2e      	cmp	r3, #46	; 0x2e
 800afa2:	d10c      	bne.n	800afbe <_vfiprintf_r+0x176>
 800afa4:	7863      	ldrb	r3, [r4, #1]
 800afa6:	2b2a      	cmp	r3, #42	; 0x2a
 800afa8:	d135      	bne.n	800b016 <_vfiprintf_r+0x1ce>
 800afaa:	9b03      	ldr	r3, [sp, #12]
 800afac:	1d1a      	adds	r2, r3, #4
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	9203      	str	r2, [sp, #12]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	bfb8      	it	lt
 800afb6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800afba:	3402      	adds	r4, #2
 800afbc:	9305      	str	r3, [sp, #20]
 800afbe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b0a4 <_vfiprintf_r+0x25c>
 800afc2:	7821      	ldrb	r1, [r4, #0]
 800afc4:	2203      	movs	r2, #3
 800afc6:	4650      	mov	r0, sl
 800afc8:	f7f5 f90a 	bl	80001e0 <memchr>
 800afcc:	b140      	cbz	r0, 800afe0 <_vfiprintf_r+0x198>
 800afce:	2340      	movs	r3, #64	; 0x40
 800afd0:	eba0 000a 	sub.w	r0, r0, sl
 800afd4:	fa03 f000 	lsl.w	r0, r3, r0
 800afd8:	9b04      	ldr	r3, [sp, #16]
 800afda:	4303      	orrs	r3, r0
 800afdc:	3401      	adds	r4, #1
 800afde:	9304      	str	r3, [sp, #16]
 800afe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afe4:	482c      	ldr	r0, [pc, #176]	; (800b098 <_vfiprintf_r+0x250>)
 800afe6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800afea:	2206      	movs	r2, #6
 800afec:	f7f5 f8f8 	bl	80001e0 <memchr>
 800aff0:	2800      	cmp	r0, #0
 800aff2:	d03f      	beq.n	800b074 <_vfiprintf_r+0x22c>
 800aff4:	4b29      	ldr	r3, [pc, #164]	; (800b09c <_vfiprintf_r+0x254>)
 800aff6:	bb1b      	cbnz	r3, 800b040 <_vfiprintf_r+0x1f8>
 800aff8:	9b03      	ldr	r3, [sp, #12]
 800affa:	3307      	adds	r3, #7
 800affc:	f023 0307 	bic.w	r3, r3, #7
 800b000:	3308      	adds	r3, #8
 800b002:	9303      	str	r3, [sp, #12]
 800b004:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b006:	443b      	add	r3, r7
 800b008:	9309      	str	r3, [sp, #36]	; 0x24
 800b00a:	e767      	b.n	800aedc <_vfiprintf_r+0x94>
 800b00c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b010:	460c      	mov	r4, r1
 800b012:	2001      	movs	r0, #1
 800b014:	e7a5      	b.n	800af62 <_vfiprintf_r+0x11a>
 800b016:	2300      	movs	r3, #0
 800b018:	3401      	adds	r4, #1
 800b01a:	9305      	str	r3, [sp, #20]
 800b01c:	4619      	mov	r1, r3
 800b01e:	f04f 0c0a 	mov.w	ip, #10
 800b022:	4620      	mov	r0, r4
 800b024:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b028:	3a30      	subs	r2, #48	; 0x30
 800b02a:	2a09      	cmp	r2, #9
 800b02c:	d903      	bls.n	800b036 <_vfiprintf_r+0x1ee>
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d0c5      	beq.n	800afbe <_vfiprintf_r+0x176>
 800b032:	9105      	str	r1, [sp, #20]
 800b034:	e7c3      	b.n	800afbe <_vfiprintf_r+0x176>
 800b036:	fb0c 2101 	mla	r1, ip, r1, r2
 800b03a:	4604      	mov	r4, r0
 800b03c:	2301      	movs	r3, #1
 800b03e:	e7f0      	b.n	800b022 <_vfiprintf_r+0x1da>
 800b040:	ab03      	add	r3, sp, #12
 800b042:	9300      	str	r3, [sp, #0]
 800b044:	462a      	mov	r2, r5
 800b046:	4b16      	ldr	r3, [pc, #88]	; (800b0a0 <_vfiprintf_r+0x258>)
 800b048:	a904      	add	r1, sp, #16
 800b04a:	4630      	mov	r0, r6
 800b04c:	f7fd fdbe 	bl	8008bcc <_printf_float>
 800b050:	4607      	mov	r7, r0
 800b052:	1c78      	adds	r0, r7, #1
 800b054:	d1d6      	bne.n	800b004 <_vfiprintf_r+0x1bc>
 800b056:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b058:	07d9      	lsls	r1, r3, #31
 800b05a:	d405      	bmi.n	800b068 <_vfiprintf_r+0x220>
 800b05c:	89ab      	ldrh	r3, [r5, #12]
 800b05e:	059a      	lsls	r2, r3, #22
 800b060:	d402      	bmi.n	800b068 <_vfiprintf_r+0x220>
 800b062:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b064:	f7fd fc0a 	bl	800887c <__retarget_lock_release_recursive>
 800b068:	89ab      	ldrh	r3, [r5, #12]
 800b06a:	065b      	lsls	r3, r3, #25
 800b06c:	f53f af12 	bmi.w	800ae94 <_vfiprintf_r+0x4c>
 800b070:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b072:	e711      	b.n	800ae98 <_vfiprintf_r+0x50>
 800b074:	ab03      	add	r3, sp, #12
 800b076:	9300      	str	r3, [sp, #0]
 800b078:	462a      	mov	r2, r5
 800b07a:	4b09      	ldr	r3, [pc, #36]	; (800b0a0 <_vfiprintf_r+0x258>)
 800b07c:	a904      	add	r1, sp, #16
 800b07e:	4630      	mov	r0, r6
 800b080:	f7fe f848 	bl	8009114 <_printf_i>
 800b084:	e7e4      	b.n	800b050 <_vfiprintf_r+0x208>
 800b086:	bf00      	nop
 800b088:	0800be4c 	.word	0x0800be4c
 800b08c:	0800be6c 	.word	0x0800be6c
 800b090:	0800be2c 	.word	0x0800be2c
 800b094:	0800c0ac 	.word	0x0800c0ac
 800b098:	0800c0b6 	.word	0x0800c0b6
 800b09c:	08008bcd 	.word	0x08008bcd
 800b0a0:	0800ae23 	.word	0x0800ae23
 800b0a4:	0800c0b2 	.word	0x0800c0b2

0800b0a8 <_read_r>:
 800b0a8:	b538      	push	{r3, r4, r5, lr}
 800b0aa:	4d07      	ldr	r5, [pc, #28]	; (800b0c8 <_read_r+0x20>)
 800b0ac:	4604      	mov	r4, r0
 800b0ae:	4608      	mov	r0, r1
 800b0b0:	4611      	mov	r1, r2
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	602a      	str	r2, [r5, #0]
 800b0b6:	461a      	mov	r2, r3
 800b0b8:	f7f8 fb76 	bl	80037a8 <_read>
 800b0bc:	1c43      	adds	r3, r0, #1
 800b0be:	d102      	bne.n	800b0c6 <_read_r+0x1e>
 800b0c0:	682b      	ldr	r3, [r5, #0]
 800b0c2:	b103      	cbz	r3, 800b0c6 <_read_r+0x1e>
 800b0c4:	6023      	str	r3, [r4, #0]
 800b0c6:	bd38      	pop	{r3, r4, r5, pc}
 800b0c8:	20001514 	.word	0x20001514

0800b0cc <__swbuf_r>:
 800b0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ce:	460e      	mov	r6, r1
 800b0d0:	4614      	mov	r4, r2
 800b0d2:	4605      	mov	r5, r0
 800b0d4:	b118      	cbz	r0, 800b0de <__swbuf_r+0x12>
 800b0d6:	6983      	ldr	r3, [r0, #24]
 800b0d8:	b90b      	cbnz	r3, 800b0de <__swbuf_r+0x12>
 800b0da:	f7fd fb0b 	bl	80086f4 <__sinit>
 800b0de:	4b21      	ldr	r3, [pc, #132]	; (800b164 <__swbuf_r+0x98>)
 800b0e0:	429c      	cmp	r4, r3
 800b0e2:	d12b      	bne.n	800b13c <__swbuf_r+0x70>
 800b0e4:	686c      	ldr	r4, [r5, #4]
 800b0e6:	69a3      	ldr	r3, [r4, #24]
 800b0e8:	60a3      	str	r3, [r4, #8]
 800b0ea:	89a3      	ldrh	r3, [r4, #12]
 800b0ec:	071a      	lsls	r2, r3, #28
 800b0ee:	d52f      	bpl.n	800b150 <__swbuf_r+0x84>
 800b0f0:	6923      	ldr	r3, [r4, #16]
 800b0f2:	b36b      	cbz	r3, 800b150 <__swbuf_r+0x84>
 800b0f4:	6923      	ldr	r3, [r4, #16]
 800b0f6:	6820      	ldr	r0, [r4, #0]
 800b0f8:	1ac0      	subs	r0, r0, r3
 800b0fa:	6963      	ldr	r3, [r4, #20]
 800b0fc:	b2f6      	uxtb	r6, r6
 800b0fe:	4283      	cmp	r3, r0
 800b100:	4637      	mov	r7, r6
 800b102:	dc04      	bgt.n	800b10e <__swbuf_r+0x42>
 800b104:	4621      	mov	r1, r4
 800b106:	4628      	mov	r0, r5
 800b108:	f7ff f91a 	bl	800a340 <_fflush_r>
 800b10c:	bb30      	cbnz	r0, 800b15c <__swbuf_r+0x90>
 800b10e:	68a3      	ldr	r3, [r4, #8]
 800b110:	3b01      	subs	r3, #1
 800b112:	60a3      	str	r3, [r4, #8]
 800b114:	6823      	ldr	r3, [r4, #0]
 800b116:	1c5a      	adds	r2, r3, #1
 800b118:	6022      	str	r2, [r4, #0]
 800b11a:	701e      	strb	r6, [r3, #0]
 800b11c:	6963      	ldr	r3, [r4, #20]
 800b11e:	3001      	adds	r0, #1
 800b120:	4283      	cmp	r3, r0
 800b122:	d004      	beq.n	800b12e <__swbuf_r+0x62>
 800b124:	89a3      	ldrh	r3, [r4, #12]
 800b126:	07db      	lsls	r3, r3, #31
 800b128:	d506      	bpl.n	800b138 <__swbuf_r+0x6c>
 800b12a:	2e0a      	cmp	r6, #10
 800b12c:	d104      	bne.n	800b138 <__swbuf_r+0x6c>
 800b12e:	4621      	mov	r1, r4
 800b130:	4628      	mov	r0, r5
 800b132:	f7ff f905 	bl	800a340 <_fflush_r>
 800b136:	b988      	cbnz	r0, 800b15c <__swbuf_r+0x90>
 800b138:	4638      	mov	r0, r7
 800b13a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b13c:	4b0a      	ldr	r3, [pc, #40]	; (800b168 <__swbuf_r+0x9c>)
 800b13e:	429c      	cmp	r4, r3
 800b140:	d101      	bne.n	800b146 <__swbuf_r+0x7a>
 800b142:	68ac      	ldr	r4, [r5, #8]
 800b144:	e7cf      	b.n	800b0e6 <__swbuf_r+0x1a>
 800b146:	4b09      	ldr	r3, [pc, #36]	; (800b16c <__swbuf_r+0xa0>)
 800b148:	429c      	cmp	r4, r3
 800b14a:	bf08      	it	eq
 800b14c:	68ec      	ldreq	r4, [r5, #12]
 800b14e:	e7ca      	b.n	800b0e6 <__swbuf_r+0x1a>
 800b150:	4621      	mov	r1, r4
 800b152:	4628      	mov	r0, r5
 800b154:	f000 f80c 	bl	800b170 <__swsetup_r>
 800b158:	2800      	cmp	r0, #0
 800b15a:	d0cb      	beq.n	800b0f4 <__swbuf_r+0x28>
 800b15c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b160:	e7ea      	b.n	800b138 <__swbuf_r+0x6c>
 800b162:	bf00      	nop
 800b164:	0800be4c 	.word	0x0800be4c
 800b168:	0800be6c 	.word	0x0800be6c
 800b16c:	0800be2c 	.word	0x0800be2c

0800b170 <__swsetup_r>:
 800b170:	4b32      	ldr	r3, [pc, #200]	; (800b23c <__swsetup_r+0xcc>)
 800b172:	b570      	push	{r4, r5, r6, lr}
 800b174:	681d      	ldr	r5, [r3, #0]
 800b176:	4606      	mov	r6, r0
 800b178:	460c      	mov	r4, r1
 800b17a:	b125      	cbz	r5, 800b186 <__swsetup_r+0x16>
 800b17c:	69ab      	ldr	r3, [r5, #24]
 800b17e:	b913      	cbnz	r3, 800b186 <__swsetup_r+0x16>
 800b180:	4628      	mov	r0, r5
 800b182:	f7fd fab7 	bl	80086f4 <__sinit>
 800b186:	4b2e      	ldr	r3, [pc, #184]	; (800b240 <__swsetup_r+0xd0>)
 800b188:	429c      	cmp	r4, r3
 800b18a:	d10f      	bne.n	800b1ac <__swsetup_r+0x3c>
 800b18c:	686c      	ldr	r4, [r5, #4]
 800b18e:	89a3      	ldrh	r3, [r4, #12]
 800b190:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b194:	0719      	lsls	r1, r3, #28
 800b196:	d42c      	bmi.n	800b1f2 <__swsetup_r+0x82>
 800b198:	06dd      	lsls	r5, r3, #27
 800b19a:	d411      	bmi.n	800b1c0 <__swsetup_r+0x50>
 800b19c:	2309      	movs	r3, #9
 800b19e:	6033      	str	r3, [r6, #0]
 800b1a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b1a4:	81a3      	strh	r3, [r4, #12]
 800b1a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b1aa:	e03e      	b.n	800b22a <__swsetup_r+0xba>
 800b1ac:	4b25      	ldr	r3, [pc, #148]	; (800b244 <__swsetup_r+0xd4>)
 800b1ae:	429c      	cmp	r4, r3
 800b1b0:	d101      	bne.n	800b1b6 <__swsetup_r+0x46>
 800b1b2:	68ac      	ldr	r4, [r5, #8]
 800b1b4:	e7eb      	b.n	800b18e <__swsetup_r+0x1e>
 800b1b6:	4b24      	ldr	r3, [pc, #144]	; (800b248 <__swsetup_r+0xd8>)
 800b1b8:	429c      	cmp	r4, r3
 800b1ba:	bf08      	it	eq
 800b1bc:	68ec      	ldreq	r4, [r5, #12]
 800b1be:	e7e6      	b.n	800b18e <__swsetup_r+0x1e>
 800b1c0:	0758      	lsls	r0, r3, #29
 800b1c2:	d512      	bpl.n	800b1ea <__swsetup_r+0x7a>
 800b1c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b1c6:	b141      	cbz	r1, 800b1da <__swsetup_r+0x6a>
 800b1c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b1cc:	4299      	cmp	r1, r3
 800b1ce:	d002      	beq.n	800b1d6 <__swsetup_r+0x66>
 800b1d0:	4630      	mov	r0, r6
 800b1d2:	f7fd fb7b 	bl	80088cc <_free_r>
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	6363      	str	r3, [r4, #52]	; 0x34
 800b1da:	89a3      	ldrh	r3, [r4, #12]
 800b1dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b1e0:	81a3      	strh	r3, [r4, #12]
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	6063      	str	r3, [r4, #4]
 800b1e6:	6923      	ldr	r3, [r4, #16]
 800b1e8:	6023      	str	r3, [r4, #0]
 800b1ea:	89a3      	ldrh	r3, [r4, #12]
 800b1ec:	f043 0308 	orr.w	r3, r3, #8
 800b1f0:	81a3      	strh	r3, [r4, #12]
 800b1f2:	6923      	ldr	r3, [r4, #16]
 800b1f4:	b94b      	cbnz	r3, 800b20a <__swsetup_r+0x9a>
 800b1f6:	89a3      	ldrh	r3, [r4, #12]
 800b1f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b1fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b200:	d003      	beq.n	800b20a <__swsetup_r+0x9a>
 800b202:	4621      	mov	r1, r4
 800b204:	4630      	mov	r0, r6
 800b206:	f000 f865 	bl	800b2d4 <__smakebuf_r>
 800b20a:	89a0      	ldrh	r0, [r4, #12]
 800b20c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b210:	f010 0301 	ands.w	r3, r0, #1
 800b214:	d00a      	beq.n	800b22c <__swsetup_r+0xbc>
 800b216:	2300      	movs	r3, #0
 800b218:	60a3      	str	r3, [r4, #8]
 800b21a:	6963      	ldr	r3, [r4, #20]
 800b21c:	425b      	negs	r3, r3
 800b21e:	61a3      	str	r3, [r4, #24]
 800b220:	6923      	ldr	r3, [r4, #16]
 800b222:	b943      	cbnz	r3, 800b236 <__swsetup_r+0xc6>
 800b224:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b228:	d1ba      	bne.n	800b1a0 <__swsetup_r+0x30>
 800b22a:	bd70      	pop	{r4, r5, r6, pc}
 800b22c:	0781      	lsls	r1, r0, #30
 800b22e:	bf58      	it	pl
 800b230:	6963      	ldrpl	r3, [r4, #20]
 800b232:	60a3      	str	r3, [r4, #8]
 800b234:	e7f4      	b.n	800b220 <__swsetup_r+0xb0>
 800b236:	2000      	movs	r0, #0
 800b238:	e7f7      	b.n	800b22a <__swsetup_r+0xba>
 800b23a:	bf00      	nop
 800b23c:	200001ec 	.word	0x200001ec
 800b240:	0800be4c 	.word	0x0800be4c
 800b244:	0800be6c 	.word	0x0800be6c
 800b248:	0800be2c 	.word	0x0800be2c

0800b24c <__assert_func>:
 800b24c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b24e:	4614      	mov	r4, r2
 800b250:	461a      	mov	r2, r3
 800b252:	4b09      	ldr	r3, [pc, #36]	; (800b278 <__assert_func+0x2c>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	4605      	mov	r5, r0
 800b258:	68d8      	ldr	r0, [r3, #12]
 800b25a:	b14c      	cbz	r4, 800b270 <__assert_func+0x24>
 800b25c:	4b07      	ldr	r3, [pc, #28]	; (800b27c <__assert_func+0x30>)
 800b25e:	9100      	str	r1, [sp, #0]
 800b260:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b264:	4906      	ldr	r1, [pc, #24]	; (800b280 <__assert_func+0x34>)
 800b266:	462b      	mov	r3, r5
 800b268:	f7ff f8a6 	bl	800a3b8 <fiprintf>
 800b26c:	f000 f8da 	bl	800b424 <abort>
 800b270:	4b04      	ldr	r3, [pc, #16]	; (800b284 <__assert_func+0x38>)
 800b272:	461c      	mov	r4, r3
 800b274:	e7f3      	b.n	800b25e <__assert_func+0x12>
 800b276:	bf00      	nop
 800b278:	200001ec 	.word	0x200001ec
 800b27c:	0800c0bd 	.word	0x0800c0bd
 800b280:	0800c0ca 	.word	0x0800c0ca
 800b284:	0800c0f8 	.word	0x0800c0f8

0800b288 <__swhatbuf_r>:
 800b288:	b570      	push	{r4, r5, r6, lr}
 800b28a:	460e      	mov	r6, r1
 800b28c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b290:	2900      	cmp	r1, #0
 800b292:	b096      	sub	sp, #88	; 0x58
 800b294:	4614      	mov	r4, r2
 800b296:	461d      	mov	r5, r3
 800b298:	da08      	bge.n	800b2ac <__swhatbuf_r+0x24>
 800b29a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b29e:	2200      	movs	r2, #0
 800b2a0:	602a      	str	r2, [r5, #0]
 800b2a2:	061a      	lsls	r2, r3, #24
 800b2a4:	d410      	bmi.n	800b2c8 <__swhatbuf_r+0x40>
 800b2a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2aa:	e00e      	b.n	800b2ca <__swhatbuf_r+0x42>
 800b2ac:	466a      	mov	r2, sp
 800b2ae:	f000 f8c1 	bl	800b434 <_fstat_r>
 800b2b2:	2800      	cmp	r0, #0
 800b2b4:	dbf1      	blt.n	800b29a <__swhatbuf_r+0x12>
 800b2b6:	9a01      	ldr	r2, [sp, #4]
 800b2b8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b2bc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b2c0:	425a      	negs	r2, r3
 800b2c2:	415a      	adcs	r2, r3
 800b2c4:	602a      	str	r2, [r5, #0]
 800b2c6:	e7ee      	b.n	800b2a6 <__swhatbuf_r+0x1e>
 800b2c8:	2340      	movs	r3, #64	; 0x40
 800b2ca:	2000      	movs	r0, #0
 800b2cc:	6023      	str	r3, [r4, #0]
 800b2ce:	b016      	add	sp, #88	; 0x58
 800b2d0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b2d4 <__smakebuf_r>:
 800b2d4:	898b      	ldrh	r3, [r1, #12]
 800b2d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b2d8:	079d      	lsls	r5, r3, #30
 800b2da:	4606      	mov	r6, r0
 800b2dc:	460c      	mov	r4, r1
 800b2de:	d507      	bpl.n	800b2f0 <__smakebuf_r+0x1c>
 800b2e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b2e4:	6023      	str	r3, [r4, #0]
 800b2e6:	6123      	str	r3, [r4, #16]
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	6163      	str	r3, [r4, #20]
 800b2ec:	b002      	add	sp, #8
 800b2ee:	bd70      	pop	{r4, r5, r6, pc}
 800b2f0:	ab01      	add	r3, sp, #4
 800b2f2:	466a      	mov	r2, sp
 800b2f4:	f7ff ffc8 	bl	800b288 <__swhatbuf_r>
 800b2f8:	9900      	ldr	r1, [sp, #0]
 800b2fa:	4605      	mov	r5, r0
 800b2fc:	4630      	mov	r0, r6
 800b2fe:	f7fd fb51 	bl	80089a4 <_malloc_r>
 800b302:	b948      	cbnz	r0, 800b318 <__smakebuf_r+0x44>
 800b304:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b308:	059a      	lsls	r2, r3, #22
 800b30a:	d4ef      	bmi.n	800b2ec <__smakebuf_r+0x18>
 800b30c:	f023 0303 	bic.w	r3, r3, #3
 800b310:	f043 0302 	orr.w	r3, r3, #2
 800b314:	81a3      	strh	r3, [r4, #12]
 800b316:	e7e3      	b.n	800b2e0 <__smakebuf_r+0xc>
 800b318:	4b0d      	ldr	r3, [pc, #52]	; (800b350 <__smakebuf_r+0x7c>)
 800b31a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b31c:	89a3      	ldrh	r3, [r4, #12]
 800b31e:	6020      	str	r0, [r4, #0]
 800b320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b324:	81a3      	strh	r3, [r4, #12]
 800b326:	9b00      	ldr	r3, [sp, #0]
 800b328:	6163      	str	r3, [r4, #20]
 800b32a:	9b01      	ldr	r3, [sp, #4]
 800b32c:	6120      	str	r0, [r4, #16]
 800b32e:	b15b      	cbz	r3, 800b348 <__smakebuf_r+0x74>
 800b330:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b334:	4630      	mov	r0, r6
 800b336:	f000 f88f 	bl	800b458 <_isatty_r>
 800b33a:	b128      	cbz	r0, 800b348 <__smakebuf_r+0x74>
 800b33c:	89a3      	ldrh	r3, [r4, #12]
 800b33e:	f023 0303 	bic.w	r3, r3, #3
 800b342:	f043 0301 	orr.w	r3, r3, #1
 800b346:	81a3      	strh	r3, [r4, #12]
 800b348:	89a0      	ldrh	r0, [r4, #12]
 800b34a:	4305      	orrs	r5, r0
 800b34c:	81a5      	strh	r5, [r4, #12]
 800b34e:	e7cd      	b.n	800b2ec <__smakebuf_r+0x18>
 800b350:	0800868d 	.word	0x0800868d

0800b354 <__ascii_mbtowc>:
 800b354:	b082      	sub	sp, #8
 800b356:	b901      	cbnz	r1, 800b35a <__ascii_mbtowc+0x6>
 800b358:	a901      	add	r1, sp, #4
 800b35a:	b142      	cbz	r2, 800b36e <__ascii_mbtowc+0x1a>
 800b35c:	b14b      	cbz	r3, 800b372 <__ascii_mbtowc+0x1e>
 800b35e:	7813      	ldrb	r3, [r2, #0]
 800b360:	600b      	str	r3, [r1, #0]
 800b362:	7812      	ldrb	r2, [r2, #0]
 800b364:	1e10      	subs	r0, r2, #0
 800b366:	bf18      	it	ne
 800b368:	2001      	movne	r0, #1
 800b36a:	b002      	add	sp, #8
 800b36c:	4770      	bx	lr
 800b36e:	4610      	mov	r0, r2
 800b370:	e7fb      	b.n	800b36a <__ascii_mbtowc+0x16>
 800b372:	f06f 0001 	mvn.w	r0, #1
 800b376:	e7f8      	b.n	800b36a <__ascii_mbtowc+0x16>

0800b378 <memmove>:
 800b378:	4288      	cmp	r0, r1
 800b37a:	b510      	push	{r4, lr}
 800b37c:	eb01 0402 	add.w	r4, r1, r2
 800b380:	d902      	bls.n	800b388 <memmove+0x10>
 800b382:	4284      	cmp	r4, r0
 800b384:	4623      	mov	r3, r4
 800b386:	d807      	bhi.n	800b398 <memmove+0x20>
 800b388:	1e43      	subs	r3, r0, #1
 800b38a:	42a1      	cmp	r1, r4
 800b38c:	d008      	beq.n	800b3a0 <memmove+0x28>
 800b38e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b392:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b396:	e7f8      	b.n	800b38a <memmove+0x12>
 800b398:	4402      	add	r2, r0
 800b39a:	4601      	mov	r1, r0
 800b39c:	428a      	cmp	r2, r1
 800b39e:	d100      	bne.n	800b3a2 <memmove+0x2a>
 800b3a0:	bd10      	pop	{r4, pc}
 800b3a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b3a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b3aa:	e7f7      	b.n	800b39c <memmove+0x24>

0800b3ac <_realloc_r>:
 800b3ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3b0:	4680      	mov	r8, r0
 800b3b2:	4614      	mov	r4, r2
 800b3b4:	460e      	mov	r6, r1
 800b3b6:	b921      	cbnz	r1, 800b3c2 <_realloc_r+0x16>
 800b3b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3bc:	4611      	mov	r1, r2
 800b3be:	f7fd baf1 	b.w	80089a4 <_malloc_r>
 800b3c2:	b92a      	cbnz	r2, 800b3d0 <_realloc_r+0x24>
 800b3c4:	f7fd fa82 	bl	80088cc <_free_r>
 800b3c8:	4625      	mov	r5, r4
 800b3ca:	4628      	mov	r0, r5
 800b3cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3d0:	f000 f852 	bl	800b478 <_malloc_usable_size_r>
 800b3d4:	4284      	cmp	r4, r0
 800b3d6:	4607      	mov	r7, r0
 800b3d8:	d802      	bhi.n	800b3e0 <_realloc_r+0x34>
 800b3da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b3de:	d812      	bhi.n	800b406 <_realloc_r+0x5a>
 800b3e0:	4621      	mov	r1, r4
 800b3e2:	4640      	mov	r0, r8
 800b3e4:	f7fd fade 	bl	80089a4 <_malloc_r>
 800b3e8:	4605      	mov	r5, r0
 800b3ea:	2800      	cmp	r0, #0
 800b3ec:	d0ed      	beq.n	800b3ca <_realloc_r+0x1e>
 800b3ee:	42bc      	cmp	r4, r7
 800b3f0:	4622      	mov	r2, r4
 800b3f2:	4631      	mov	r1, r6
 800b3f4:	bf28      	it	cs
 800b3f6:	463a      	movcs	r2, r7
 800b3f8:	f7fd fa52 	bl	80088a0 <memcpy>
 800b3fc:	4631      	mov	r1, r6
 800b3fe:	4640      	mov	r0, r8
 800b400:	f7fd fa64 	bl	80088cc <_free_r>
 800b404:	e7e1      	b.n	800b3ca <_realloc_r+0x1e>
 800b406:	4635      	mov	r5, r6
 800b408:	e7df      	b.n	800b3ca <_realloc_r+0x1e>

0800b40a <__ascii_wctomb>:
 800b40a:	b149      	cbz	r1, 800b420 <__ascii_wctomb+0x16>
 800b40c:	2aff      	cmp	r2, #255	; 0xff
 800b40e:	bf85      	ittet	hi
 800b410:	238a      	movhi	r3, #138	; 0x8a
 800b412:	6003      	strhi	r3, [r0, #0]
 800b414:	700a      	strbls	r2, [r1, #0]
 800b416:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b41a:	bf98      	it	ls
 800b41c:	2001      	movls	r0, #1
 800b41e:	4770      	bx	lr
 800b420:	4608      	mov	r0, r1
 800b422:	4770      	bx	lr

0800b424 <abort>:
 800b424:	b508      	push	{r3, lr}
 800b426:	2006      	movs	r0, #6
 800b428:	f000 f856 	bl	800b4d8 <raise>
 800b42c:	2001      	movs	r0, #1
 800b42e:	f7f8 f9b1 	bl	8003794 <_exit>
	...

0800b434 <_fstat_r>:
 800b434:	b538      	push	{r3, r4, r5, lr}
 800b436:	4d07      	ldr	r5, [pc, #28]	; (800b454 <_fstat_r+0x20>)
 800b438:	2300      	movs	r3, #0
 800b43a:	4604      	mov	r4, r0
 800b43c:	4608      	mov	r0, r1
 800b43e:	4611      	mov	r1, r2
 800b440:	602b      	str	r3, [r5, #0]
 800b442:	f7f8 f9f6 	bl	8003832 <_fstat>
 800b446:	1c43      	adds	r3, r0, #1
 800b448:	d102      	bne.n	800b450 <_fstat_r+0x1c>
 800b44a:	682b      	ldr	r3, [r5, #0]
 800b44c:	b103      	cbz	r3, 800b450 <_fstat_r+0x1c>
 800b44e:	6023      	str	r3, [r4, #0]
 800b450:	bd38      	pop	{r3, r4, r5, pc}
 800b452:	bf00      	nop
 800b454:	20001514 	.word	0x20001514

0800b458 <_isatty_r>:
 800b458:	b538      	push	{r3, r4, r5, lr}
 800b45a:	4d06      	ldr	r5, [pc, #24]	; (800b474 <_isatty_r+0x1c>)
 800b45c:	2300      	movs	r3, #0
 800b45e:	4604      	mov	r4, r0
 800b460:	4608      	mov	r0, r1
 800b462:	602b      	str	r3, [r5, #0]
 800b464:	f7f8 f9f5 	bl	8003852 <_isatty>
 800b468:	1c43      	adds	r3, r0, #1
 800b46a:	d102      	bne.n	800b472 <_isatty_r+0x1a>
 800b46c:	682b      	ldr	r3, [r5, #0]
 800b46e:	b103      	cbz	r3, 800b472 <_isatty_r+0x1a>
 800b470:	6023      	str	r3, [r4, #0]
 800b472:	bd38      	pop	{r3, r4, r5, pc}
 800b474:	20001514 	.word	0x20001514

0800b478 <_malloc_usable_size_r>:
 800b478:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b47c:	1f18      	subs	r0, r3, #4
 800b47e:	2b00      	cmp	r3, #0
 800b480:	bfbc      	itt	lt
 800b482:	580b      	ldrlt	r3, [r1, r0]
 800b484:	18c0      	addlt	r0, r0, r3
 800b486:	4770      	bx	lr

0800b488 <_raise_r>:
 800b488:	291f      	cmp	r1, #31
 800b48a:	b538      	push	{r3, r4, r5, lr}
 800b48c:	4604      	mov	r4, r0
 800b48e:	460d      	mov	r5, r1
 800b490:	d904      	bls.n	800b49c <_raise_r+0x14>
 800b492:	2316      	movs	r3, #22
 800b494:	6003      	str	r3, [r0, #0]
 800b496:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b49a:	bd38      	pop	{r3, r4, r5, pc}
 800b49c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b49e:	b112      	cbz	r2, 800b4a6 <_raise_r+0x1e>
 800b4a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b4a4:	b94b      	cbnz	r3, 800b4ba <_raise_r+0x32>
 800b4a6:	4620      	mov	r0, r4
 800b4a8:	f000 f830 	bl	800b50c <_getpid_r>
 800b4ac:	462a      	mov	r2, r5
 800b4ae:	4601      	mov	r1, r0
 800b4b0:	4620      	mov	r0, r4
 800b4b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b4b6:	f000 b817 	b.w	800b4e8 <_kill_r>
 800b4ba:	2b01      	cmp	r3, #1
 800b4bc:	d00a      	beq.n	800b4d4 <_raise_r+0x4c>
 800b4be:	1c59      	adds	r1, r3, #1
 800b4c0:	d103      	bne.n	800b4ca <_raise_r+0x42>
 800b4c2:	2316      	movs	r3, #22
 800b4c4:	6003      	str	r3, [r0, #0]
 800b4c6:	2001      	movs	r0, #1
 800b4c8:	e7e7      	b.n	800b49a <_raise_r+0x12>
 800b4ca:	2400      	movs	r4, #0
 800b4cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b4d0:	4628      	mov	r0, r5
 800b4d2:	4798      	blx	r3
 800b4d4:	2000      	movs	r0, #0
 800b4d6:	e7e0      	b.n	800b49a <_raise_r+0x12>

0800b4d8 <raise>:
 800b4d8:	4b02      	ldr	r3, [pc, #8]	; (800b4e4 <raise+0xc>)
 800b4da:	4601      	mov	r1, r0
 800b4dc:	6818      	ldr	r0, [r3, #0]
 800b4de:	f7ff bfd3 	b.w	800b488 <_raise_r>
 800b4e2:	bf00      	nop
 800b4e4:	200001ec 	.word	0x200001ec

0800b4e8 <_kill_r>:
 800b4e8:	b538      	push	{r3, r4, r5, lr}
 800b4ea:	4d07      	ldr	r5, [pc, #28]	; (800b508 <_kill_r+0x20>)
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	4604      	mov	r4, r0
 800b4f0:	4608      	mov	r0, r1
 800b4f2:	4611      	mov	r1, r2
 800b4f4:	602b      	str	r3, [r5, #0]
 800b4f6:	f7f8 f93d 	bl	8003774 <_kill>
 800b4fa:	1c43      	adds	r3, r0, #1
 800b4fc:	d102      	bne.n	800b504 <_kill_r+0x1c>
 800b4fe:	682b      	ldr	r3, [r5, #0]
 800b500:	b103      	cbz	r3, 800b504 <_kill_r+0x1c>
 800b502:	6023      	str	r3, [r4, #0]
 800b504:	bd38      	pop	{r3, r4, r5, pc}
 800b506:	bf00      	nop
 800b508:	20001514 	.word	0x20001514

0800b50c <_getpid_r>:
 800b50c:	f7f8 b92a 	b.w	8003764 <_getpid>

0800b510 <atan2>:
 800b510:	f000 b82e 	b.w	800b570 <__ieee754_atan2>

0800b514 <sqrt>:
 800b514:	b538      	push	{r3, r4, r5, lr}
 800b516:	ed2d 8b02 	vpush	{d8}
 800b51a:	ec55 4b10 	vmov	r4, r5, d0
 800b51e:	f000 f8f1 	bl	800b704 <__ieee754_sqrt>
 800b522:	4622      	mov	r2, r4
 800b524:	462b      	mov	r3, r5
 800b526:	4620      	mov	r0, r4
 800b528:	4629      	mov	r1, r5
 800b52a:	eeb0 8a40 	vmov.f32	s16, s0
 800b52e:	eef0 8a60 	vmov.f32	s17, s1
 800b532:	f7f5 fafb 	bl	8000b2c <__aeabi_dcmpun>
 800b536:	b990      	cbnz	r0, 800b55e <sqrt+0x4a>
 800b538:	2200      	movs	r2, #0
 800b53a:	2300      	movs	r3, #0
 800b53c:	4620      	mov	r0, r4
 800b53e:	4629      	mov	r1, r5
 800b540:	f7f5 facc 	bl	8000adc <__aeabi_dcmplt>
 800b544:	b158      	cbz	r0, 800b55e <sqrt+0x4a>
 800b546:	f7fd f877 	bl	8008638 <__errno>
 800b54a:	2321      	movs	r3, #33	; 0x21
 800b54c:	6003      	str	r3, [r0, #0]
 800b54e:	2200      	movs	r2, #0
 800b550:	2300      	movs	r3, #0
 800b552:	4610      	mov	r0, r2
 800b554:	4619      	mov	r1, r3
 800b556:	f7f5 f979 	bl	800084c <__aeabi_ddiv>
 800b55a:	ec41 0b18 	vmov	d8, r0, r1
 800b55e:	eeb0 0a48 	vmov.f32	s0, s16
 800b562:	eef0 0a68 	vmov.f32	s1, s17
 800b566:	ecbd 8b02 	vpop	{d8}
 800b56a:	bd38      	pop	{r3, r4, r5, pc}
 800b56c:	0000      	movs	r0, r0
	...

0800b570 <__ieee754_atan2>:
 800b570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b574:	ec57 6b11 	vmov	r6, r7, d1
 800b578:	4273      	negs	r3, r6
 800b57a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800b700 <__ieee754_atan2+0x190>
 800b57e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800b582:	4333      	orrs	r3, r6
 800b584:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b588:	4573      	cmp	r3, lr
 800b58a:	ec51 0b10 	vmov	r0, r1, d0
 800b58e:	ee11 8a10 	vmov	r8, s2
 800b592:	d80a      	bhi.n	800b5aa <__ieee754_atan2+0x3a>
 800b594:	4244      	negs	r4, r0
 800b596:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b59a:	4304      	orrs	r4, r0
 800b59c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800b5a0:	4574      	cmp	r4, lr
 800b5a2:	ee10 9a10 	vmov	r9, s0
 800b5a6:	468c      	mov	ip, r1
 800b5a8:	d907      	bls.n	800b5ba <__ieee754_atan2+0x4a>
 800b5aa:	4632      	mov	r2, r6
 800b5ac:	463b      	mov	r3, r7
 800b5ae:	f7f4 fe6d 	bl	800028c <__adddf3>
 800b5b2:	ec41 0b10 	vmov	d0, r0, r1
 800b5b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5ba:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800b5be:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b5c2:	4334      	orrs	r4, r6
 800b5c4:	d103      	bne.n	800b5ce <__ieee754_atan2+0x5e>
 800b5c6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5ca:	f000 b94d 	b.w	800b868 <atan>
 800b5ce:	17bc      	asrs	r4, r7, #30
 800b5d0:	f004 0402 	and.w	r4, r4, #2
 800b5d4:	ea53 0909 	orrs.w	r9, r3, r9
 800b5d8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800b5dc:	d107      	bne.n	800b5ee <__ieee754_atan2+0x7e>
 800b5de:	2c02      	cmp	r4, #2
 800b5e0:	d060      	beq.n	800b6a4 <__ieee754_atan2+0x134>
 800b5e2:	2c03      	cmp	r4, #3
 800b5e4:	d1e5      	bne.n	800b5b2 <__ieee754_atan2+0x42>
 800b5e6:	a142      	add	r1, pc, #264	; (adr r1, 800b6f0 <__ieee754_atan2+0x180>)
 800b5e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5ec:	e7e1      	b.n	800b5b2 <__ieee754_atan2+0x42>
 800b5ee:	ea52 0808 	orrs.w	r8, r2, r8
 800b5f2:	d106      	bne.n	800b602 <__ieee754_atan2+0x92>
 800b5f4:	f1bc 0f00 	cmp.w	ip, #0
 800b5f8:	da5f      	bge.n	800b6ba <__ieee754_atan2+0x14a>
 800b5fa:	a13f      	add	r1, pc, #252	; (adr r1, 800b6f8 <__ieee754_atan2+0x188>)
 800b5fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b600:	e7d7      	b.n	800b5b2 <__ieee754_atan2+0x42>
 800b602:	4572      	cmp	r2, lr
 800b604:	d10f      	bne.n	800b626 <__ieee754_atan2+0xb6>
 800b606:	4293      	cmp	r3, r2
 800b608:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800b60c:	d107      	bne.n	800b61e <__ieee754_atan2+0xae>
 800b60e:	2c02      	cmp	r4, #2
 800b610:	d84c      	bhi.n	800b6ac <__ieee754_atan2+0x13c>
 800b612:	4b35      	ldr	r3, [pc, #212]	; (800b6e8 <__ieee754_atan2+0x178>)
 800b614:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800b618:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b61c:	e7c9      	b.n	800b5b2 <__ieee754_atan2+0x42>
 800b61e:	2c02      	cmp	r4, #2
 800b620:	d848      	bhi.n	800b6b4 <__ieee754_atan2+0x144>
 800b622:	4b32      	ldr	r3, [pc, #200]	; (800b6ec <__ieee754_atan2+0x17c>)
 800b624:	e7f6      	b.n	800b614 <__ieee754_atan2+0xa4>
 800b626:	4573      	cmp	r3, lr
 800b628:	d0e4      	beq.n	800b5f4 <__ieee754_atan2+0x84>
 800b62a:	1a9b      	subs	r3, r3, r2
 800b62c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800b630:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b634:	da1e      	bge.n	800b674 <__ieee754_atan2+0x104>
 800b636:	2f00      	cmp	r7, #0
 800b638:	da01      	bge.n	800b63e <__ieee754_atan2+0xce>
 800b63a:	323c      	adds	r2, #60	; 0x3c
 800b63c:	db1e      	blt.n	800b67c <__ieee754_atan2+0x10c>
 800b63e:	4632      	mov	r2, r6
 800b640:	463b      	mov	r3, r7
 800b642:	f7f5 f903 	bl	800084c <__aeabi_ddiv>
 800b646:	ec41 0b10 	vmov	d0, r0, r1
 800b64a:	f000 faad 	bl	800bba8 <fabs>
 800b64e:	f000 f90b 	bl	800b868 <atan>
 800b652:	ec51 0b10 	vmov	r0, r1, d0
 800b656:	2c01      	cmp	r4, #1
 800b658:	d013      	beq.n	800b682 <__ieee754_atan2+0x112>
 800b65a:	2c02      	cmp	r4, #2
 800b65c:	d015      	beq.n	800b68a <__ieee754_atan2+0x11a>
 800b65e:	2c00      	cmp	r4, #0
 800b660:	d0a7      	beq.n	800b5b2 <__ieee754_atan2+0x42>
 800b662:	a319      	add	r3, pc, #100	; (adr r3, 800b6c8 <__ieee754_atan2+0x158>)
 800b664:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b668:	f7f4 fe0e 	bl	8000288 <__aeabi_dsub>
 800b66c:	a318      	add	r3, pc, #96	; (adr r3, 800b6d0 <__ieee754_atan2+0x160>)
 800b66e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b672:	e014      	b.n	800b69e <__ieee754_atan2+0x12e>
 800b674:	a118      	add	r1, pc, #96	; (adr r1, 800b6d8 <__ieee754_atan2+0x168>)
 800b676:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b67a:	e7ec      	b.n	800b656 <__ieee754_atan2+0xe6>
 800b67c:	2000      	movs	r0, #0
 800b67e:	2100      	movs	r1, #0
 800b680:	e7e9      	b.n	800b656 <__ieee754_atan2+0xe6>
 800b682:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b686:	4619      	mov	r1, r3
 800b688:	e793      	b.n	800b5b2 <__ieee754_atan2+0x42>
 800b68a:	a30f      	add	r3, pc, #60	; (adr r3, 800b6c8 <__ieee754_atan2+0x158>)
 800b68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b690:	f7f4 fdfa 	bl	8000288 <__aeabi_dsub>
 800b694:	4602      	mov	r2, r0
 800b696:	460b      	mov	r3, r1
 800b698:	a10d      	add	r1, pc, #52	; (adr r1, 800b6d0 <__ieee754_atan2+0x160>)
 800b69a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b69e:	f7f4 fdf3 	bl	8000288 <__aeabi_dsub>
 800b6a2:	e786      	b.n	800b5b2 <__ieee754_atan2+0x42>
 800b6a4:	a10a      	add	r1, pc, #40	; (adr r1, 800b6d0 <__ieee754_atan2+0x160>)
 800b6a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b6aa:	e782      	b.n	800b5b2 <__ieee754_atan2+0x42>
 800b6ac:	a10c      	add	r1, pc, #48	; (adr r1, 800b6e0 <__ieee754_atan2+0x170>)
 800b6ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b6b2:	e77e      	b.n	800b5b2 <__ieee754_atan2+0x42>
 800b6b4:	2000      	movs	r0, #0
 800b6b6:	2100      	movs	r1, #0
 800b6b8:	e77b      	b.n	800b5b2 <__ieee754_atan2+0x42>
 800b6ba:	a107      	add	r1, pc, #28	; (adr r1, 800b6d8 <__ieee754_atan2+0x168>)
 800b6bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b6c0:	e777      	b.n	800b5b2 <__ieee754_atan2+0x42>
 800b6c2:	bf00      	nop
 800b6c4:	f3af 8000 	nop.w
 800b6c8:	33145c07 	.word	0x33145c07
 800b6cc:	3ca1a626 	.word	0x3ca1a626
 800b6d0:	54442d18 	.word	0x54442d18
 800b6d4:	400921fb 	.word	0x400921fb
 800b6d8:	54442d18 	.word	0x54442d18
 800b6dc:	3ff921fb 	.word	0x3ff921fb
 800b6e0:	54442d18 	.word	0x54442d18
 800b6e4:	3fe921fb 	.word	0x3fe921fb
 800b6e8:	0800c208 	.word	0x0800c208
 800b6ec:	0800c220 	.word	0x0800c220
 800b6f0:	54442d18 	.word	0x54442d18
 800b6f4:	c00921fb 	.word	0xc00921fb
 800b6f8:	54442d18 	.word	0x54442d18
 800b6fc:	bff921fb 	.word	0xbff921fb
 800b700:	7ff00000 	.word	0x7ff00000

0800b704 <__ieee754_sqrt>:
 800b704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b708:	ec55 4b10 	vmov	r4, r5, d0
 800b70c:	4e55      	ldr	r6, [pc, #340]	; (800b864 <__ieee754_sqrt+0x160>)
 800b70e:	43ae      	bics	r6, r5
 800b710:	ee10 0a10 	vmov	r0, s0
 800b714:	ee10 3a10 	vmov	r3, s0
 800b718:	462a      	mov	r2, r5
 800b71a:	4629      	mov	r1, r5
 800b71c:	d110      	bne.n	800b740 <__ieee754_sqrt+0x3c>
 800b71e:	ee10 2a10 	vmov	r2, s0
 800b722:	462b      	mov	r3, r5
 800b724:	f7f4 ff68 	bl	80005f8 <__aeabi_dmul>
 800b728:	4602      	mov	r2, r0
 800b72a:	460b      	mov	r3, r1
 800b72c:	4620      	mov	r0, r4
 800b72e:	4629      	mov	r1, r5
 800b730:	f7f4 fdac 	bl	800028c <__adddf3>
 800b734:	4604      	mov	r4, r0
 800b736:	460d      	mov	r5, r1
 800b738:	ec45 4b10 	vmov	d0, r4, r5
 800b73c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b740:	2d00      	cmp	r5, #0
 800b742:	dc10      	bgt.n	800b766 <__ieee754_sqrt+0x62>
 800b744:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b748:	4330      	orrs	r0, r6
 800b74a:	d0f5      	beq.n	800b738 <__ieee754_sqrt+0x34>
 800b74c:	b15d      	cbz	r5, 800b766 <__ieee754_sqrt+0x62>
 800b74e:	ee10 2a10 	vmov	r2, s0
 800b752:	462b      	mov	r3, r5
 800b754:	ee10 0a10 	vmov	r0, s0
 800b758:	f7f4 fd96 	bl	8000288 <__aeabi_dsub>
 800b75c:	4602      	mov	r2, r0
 800b75e:	460b      	mov	r3, r1
 800b760:	f7f5 f874 	bl	800084c <__aeabi_ddiv>
 800b764:	e7e6      	b.n	800b734 <__ieee754_sqrt+0x30>
 800b766:	1512      	asrs	r2, r2, #20
 800b768:	d074      	beq.n	800b854 <__ieee754_sqrt+0x150>
 800b76a:	07d4      	lsls	r4, r2, #31
 800b76c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b770:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800b774:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b778:	bf5e      	ittt	pl
 800b77a:	0fda      	lsrpl	r2, r3, #31
 800b77c:	005b      	lslpl	r3, r3, #1
 800b77e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800b782:	2400      	movs	r4, #0
 800b784:	0fda      	lsrs	r2, r3, #31
 800b786:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800b78a:	107f      	asrs	r7, r7, #1
 800b78c:	005b      	lsls	r3, r3, #1
 800b78e:	2516      	movs	r5, #22
 800b790:	4620      	mov	r0, r4
 800b792:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b796:	1886      	adds	r6, r0, r2
 800b798:	428e      	cmp	r6, r1
 800b79a:	bfde      	ittt	le
 800b79c:	1b89      	suble	r1, r1, r6
 800b79e:	18b0      	addle	r0, r6, r2
 800b7a0:	18a4      	addle	r4, r4, r2
 800b7a2:	0049      	lsls	r1, r1, #1
 800b7a4:	3d01      	subs	r5, #1
 800b7a6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800b7aa:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b7ae:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b7b2:	d1f0      	bne.n	800b796 <__ieee754_sqrt+0x92>
 800b7b4:	462a      	mov	r2, r5
 800b7b6:	f04f 0e20 	mov.w	lr, #32
 800b7ba:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b7be:	4281      	cmp	r1, r0
 800b7c0:	eb06 0c05 	add.w	ip, r6, r5
 800b7c4:	dc02      	bgt.n	800b7cc <__ieee754_sqrt+0xc8>
 800b7c6:	d113      	bne.n	800b7f0 <__ieee754_sqrt+0xec>
 800b7c8:	459c      	cmp	ip, r3
 800b7ca:	d811      	bhi.n	800b7f0 <__ieee754_sqrt+0xec>
 800b7cc:	f1bc 0f00 	cmp.w	ip, #0
 800b7d0:	eb0c 0506 	add.w	r5, ip, r6
 800b7d4:	da43      	bge.n	800b85e <__ieee754_sqrt+0x15a>
 800b7d6:	2d00      	cmp	r5, #0
 800b7d8:	db41      	blt.n	800b85e <__ieee754_sqrt+0x15a>
 800b7da:	f100 0801 	add.w	r8, r0, #1
 800b7de:	1a09      	subs	r1, r1, r0
 800b7e0:	459c      	cmp	ip, r3
 800b7e2:	bf88      	it	hi
 800b7e4:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800b7e8:	eba3 030c 	sub.w	r3, r3, ip
 800b7ec:	4432      	add	r2, r6
 800b7ee:	4640      	mov	r0, r8
 800b7f0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800b7f4:	f1be 0e01 	subs.w	lr, lr, #1
 800b7f8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800b7fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b800:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b804:	d1db      	bne.n	800b7be <__ieee754_sqrt+0xba>
 800b806:	430b      	orrs	r3, r1
 800b808:	d006      	beq.n	800b818 <__ieee754_sqrt+0x114>
 800b80a:	1c50      	adds	r0, r2, #1
 800b80c:	bf13      	iteet	ne
 800b80e:	3201      	addne	r2, #1
 800b810:	3401      	addeq	r4, #1
 800b812:	4672      	moveq	r2, lr
 800b814:	f022 0201 	bicne.w	r2, r2, #1
 800b818:	1063      	asrs	r3, r4, #1
 800b81a:	0852      	lsrs	r2, r2, #1
 800b81c:	07e1      	lsls	r1, r4, #31
 800b81e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b822:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b826:	bf48      	it	mi
 800b828:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b82c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800b830:	4614      	mov	r4, r2
 800b832:	e781      	b.n	800b738 <__ieee754_sqrt+0x34>
 800b834:	0ad9      	lsrs	r1, r3, #11
 800b836:	3815      	subs	r0, #21
 800b838:	055b      	lsls	r3, r3, #21
 800b83a:	2900      	cmp	r1, #0
 800b83c:	d0fa      	beq.n	800b834 <__ieee754_sqrt+0x130>
 800b83e:	02cd      	lsls	r5, r1, #11
 800b840:	d50a      	bpl.n	800b858 <__ieee754_sqrt+0x154>
 800b842:	f1c2 0420 	rsb	r4, r2, #32
 800b846:	fa23 f404 	lsr.w	r4, r3, r4
 800b84a:	1e55      	subs	r5, r2, #1
 800b84c:	4093      	lsls	r3, r2
 800b84e:	4321      	orrs	r1, r4
 800b850:	1b42      	subs	r2, r0, r5
 800b852:	e78a      	b.n	800b76a <__ieee754_sqrt+0x66>
 800b854:	4610      	mov	r0, r2
 800b856:	e7f0      	b.n	800b83a <__ieee754_sqrt+0x136>
 800b858:	0049      	lsls	r1, r1, #1
 800b85a:	3201      	adds	r2, #1
 800b85c:	e7ef      	b.n	800b83e <__ieee754_sqrt+0x13a>
 800b85e:	4680      	mov	r8, r0
 800b860:	e7bd      	b.n	800b7de <__ieee754_sqrt+0xda>
 800b862:	bf00      	nop
 800b864:	7ff00000 	.word	0x7ff00000

0800b868 <atan>:
 800b868:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b86c:	ec55 4b10 	vmov	r4, r5, d0
 800b870:	4bc3      	ldr	r3, [pc, #780]	; (800bb80 <atan+0x318>)
 800b872:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b876:	429e      	cmp	r6, r3
 800b878:	46ab      	mov	fp, r5
 800b87a:	dd18      	ble.n	800b8ae <atan+0x46>
 800b87c:	4bc1      	ldr	r3, [pc, #772]	; (800bb84 <atan+0x31c>)
 800b87e:	429e      	cmp	r6, r3
 800b880:	dc01      	bgt.n	800b886 <atan+0x1e>
 800b882:	d109      	bne.n	800b898 <atan+0x30>
 800b884:	b144      	cbz	r4, 800b898 <atan+0x30>
 800b886:	4622      	mov	r2, r4
 800b888:	462b      	mov	r3, r5
 800b88a:	4620      	mov	r0, r4
 800b88c:	4629      	mov	r1, r5
 800b88e:	f7f4 fcfd 	bl	800028c <__adddf3>
 800b892:	4604      	mov	r4, r0
 800b894:	460d      	mov	r5, r1
 800b896:	e006      	b.n	800b8a6 <atan+0x3e>
 800b898:	f1bb 0f00 	cmp.w	fp, #0
 800b89c:	f300 8131 	bgt.w	800bb02 <atan+0x29a>
 800b8a0:	a59b      	add	r5, pc, #620	; (adr r5, 800bb10 <atan+0x2a8>)
 800b8a2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b8a6:	ec45 4b10 	vmov	d0, r4, r5
 800b8aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8ae:	4bb6      	ldr	r3, [pc, #728]	; (800bb88 <atan+0x320>)
 800b8b0:	429e      	cmp	r6, r3
 800b8b2:	dc14      	bgt.n	800b8de <atan+0x76>
 800b8b4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b8b8:	429e      	cmp	r6, r3
 800b8ba:	dc0d      	bgt.n	800b8d8 <atan+0x70>
 800b8bc:	a396      	add	r3, pc, #600	; (adr r3, 800bb18 <atan+0x2b0>)
 800b8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c2:	ee10 0a10 	vmov	r0, s0
 800b8c6:	4629      	mov	r1, r5
 800b8c8:	f7f4 fce0 	bl	800028c <__adddf3>
 800b8cc:	4baf      	ldr	r3, [pc, #700]	; (800bb8c <atan+0x324>)
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	f7f5 f922 	bl	8000b18 <__aeabi_dcmpgt>
 800b8d4:	2800      	cmp	r0, #0
 800b8d6:	d1e6      	bne.n	800b8a6 <atan+0x3e>
 800b8d8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b8dc:	e02b      	b.n	800b936 <atan+0xce>
 800b8de:	f000 f963 	bl	800bba8 <fabs>
 800b8e2:	4bab      	ldr	r3, [pc, #684]	; (800bb90 <atan+0x328>)
 800b8e4:	429e      	cmp	r6, r3
 800b8e6:	ec55 4b10 	vmov	r4, r5, d0
 800b8ea:	f300 80bf 	bgt.w	800ba6c <atan+0x204>
 800b8ee:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b8f2:	429e      	cmp	r6, r3
 800b8f4:	f300 80a0 	bgt.w	800ba38 <atan+0x1d0>
 800b8f8:	ee10 2a10 	vmov	r2, s0
 800b8fc:	ee10 0a10 	vmov	r0, s0
 800b900:	462b      	mov	r3, r5
 800b902:	4629      	mov	r1, r5
 800b904:	f7f4 fcc2 	bl	800028c <__adddf3>
 800b908:	4ba0      	ldr	r3, [pc, #640]	; (800bb8c <atan+0x324>)
 800b90a:	2200      	movs	r2, #0
 800b90c:	f7f4 fcbc 	bl	8000288 <__aeabi_dsub>
 800b910:	2200      	movs	r2, #0
 800b912:	4606      	mov	r6, r0
 800b914:	460f      	mov	r7, r1
 800b916:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b91a:	4620      	mov	r0, r4
 800b91c:	4629      	mov	r1, r5
 800b91e:	f7f4 fcb5 	bl	800028c <__adddf3>
 800b922:	4602      	mov	r2, r0
 800b924:	460b      	mov	r3, r1
 800b926:	4630      	mov	r0, r6
 800b928:	4639      	mov	r1, r7
 800b92a:	f7f4 ff8f 	bl	800084c <__aeabi_ddiv>
 800b92e:	f04f 0a00 	mov.w	sl, #0
 800b932:	4604      	mov	r4, r0
 800b934:	460d      	mov	r5, r1
 800b936:	4622      	mov	r2, r4
 800b938:	462b      	mov	r3, r5
 800b93a:	4620      	mov	r0, r4
 800b93c:	4629      	mov	r1, r5
 800b93e:	f7f4 fe5b 	bl	80005f8 <__aeabi_dmul>
 800b942:	4602      	mov	r2, r0
 800b944:	460b      	mov	r3, r1
 800b946:	4680      	mov	r8, r0
 800b948:	4689      	mov	r9, r1
 800b94a:	f7f4 fe55 	bl	80005f8 <__aeabi_dmul>
 800b94e:	a374      	add	r3, pc, #464	; (adr r3, 800bb20 <atan+0x2b8>)
 800b950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b954:	4606      	mov	r6, r0
 800b956:	460f      	mov	r7, r1
 800b958:	f7f4 fe4e 	bl	80005f8 <__aeabi_dmul>
 800b95c:	a372      	add	r3, pc, #456	; (adr r3, 800bb28 <atan+0x2c0>)
 800b95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b962:	f7f4 fc93 	bl	800028c <__adddf3>
 800b966:	4632      	mov	r2, r6
 800b968:	463b      	mov	r3, r7
 800b96a:	f7f4 fe45 	bl	80005f8 <__aeabi_dmul>
 800b96e:	a370      	add	r3, pc, #448	; (adr r3, 800bb30 <atan+0x2c8>)
 800b970:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b974:	f7f4 fc8a 	bl	800028c <__adddf3>
 800b978:	4632      	mov	r2, r6
 800b97a:	463b      	mov	r3, r7
 800b97c:	f7f4 fe3c 	bl	80005f8 <__aeabi_dmul>
 800b980:	a36d      	add	r3, pc, #436	; (adr r3, 800bb38 <atan+0x2d0>)
 800b982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b986:	f7f4 fc81 	bl	800028c <__adddf3>
 800b98a:	4632      	mov	r2, r6
 800b98c:	463b      	mov	r3, r7
 800b98e:	f7f4 fe33 	bl	80005f8 <__aeabi_dmul>
 800b992:	a36b      	add	r3, pc, #428	; (adr r3, 800bb40 <atan+0x2d8>)
 800b994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b998:	f7f4 fc78 	bl	800028c <__adddf3>
 800b99c:	4632      	mov	r2, r6
 800b99e:	463b      	mov	r3, r7
 800b9a0:	f7f4 fe2a 	bl	80005f8 <__aeabi_dmul>
 800b9a4:	a368      	add	r3, pc, #416	; (adr r3, 800bb48 <atan+0x2e0>)
 800b9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9aa:	f7f4 fc6f 	bl	800028c <__adddf3>
 800b9ae:	4642      	mov	r2, r8
 800b9b0:	464b      	mov	r3, r9
 800b9b2:	f7f4 fe21 	bl	80005f8 <__aeabi_dmul>
 800b9b6:	a366      	add	r3, pc, #408	; (adr r3, 800bb50 <atan+0x2e8>)
 800b9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9bc:	4680      	mov	r8, r0
 800b9be:	4689      	mov	r9, r1
 800b9c0:	4630      	mov	r0, r6
 800b9c2:	4639      	mov	r1, r7
 800b9c4:	f7f4 fe18 	bl	80005f8 <__aeabi_dmul>
 800b9c8:	a363      	add	r3, pc, #396	; (adr r3, 800bb58 <atan+0x2f0>)
 800b9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ce:	f7f4 fc5b 	bl	8000288 <__aeabi_dsub>
 800b9d2:	4632      	mov	r2, r6
 800b9d4:	463b      	mov	r3, r7
 800b9d6:	f7f4 fe0f 	bl	80005f8 <__aeabi_dmul>
 800b9da:	a361      	add	r3, pc, #388	; (adr r3, 800bb60 <atan+0x2f8>)
 800b9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e0:	f7f4 fc52 	bl	8000288 <__aeabi_dsub>
 800b9e4:	4632      	mov	r2, r6
 800b9e6:	463b      	mov	r3, r7
 800b9e8:	f7f4 fe06 	bl	80005f8 <__aeabi_dmul>
 800b9ec:	a35e      	add	r3, pc, #376	; (adr r3, 800bb68 <atan+0x300>)
 800b9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f2:	f7f4 fc49 	bl	8000288 <__aeabi_dsub>
 800b9f6:	4632      	mov	r2, r6
 800b9f8:	463b      	mov	r3, r7
 800b9fa:	f7f4 fdfd 	bl	80005f8 <__aeabi_dmul>
 800b9fe:	a35c      	add	r3, pc, #368	; (adr r3, 800bb70 <atan+0x308>)
 800ba00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba04:	f7f4 fc40 	bl	8000288 <__aeabi_dsub>
 800ba08:	4632      	mov	r2, r6
 800ba0a:	463b      	mov	r3, r7
 800ba0c:	f7f4 fdf4 	bl	80005f8 <__aeabi_dmul>
 800ba10:	4602      	mov	r2, r0
 800ba12:	460b      	mov	r3, r1
 800ba14:	4640      	mov	r0, r8
 800ba16:	4649      	mov	r1, r9
 800ba18:	f7f4 fc38 	bl	800028c <__adddf3>
 800ba1c:	4622      	mov	r2, r4
 800ba1e:	462b      	mov	r3, r5
 800ba20:	f7f4 fdea 	bl	80005f8 <__aeabi_dmul>
 800ba24:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800ba28:	4602      	mov	r2, r0
 800ba2a:	460b      	mov	r3, r1
 800ba2c:	d14b      	bne.n	800bac6 <atan+0x25e>
 800ba2e:	4620      	mov	r0, r4
 800ba30:	4629      	mov	r1, r5
 800ba32:	f7f4 fc29 	bl	8000288 <__aeabi_dsub>
 800ba36:	e72c      	b.n	800b892 <atan+0x2a>
 800ba38:	ee10 0a10 	vmov	r0, s0
 800ba3c:	4b53      	ldr	r3, [pc, #332]	; (800bb8c <atan+0x324>)
 800ba3e:	2200      	movs	r2, #0
 800ba40:	4629      	mov	r1, r5
 800ba42:	f7f4 fc21 	bl	8000288 <__aeabi_dsub>
 800ba46:	4b51      	ldr	r3, [pc, #324]	; (800bb8c <atan+0x324>)
 800ba48:	4606      	mov	r6, r0
 800ba4a:	460f      	mov	r7, r1
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	4620      	mov	r0, r4
 800ba50:	4629      	mov	r1, r5
 800ba52:	f7f4 fc1b 	bl	800028c <__adddf3>
 800ba56:	4602      	mov	r2, r0
 800ba58:	460b      	mov	r3, r1
 800ba5a:	4630      	mov	r0, r6
 800ba5c:	4639      	mov	r1, r7
 800ba5e:	f7f4 fef5 	bl	800084c <__aeabi_ddiv>
 800ba62:	f04f 0a01 	mov.w	sl, #1
 800ba66:	4604      	mov	r4, r0
 800ba68:	460d      	mov	r5, r1
 800ba6a:	e764      	b.n	800b936 <atan+0xce>
 800ba6c:	4b49      	ldr	r3, [pc, #292]	; (800bb94 <atan+0x32c>)
 800ba6e:	429e      	cmp	r6, r3
 800ba70:	da1d      	bge.n	800baae <atan+0x246>
 800ba72:	ee10 0a10 	vmov	r0, s0
 800ba76:	4b48      	ldr	r3, [pc, #288]	; (800bb98 <atan+0x330>)
 800ba78:	2200      	movs	r2, #0
 800ba7a:	4629      	mov	r1, r5
 800ba7c:	f7f4 fc04 	bl	8000288 <__aeabi_dsub>
 800ba80:	4b45      	ldr	r3, [pc, #276]	; (800bb98 <atan+0x330>)
 800ba82:	4606      	mov	r6, r0
 800ba84:	460f      	mov	r7, r1
 800ba86:	2200      	movs	r2, #0
 800ba88:	4620      	mov	r0, r4
 800ba8a:	4629      	mov	r1, r5
 800ba8c:	f7f4 fdb4 	bl	80005f8 <__aeabi_dmul>
 800ba90:	4b3e      	ldr	r3, [pc, #248]	; (800bb8c <atan+0x324>)
 800ba92:	2200      	movs	r2, #0
 800ba94:	f7f4 fbfa 	bl	800028c <__adddf3>
 800ba98:	4602      	mov	r2, r0
 800ba9a:	460b      	mov	r3, r1
 800ba9c:	4630      	mov	r0, r6
 800ba9e:	4639      	mov	r1, r7
 800baa0:	f7f4 fed4 	bl	800084c <__aeabi_ddiv>
 800baa4:	f04f 0a02 	mov.w	sl, #2
 800baa8:	4604      	mov	r4, r0
 800baaa:	460d      	mov	r5, r1
 800baac:	e743      	b.n	800b936 <atan+0xce>
 800baae:	462b      	mov	r3, r5
 800bab0:	ee10 2a10 	vmov	r2, s0
 800bab4:	4939      	ldr	r1, [pc, #228]	; (800bb9c <atan+0x334>)
 800bab6:	2000      	movs	r0, #0
 800bab8:	f7f4 fec8 	bl	800084c <__aeabi_ddiv>
 800babc:	f04f 0a03 	mov.w	sl, #3
 800bac0:	4604      	mov	r4, r0
 800bac2:	460d      	mov	r5, r1
 800bac4:	e737      	b.n	800b936 <atan+0xce>
 800bac6:	4b36      	ldr	r3, [pc, #216]	; (800bba0 <atan+0x338>)
 800bac8:	4e36      	ldr	r6, [pc, #216]	; (800bba4 <atan+0x33c>)
 800baca:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800bace:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800bad2:	e9da 2300 	ldrd	r2, r3, [sl]
 800bad6:	f7f4 fbd7 	bl	8000288 <__aeabi_dsub>
 800bada:	4622      	mov	r2, r4
 800badc:	462b      	mov	r3, r5
 800bade:	f7f4 fbd3 	bl	8000288 <__aeabi_dsub>
 800bae2:	4602      	mov	r2, r0
 800bae4:	460b      	mov	r3, r1
 800bae6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800baea:	f7f4 fbcd 	bl	8000288 <__aeabi_dsub>
 800baee:	f1bb 0f00 	cmp.w	fp, #0
 800baf2:	4604      	mov	r4, r0
 800baf4:	460d      	mov	r5, r1
 800baf6:	f6bf aed6 	bge.w	800b8a6 <atan+0x3e>
 800bafa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bafe:	461d      	mov	r5, r3
 800bb00:	e6d1      	b.n	800b8a6 <atan+0x3e>
 800bb02:	a51d      	add	r5, pc, #116	; (adr r5, 800bb78 <atan+0x310>)
 800bb04:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bb08:	e6cd      	b.n	800b8a6 <atan+0x3e>
 800bb0a:	bf00      	nop
 800bb0c:	f3af 8000 	nop.w
 800bb10:	54442d18 	.word	0x54442d18
 800bb14:	bff921fb 	.word	0xbff921fb
 800bb18:	8800759c 	.word	0x8800759c
 800bb1c:	7e37e43c 	.word	0x7e37e43c
 800bb20:	e322da11 	.word	0xe322da11
 800bb24:	3f90ad3a 	.word	0x3f90ad3a
 800bb28:	24760deb 	.word	0x24760deb
 800bb2c:	3fa97b4b 	.word	0x3fa97b4b
 800bb30:	a0d03d51 	.word	0xa0d03d51
 800bb34:	3fb10d66 	.word	0x3fb10d66
 800bb38:	c54c206e 	.word	0xc54c206e
 800bb3c:	3fb745cd 	.word	0x3fb745cd
 800bb40:	920083ff 	.word	0x920083ff
 800bb44:	3fc24924 	.word	0x3fc24924
 800bb48:	5555550d 	.word	0x5555550d
 800bb4c:	3fd55555 	.word	0x3fd55555
 800bb50:	2c6a6c2f 	.word	0x2c6a6c2f
 800bb54:	bfa2b444 	.word	0xbfa2b444
 800bb58:	52defd9a 	.word	0x52defd9a
 800bb5c:	3fadde2d 	.word	0x3fadde2d
 800bb60:	af749a6d 	.word	0xaf749a6d
 800bb64:	3fb3b0f2 	.word	0x3fb3b0f2
 800bb68:	fe231671 	.word	0xfe231671
 800bb6c:	3fbc71c6 	.word	0x3fbc71c6
 800bb70:	9998ebc4 	.word	0x9998ebc4
 800bb74:	3fc99999 	.word	0x3fc99999
 800bb78:	54442d18 	.word	0x54442d18
 800bb7c:	3ff921fb 	.word	0x3ff921fb
 800bb80:	440fffff 	.word	0x440fffff
 800bb84:	7ff00000 	.word	0x7ff00000
 800bb88:	3fdbffff 	.word	0x3fdbffff
 800bb8c:	3ff00000 	.word	0x3ff00000
 800bb90:	3ff2ffff 	.word	0x3ff2ffff
 800bb94:	40038000 	.word	0x40038000
 800bb98:	3ff80000 	.word	0x3ff80000
 800bb9c:	bff00000 	.word	0xbff00000
 800bba0:	0800c258 	.word	0x0800c258
 800bba4:	0800c238 	.word	0x0800c238

0800bba8 <fabs>:
 800bba8:	ec51 0b10 	vmov	r0, r1, d0
 800bbac:	ee10 2a10 	vmov	r2, s0
 800bbb0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bbb4:	ec43 2b10 	vmov	d0, r2, r3
 800bbb8:	4770      	bx	lr
	...

0800bbbc <_init>:
 800bbbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbbe:	bf00      	nop
 800bbc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbc2:	bc08      	pop	{r3}
 800bbc4:	469e      	mov	lr, r3
 800bbc6:	4770      	bx	lr

0800bbc8 <_fini>:
 800bbc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbca:	bf00      	nop
 800bbcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbce:	bc08      	pop	{r3}
 800bbd0:	469e      	mov	lr, r3
 800bbd2:	4770      	bx	lr
